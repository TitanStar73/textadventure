"""
Code by Arush Mundada

Disclaimer:
Some stuff was generated by AI, those parts have #AI Generated Start and #AI Generated End before and after them

Users will be given the option to provide an OpenAI API key to create a more imersive experience (optional always)

Not sure how to start Contributing? You can add to the IMMERISIVE_TEXT_KEYWORDS dictionary to add more immersive text, include bold, italic, underline or coloured text! Make sure .lower() is supported though!

Things to add:
#Atlantians
#Dwarves
#Puzzle in Dark Temple
"""
"""Here are the settings you should edit:"""
WPM = 350 #Words speed text animation, recommended: 350
DISABLE_ANIMATION = False #Turns off text animation if enabled
DISABLE_COLORS = False #Turns off all colors if enabled
DISABLE_COLOR_REPLACE = False #Turns off most colors if enabled (keeps the important ones!)

#Optional | Will not change gameplay descisons only provides a more immersive dialogue
#If not provided make it None
OPENAI_API_KEY = None 


#Great! Now start playing! (or feel free to check out the source code!), beware though, spoilers ahead!

#Welcome message
print("""
Welcome to the Text Based Adventure!

Some tips:
Come back every once in a while to see if there are any new updates!
Enter quit to exit the game.
Enter save to save your progress in the game to a file (Only available if the last character in the text is PURPLE).
Enter autosave to automatically save the game whenever possible.
Enter inventory to view your inventory
      
Nothing is as it seems, nothing is fixed, everything is a choice. Choose wisely.
      
If you see a "..." click enter to continue
      
Try it out...""")

input()
print("Great! Let's get started!")

from random import choice as randchoice
from random import randint
from time import sleep
import os.path
import requests
import random
import keyboard
from itertools import cycle as itercycle
from time import time as timenow
import datetime


DEBUG_ALLOWED = False #Turns on debug mode | PROCEED WITH CAUTION, ARBITARY PYTHON CODE CAN BE EXECUTED


if OPENAI_API_KEY != None:
    import openai

    def get_openai_response(prompt):
        response = openai.Completion.create(
            engine="gpt4",
            prompt=prompt,
            max_tokens=300
        )
        return response.choices[0].text.strip()

else:
    def get_openai_response(prompt):
        return "Roses are red, Violets are blue, to get a better response, provide an OpenAI API key too!"

def shuffle(lst): #Random's shuffle is not in place, edits the constant list of questions.
    lst = lst.copy()
    new_lst = []
    while len(lst) > 0:
        new_lst.append(lst.pop(randint(0,len(lst)-1)))
    return new_lst

def char_animation(msg, end = "\n"):
    global previous_choices
    msg = msg.replace("sword", f"{previous_choices['sword_color']}{previous_choices['sword_name']}{DEFAULT_COLOR}")
    msg = msg.replace("{PAUSE}", f"{PAUSE}") #Adds a pause incase fstring was accidently not used
    
    sorted_immersive = sorted(IMMERSIVE_TEXT_KEYWORDS.keys(), key = lambda x: len(x))
    sorted_immersive = sorted_immersive[::-1] #Flips keys and sorts to allow for longer keywords to be replaced first, prevents clashes like magical and magic
    
    for item in sorted_immersive:
        msg = msg.replace(item, IMMERSIVE_TEXT_KEYWORDS[item] + DEFAULT_COLOR)
        msg = msg.replace(item.lower(), IMMERSIVE_TEXT_KEYWORDS[item].lower() + DEFAULT_COLOR)

    for char in msg:
        print(char, end = "", flush = True)
        sleep(10/WPM)
    print(end, end = "")

def char_animation_in(msg):
    char_animation(msg, end = "")
    return input()

if DISABLE_ANIMATION:
    char_animation = print
    char_animation_in = input

def get_char_animation_in(msg,accepted:dict, allow_save = False,err_msg = ""): #{'choice1':['choice1','alias1','alias2'],'choice2':['choice2','alias1','alias2']}
    global situtation, NAME, been_in_situations, morailty, person_type, career, previous_choices, gold, inventory, autosave, credits
    if allow_save and (not autosave):
        msg = msg[:-1] + PURPLE + msg[-1] + DEFAULT_COLOR #Indicate it can be saved
    while True:
        choice = char_animation_in(msg).lower()
        if choice == 'autosave':
            autosave = not autosave
            char_animation(f"Autosave is now {'on' if autosave else 'off'}. Enter autosave again to toggle.")
            continue
        elif choice == 'foresight':
            if 'potion_of_foresight' in inventory:
                char_animation("You see a vision of the future...")
                char_animation("You see yourself in a dark space, surrounded with nothing but black space... A seering pain through your heart")
                inventory.remove('potion_of_foresight')
            else:
                char_animation("You don't have the potion of foresight")
        elif choice == 'inventory':
            char_animation(f"\n{NAME}'s Inventory:")
            char_animation(f"Gold: {gold}")
            if 17 in been_in_situations:
                char_animation(f"Credits: {credits}")
            for item in inventory.inventory:
                if int(inventory.inventory[item]) > 1_00_000:
                    char_animation(f"{item}: ∞")
                else:
                    char_animation(f"{item}: {inventory.inventory[item]}")

        if choice == 'quit':
            a = char_animation_in("Are you sure? If you haven't saved your progress, you will lose it. Press enter to confirm, or anything else to cancel. You can enter 'save' to save")
            if a == '':
                exit()
        if choice == 'save' or (autosave and allow_save):
            if not allow_save:
                char_animation("You can't save right now :(\nPlease wait till you are prompted which place to go next!")
                continue
            if autosave:
                filename = "game.data"
            else:
                filename = char_animation_in("Enter a filename: ")
            with open(filename, 'w') as f:
                f.write(f"{situtation}\n{NAME}\n{been_in_situations}\n{morailty}\n{person_type}\n{career}\n{previous_choices}\n{gold}\n{inventory}\n{autosave}\n{credits}")

        for key in accepted:
            if choice in [item.lower() for item in accepted[key]]:
                return key
        char_animation(err_msg, end = "")

def get_karma(thing):
    try:
        return previous_choices[thing]
    except KeyError:
        return 0

def parse_dict(dictt):
    dictt = [item for item in dictt.strip('{}').split(',') if item != ""] #{'key1':'value1','key2':'value2'} -> ["'key1':'value1'"","'key2':'value2'"]
    new_dict = {}
    for item in dictt:
        key, value = item.split(':') #key = "'key1'", value = "'value1'"
        key = key.strip()
        value = value.strip()
        try:
            key = int(key) #Try int
        except ValueError:
            try:
                key = float(key) #Try float
            except ValueError:
                key = key[1:-1] #Remove quotes

        try:
            value = int(value) #Try int
        except ValueError:
            try:
                value = float(value) #Try float
            except ValueError:
                value = value[1:-1] #Remove quotes

        new_dict[key] = value
    return new_dict

def play_wordle():
    def get_a_word():
        url = f"https://api.datamuse.com/words?sp={'?'*WORDLE_NUM_LETTERS}&md=f&max=1000"
        response = requests.get(url)

        if response.status_code == 200 and response.json():
            words = response.json()
            new_words = []
            for word in words:
                if word['tags'] and float(word['tags'][0].split(":")[1]) > WORDLE_FREQ:
                    new_words.append(word['word'])
            return random.choice(new_words)
        return "ERRORS" #Even after error still give a word :)

    def is_a_word(word):
        url = f"https://api.datamuse.com/words?sp={word}&max=1"
        response = requests.get(url)
        if response.status_code == 200 and response.json():
            return response.json()[0]['word'] == word.lower()
        return False
    
    def print_word(word, color_sequence):
        for row in range(len(BLOCKED_LETTERS['A'].split('\n'))):
            for i,letter in enumerate(word):
                print(color_sequence[i], end='')
                print(BLOCKED_LETTERS[letter.upper()].split('\n')[row], end=DEFAULT_COLOR)            
            print("")

    score = 0
    the_word = get_a_word()
    char_animation("Lets start!")
    while score < 6:
        score += 1

        while True:
            guess = input(">> ").lower()
            if len(guess) != len(the_word):
                char_animation(f"Incorrect length. It should be {len(the_word)} letters.")
            elif is_a_word(guess):
                break
            else:
                char_animation("Not a word.")

        print_word(guess, [GREEN if guess[i] == char else (YELLOW if guess[i] in the_word else RED) for i,char in enumerate(the_word)])
        if guess == the_word:
            break

    if score == 1:
        char_animation("You got it in 1 guess!")
        return 100
    if guess == the_word:
        char_animation(f"You got it in {score} guesses!")
        return 10 if score > 3 else 30
    char_animation("You lost! The word was: " + the_word)
    return 0

def play_quiz():
    if randint(0,1) == 3:
        question,answer = randchoice(RIDDLES)
        char_animation(f"Question: {question}")
        response = char_animation_in("Answer: ").lower()
        if response in answer:
            char_animation("Correct!")
            return 10
        else:
            char_animation(f"Incorrect! The answer was {next(iter(answer))}")
            return 0
    else:
        question, answers = randchoice(MYTHOLOGY_QUESTIONS)
        char_animation(f"Question: {question}")
        correct_answer = answers[0]
        answers = shuffle(answers)
        for i,item in enumerate(answers):
            char_animation(f"{i+1}. {item}")

        response = get_char_animation_in("Answer: ",accepted={1:["1"],2:["2"],3:["3"],4:["4"]})-1
        if answers[response] == correct_answer:
            char_animation("Correct!")
            return 10
        else:
            char_animation(f"Incorrect! The answer was {correct_answer}")
            return 0

def play_trivia():
    question, answers = randchoice(LOGIC_PUZZLES)
    char_animation(f"Question: {question}")
    correct_answer = answers[0]
    answers = shuffle(answers)
    for i,item in enumerate(answers):
        char_animation(f"{i+1}. {item}")

    response = get_char_animation_in("Answer: ",accepted={1:["1"],2:["2"],3:["3"],4:["4"]})-1
    if answers[response] == correct_answer:
        char_animation("Correct!")
        if randint(0,1100) == 9:
            char_animation("You won the Super Jackpot!!")
            return 500
        if randint(0,100) == 9:
            char_animation("You won the Jackpot!!")
            return 100
        return randchoice([1,1,2,4,5,10])
    else:
        char_animation(f"Incorrect! The answer was {correct_answer}")
        return 0

def play_slot_machine():
    for item in SLOT_ASSETS:
        if len(item.split('\n')) != len(SLOT_ASSETS[0].split('\n')):
            print("Error: All assets must have the same number of lines. | This is likely a bug in the source code.")
            print("Exiting slot machine.")
            return 0

    def special_print(texts):
        total = ""
        dubs = texts[0].split('\n')
        dubs2 = []
        #No idea what causes this bug but it took me ages to debug :(
        for text in dubs:
            if text != '':
                dubs2.append(text)

        for row_no in range(0,len(dubs2)):
            for text in texts:
                total += text.split('\n')[row_no] + " "
            total += "\n"
        print(total[:-1])
    
    def get_spliced_asset(a1,a2,ratio): #ratio to ratio + 1 shown, e.g. 0.5 to 1.5
        total = a1 + "\n" + a2
        total = total.split("\n")

        final = ""
        start_line = int(len(a1.split('\n')) * ratio)

        for line_no in range(start_line, start_line + len(a1.split('\n'))):
            final += total[line_no] + "\n"

        return final

    def create_roll(a1,a2, previous = []):
        frames_for_roll = int(SLOT_FPS*SLOT_ANIMATION_TIME[2])
        for i in range(0,frames_for_roll-1):
            previous.append(get_spliced_asset(a1,a2,i/frames_for_roll))
            special_print(previous)
            previous.pop()
            sleep(SLOT_SLEEP)
            print(SLOT_REFRESH, flush=True)
        
        previous.append(get_spliced_asset(a1,a2,1))
        special_print(previous)
        sleep(SLOT_SLEEP)
        
    char_animation(f"Slot machine! Get 3 {GREEN}$${DEFAULT_COLOR} to win 888x your bet! Get 3 of a kind to win 69x your bet!")
    while True:
        try:
            bet = int(char_animation_in("How much money would you like to bet?: "))
            break
        except:
            char_animation("Please enter a whole number.")

    s1 = randchoice(SLOT_1_ROLLS) #randchoice(SLOT_1_ROLLS)
    s2 = randchoice(SLOT_2_ROLLS)
    s3 = randchoice(SLOT_3_ROLLS)
    
    a2 = randchoice(SLOT_1_ROLLS)
    for i in range(0, SLOT_ANIMATION_TIME[1]):
        a1 = a2
        a2 = randchoice(SLOT_1_ROLLS)
        create_roll(a1,a2, previous=[])
        print(SLOT_REFRESH, flush=True)

    create_roll(a2,s1, previous=[])
    sleep(SLOT_ANIMATION_TIME[0])

    print(SLOT_REFRESH, flush=True)
    a2 = randchoice(SLOT_2_ROLLS)
    for i in range(0, SLOT_ANIMATION_TIME[1]):
        a1 = a2
        a2 = randchoice(SLOT_2_ROLLS)
        create_roll(a1,a2, previous=[s1])
        print(SLOT_REFRESH, flush=True)

    create_roll(a2,s2, previous=[s1])
    sleep(SLOT_ANIMATION_TIME[0])

    print(SLOT_REFRESH, flush=True)
    a2 = randchoice(SLOT_3_ROLLS)
    for i in range(0, SLOT_ANIMATION_TIME[1]):
        a1 = a2
        a2 = randchoice(SLOT_3_ROLLS)
        create_roll(a1,a2, previous=[s1,s2])
        print(SLOT_REFRESH, flush=True)

    create_roll(a2,s3, previous=[s1,s2])
    sleep(SLOT_ANIMATION_TIME[0])
    
        
    if s1 == s2 == s3 == SLOT_WINNING:
        char_animation(f"Congratulations! You won {bet*888} gold!")
        return bet*888

    if s1 == s2 == s3:
        char_animation(f"Congratulations! You won {bet*69} gold!")
        return bet*69
    
    char_animation(f"You lost! Sorry :(")
    char_animation(f"-{bet} gold")
    return -bet

def jumble_name(name):
    name = [char for char in name.lower() if char != " "] #Generate a list of letters, lowercase
    for i in range(0, round(len(name)/4.2)):
        name.append(" ") #Add a space every ~4.2 character, best after testing
    name = shuffle(name) #Randomize name
    prev = None
    final = ""
    for i in range(0,len(name)):
        if prev == " ":
            if name[i] == " ":
                continue #Don't add two spaces one after another
            else:
                final += name[i].upper()
        else:
            final += name[i]
    return final.strip() #Remove leading and trailing spaces

def get_id(id):
    for item in MAZE:
        if item[0] == id:
            _, fdesc, flink, bdesc, blink = item
            if fdesc == None:
                fdesc = bdesc
            if bdesc == None:
                bdesc = fdesc
            if flink == None:
                flink = blink
            if blink == None:
                blink = flink
            return (id, fdesc, flink, bdesc, blink)
    return None

def play_maze():
    current_id = 1
    current_direction = 'f'
    current_moves = 0
    while True:
        if current_id == 0:
            break
        if current_moves == 50:
            char_animation("You are lost in the maze. Then you hear a voice... 'Quick tip: If you always try to go left, if not left then straight, you will always find the exit - i.e. stick to the left wall.'")
        if current_moves == 125:
            #pity exit
            break

        current_moves += 1
        _, fdesc, flink, bdesc, blink = get_id(current_id) 
        if current_direction == 'f':
            char_animation(fdesc)
            char_animation("Where would you like to go?")
            choices_map = {key:None for key in flink}
            for i,key in enumerate(flink.keys()):
                char_animation(f"{i+1}. {flink[key][1:]}")
                choices_map[key] = [str(i+1)]

            choice = get_char_animation_in("Choice: ",choices_map)
            current_id = choice #New location  
            current_direction = flink[choice][0] #Direction

        elif current_direction == 'b':
            char_animation(bdesc)
            char_animation("Where would you like to go?")
            choices_map = {key:None for key in blink}
            for i,key in enumerate(blink.keys()):
                char_animation(f"{i+1}. {blink[key][1:]}")
                choices_map[key] = [str(i+1)]

            choice = get_char_animation_in("Choice: ",choices_map)
            current_id = choice #New location  
            current_direction = blink[choice][0] #Direction
        else:
            raise Exception("Corrupted Maze Data.")

    char_animation("You see a light. You run towards it. You are free!")

def training_sequence():
    char_animation("In the final battle you will face Rahas!")
    char_animation("You can move using WASD and shoot using IJKL")
    temp_board = Board()
    char_animation(f"\nThis is you {temp_board.render_icons[' p ']}")
    char_animation(f"This is Rahas {temp_board.render_icons[' e ']}")
    char_animation(f"These are your bullets {temp_board.render_icons['PRB']}")
    char_animation(f"These are Rahas' bullets {temp_board.render_icons['ERB']}")
    char_animation(f"Beware of Rahas' missiles {temp_board.render_icons['ERM']} they deal 3x damage and cannot be stopped with your bullets!")
    char_animation(f"\nAs the battle progresses, Rahas will get stronger and faster!")
    char_animation(f"That is all you need to know\nGood luck!\n\n")
    char_animation_in("Press enter to continue...")

def real_fight_rahas(boss_health = 100, player_health = 5, max_iterations = 1_000_000, max_health = None):
    my_board = Board()

    if max_health == None:
        max_health = int(player_health)

    def sleep_check_keys(sleeptime,keys):    
        start = timenow() #Apparently faster than datetime.now()?
        last_pressed = None
        for i in itercycle(keys):
            if keyboard.is_pressed(i):
                last_pressed = i
            if timenow() - start > sleeptime:
                return last_pressed

    def upload_banner(text, i, banner):
        if len(banner) <= len(text):
            banner = text
        else:
            banner = text + (' ' * (len(banner) - len(text)))
        banner_showed_at = i

        return banner, banner_showed_at

    last_moved_at = -1000
    last_shot_at = -1000
    banner_showed_at = -1000
    banner = ""

    boss_health = boss_health
    player_health = player_health

    boss_moving_up = True
    flag = None

    for key in ["w","a","s","d","j","k","l","i"]:
        keyboard.block_key(key)

    print(HIDE_CURSOR)

    for i in range(0,max_iterations):
        last_pressed = sleep_check_keys(1/FPS,["w","a","s","d","j","k","l","i"])

        #Movement handler
        if last_pressed in {"w","a","s","d"} and i - last_moved_at > (FPS*MOVE_COOLDOWN): #Prevent too fast movement
            x,y = my_board[" p "][1]
            if last_pressed == "w":
                y -= 1
            elif last_pressed == "a":
                x -= 1
            elif last_pressed == "s":
                y += 1
            elif last_pressed == "d":
                x += 1
            if x >= BATTLE_SIZE - 2: #Limit player movement to 2 blocks from the right
                x = BATTLE_SIZE - 3
            if y >= BATTLE_SIZE:
                y = BATTLE_SIZE - 1
            if x < 0:
                x = 0
            if y < 0:
                y = 0
            
            last_moved_at = i
            my_board[" p "] = (x,y)

        #Shoot handler
        if last_pressed in {"j","k","l","i"} and i - last_shot_at > (FPS*SHOOT_COOLDOWN): #Prevent too fast shooting
            x,y = my_board[" p "][1]
            if last_pressed == "l":
                my_board["newPRB"] = (x,y)
            elif last_pressed == "k":
                my_board["newPDB"] = (x,y)
            elif last_pressed == "j":
                my_board["newPLB"] = (x,y)
            elif last_pressed == "i":
                my_board["newPUB"] = (x,y)
            last_shot_at = i


        #Bullet mover
        if i%(FPS//BULLET_SPEED) == 0: #Every half second
            for j in range(0,len(my_board)):
                if my_board[j][0] in {"PRB","PLB","PDB","PUB"}:
                    x,y = my_board[j][1]
                    if my_board[j][0] == "PRB":
                        x += 1
                    elif my_board[j][0] == "PLB":
                        x -= 1
                    elif my_board[j][0] == "PDB":
                        y += 1
                    elif my_board[j][0] == "PUB":
                        y -= 1
                    if x >= BATTLE_SIZE or x < 0 or y >= BATTLE_SIZE or y < 0:
                        my_board[j] = None #removes bullet in next render
                    else:
                        my_board[j][1] = (x,y) #moves bullet
        
        #Enemy bullet mover, moves 1 frame later, to prevent bullets from "phasing" through each other
        if i%(FPS//BULLET_SPEED) == 1: #Every half second
            for j in range(0,len(my_board)):
                if my_board[j][0] in {"ERB","ELB","EDB","EUB", "ERM","ELM","EDM","EUM"}:
                    x,y = my_board[j][1]
                    if my_board[j][0][1] == "R":
                        x += 1
                    elif my_board[j][0][1] == "L":
                        x -= 1
                    elif my_board[j][0][1] == "D":
                        y += 1
                    elif my_board[j][0][1] == "U":
                        y -= 1
                    if x >= BATTLE_SIZE or x < 0 or y >= BATTLE_SIZE or y < 0:
                        my_board[j][1] = None #removes bullet in next render
                    else:
                        my_board[j][1] = (x,y) #moves bullet
        
        my_board.clean()

        #Detect bullet collisions
        already_exits = []
        collisions = []
        for j in range(0,len(my_board)):
            if my_board[j][0] in {"ERB","ELB","EDB","EUB","PRB","PLB","PDB","PUB", "ERM","ELM","EDM","EUM"}:
                x,y = my_board[j][1]
                if (x,y) in already_exits:
                    collisions.append((x,y))
                else:
                    already_exits.append((x,y))
        for j in range(0,len(my_board)):
            if my_board[j][0] in {"ERB","ELB","EDB","EUB","PRB","PLB","PDB","PUB"}: #Missile immune from being destoryed
                x,y = my_board[j][1]
                if (x,y) in collisions:
                    my_board[j][1] = None

        #Shoot enemy bullets
        if boss_health < 50:
            difficulty_multiplier = 2
        elif boss_health < 75:
            difficulty_multiplier = 1.5
        else:
            difficulty_multiplier = 1

        my_board.clean()
        if i%int((FPS*100)/(DIFFICULTY_BOSS * difficulty_multiplier)) == 0:
            if randint(0,1000) < DIFFICULTY_BOSS:
                for j in range(0,len(my_board)):
                    if my_board[j][0] == " e ":
                        x,y = my_board[j][1]
                        bullet_type = ""
                        if boss_health > 50:
                            if randint(1,4) == 2:
                                bullet_type = "M" #Missile
                            else:
                                bullet_type = "B"
                        else: #Always shoot missiles after <50% health
                            bullet_type = "M"

                        my_board.append([f"EL{bullet_type}",(x,randint(0,BATTLE_SIZE-1))])
                        
                        
        #Check if player got hit
        my_board.clean()
        for j in range(0,len(my_board)):
            if my_board[j][0] in {"ERB","ELB","EDB","EUB", "ERM","ELM","EDM","EUM"}:
                x,y = my_board[j][1]
                if my_board[" p "][1] == (x,y):
                    if my_board[j][0][2] == "B":
                        player_health -= 1
                    elif my_board[j][0][2] == "M":
                        player_health -= 3
                    my_board[j][1] = None

        my_board.clean()
        #Check if player hit enemy
        for j in range(0,len(my_board)):
            if my_board[j][0] in {"PRB","PLB","PDB","PUB"}:
                x,y = my_board[j][1]
                if my_board[" e "][1] == (x,y):
                    my_board[j][1] = None
                    if randint(1,20) == 2: #5% chance of crit
                        boss_health -= 20
                        banner, banner_showed_at = upload_banner("CRIT! ", i, banner)
                    elif randint(1,4) == 2: #25% chance after that to be blocked
                        banner, banner_showed_at = upload_banner("BLOCKED! ", i, banner)
                    elif boss_health < 50 and randint(1,4) != 2:
                        boss_health -= randint(7,12)//2 #Half damage
                        banner, banner_showed_at = upload_banner("Rahas shielded 50% of the damage!", i, banner)
                    else:
                        boss_health -= randint(7,12) #Normal hit

        if i%int((FPS*100)/(DIFFICULTY_BOSS*difficulty_multiplier)) == 2:
            x,y = my_board[" e "][1]
            if boss_moving_up:
                y -= 1
            else:
                y += 1
            if y >= BATTLE_SIZE:
                boss_moving_up = True
                y = BATTLE_SIZE - 1
            if y < 0:
                boss_moving_up = False
                y = 0

            my_board[" e "] = (x,y)

        if boss_health < 0:
            boss_health = 0
        if player_health < 0:
            player_health = 0
        
        if player_health == 0:
            banner, banner_showed_at = upload_banner("YOU DIED! ", i, banner)
        if boss_health == 0:
            banner, banner_showed_at = upload_banner("YOU WON! ", i, banner)

        if i%(FPS*10) == 4 and player_health < max_health: #Every 10 seconds
            if " h " not in [item[0] for item in my_board]:
                my_board.append([" h ",(randint(0,BATTLE_SIZE-3),randint(0,BATTLE_SIZE-1))])

        my_board.clean()
        for j in range(0,len(my_board)):
            if my_board[j][0] == " h ":
                x,y = my_board[j][1]
                if my_board[" p "][1] == (x,y):
                    player_health += 1
                    if player_health > max_health:
                        player_health = max_health
                    my_board[j][1] = None
                    banner, banner_showed_at = upload_banner("HEALTH RESTORED! ", i, banner)
        
        my_board.clean()

        shot_charged = min(100, round(((i - last_shot_at)/(FPS*SHOOT_COOLDOWN))*100))
        shot_charged_color = GREEN if shot_charged == 100 else (RED if shot_charged < 75 else YELLOW)
        banner_data = " " * (len(banner) + 5) if i - banner_showed_at > (FPS*2.5) else ' | ' + banner

        my_board.render_screen(f"{PURPLE}BOSS HEALTH: {boss_health}{DEFAULT_COLOR}{banner_data}", f"YOUR HEALTH: {RED}{player_health * '♥'}{DEFAULT_COLOR}{' ' * (5-player_health)}  |  Shot charged up: {shot_charged_color}{' '*(3-len(str(shot_charged)))}{shot_charged}%{DEFAULT_COLOR}", " - ")

        if player_health == 0:
            flag = False
            break

        if boss_health == 0:
            flag = True
            break
        
    print("\n" * (BATTLE_SIZE + 4))
    print(SHOW_CURSOR)

    for key in ["w","a","s","d","j","k","l","i"]:
        keyboard.unblock_key(key)

    return flag

def fake_fight(boss_health = 100, player_health = 5):
    real_fight_rahas(boss_health = boss_health, player_health = player_health, max_iterations = FPS*5)
    print(CAROLINE_WILDABEAST)
    print("Caroline transforms into a wildabeast and attacks the Warrior!")

def get_review(retried = False):
    if not retried:
        char_animation("Would you like to take a small survey and review the game?")
        char_animation("1. Yes")
        char_animation("2. No")
        choice = get_char_animation_in("Choice: ",accepted={1:["1"],2:["2"]})
        if choice == 2:
            return

    char_animation("Hey thanks for playing the game! I would love to hear your feedback!")

    char_animation("How would you rate the overall plot and story?: ")
    plot_rating = get_char_animation_in("Plot rating (1 to 5): ",accepted={1:["1"],2:["2"],3:["3"],4:["4"],5:["5"]})
    
    char_animation("How would you rate the mini-games and aestetics?: ")
    minigame_rating = get_char_animation_in("Minigame rating (1 to 5): ",accepted={1:["1"],2:["2"],3:["3"],4:["4"],5:["5"]})
    
    char_animation("How would you rate the overall game?: ")
    overall_rating = get_char_animation_in("Overall rating (1 to 5): ",accepted={1:["1"],2:["2"],3:["3"],4:["4"],5:["5"]})
    
    char_animation("Any suggestions for the game? (optional, you may leave it blank): ")
    suggestions = char_animation_in("Your suggestions: ")

    form_data = {
        'entry.2041285421': suggestions,
        'entry.1397487394': plot_rating,
        'entry.198549522': minigame_rating,
        'entry.179327885': overall_rating
    }


    base_url = f"https://docs.google.com/forms/d/e/1FAIpQLSeADK89peHgS7WekmG65h4fbuxMqP7p1zJUENvnC5DoDAiv1A/formResponse"

    response = requests.post(base_url, data=form_data)
    if response.status_code == 200:
        char_animation("Thank you for your feedback!")
    else:
        char_animation("There was an error submitting your feedback. Would you like to try again?")
        char_animation("1. Yes, try again.")
        char_animation("2. No, skip past this form.")
        choice = get_char_animation_in("Choice: ",accepted={1:["1"],2:["2"]})
        if choice == 1:
            get_review(retried=True)
    
    char_animation("Thanks for reviewing the game! You get +100 gold for your feedback!")
    global gold
    gold += 100

class InventoryManager:
    def __init__(self, inventory = {}):
        self.inventory = inventory
    
    def add(self, item, amt = 1):
        if item in self.inventory:
            self.inventory[item] += amt
        else:
            self.inventory[item] = amt

    def __str__ (self):
        return str(self.inventory)

    def __contains__(self,item):
        if item in self.inventory:
            return self.inventory[item] > 0
        return False
    
    def remove(self,item, amt = 1):
        self.inventory[item] -= amt
        if self.inventory[item] < 0:
            self.inventory[item] = 0
    
    def count(self,item):
        if item in self.inventory:
            return self.inventory[item]
        return 0
    
    def __iter__(self):
        return iter(self.inventory)

class Board:
    def __init__(self):
        self.icons = [
            [" p ",(0,0)],
            [" e ",(BATTLE_SIZE-1,1)],
        ]
        self.render_icons = {
            ' p ' : f' {GREEN}@{DEFAULT_COLOR} ',
            ' e ' : f' {RED}#{DEFAULT_COLOR} ',
            ' h ' : f' {RED}♥{DEFAULT_COLOR} ',
            'PRB' : f' {GREEN}→{DEFAULT_COLOR} ',
            'PLB' : f' {GREEN}←{DEFAULT_COLOR} ',
            'PDB' : f' {GREEN}↓{DEFAULT_COLOR} ',
            'PUB' : f' {GREEN}↑{DEFAULT_COLOR} ',
            'ERB' : f' {RED}→{DEFAULT_COLOR} ',
            'ELB' : f' {RED}←{DEFAULT_COLOR} ',
            'EDB' : f' {RED}↓{DEFAULT_COLOR} ',
            'EUB' : f' {RED}↑{DEFAULT_COLOR} ',
            'ERM' : f' {RED}⇒{DEFAULT_COLOR} ',
            'ELM' : f' {RED}⇐{DEFAULT_COLOR} ',
            'EDM' : f' {RED}⇓{DEFAULT_COLOR} ',
            'EUM' : f' {RED}⇑{DEFAULT_COLOR} ',
        }

    def render_screen(self, header, footer, default):
        self.clean()
        print(header)
        for i in range(0,BATTLE_SIZE):
            for j in range(BATTLE_SIZE):
                at_here = default
                for k in self.icons:
                    if k[1][0] == j and k[1][1] == i:
                        if k[0] in self.render_icons:
                            at_here = self.render_icons[k[0]]
                        else:
                            at_here = k[0]
                print(at_here,end="")
            print("")            

        print(footer)
        print(BATTLE_REFRESH)
    
    def __getitem__(self,key): #Returns icon data depending on key: int -> location on list; str -> dictionary value
        try:
            int(key)
            return self.icons[key]
        except:
            for i in self.icons:
                if i[0] == key:
                    return i
        return None
    
    def __setitem__(self,key,value):
        try:
            int(key)
            self.icons[key] = value
            return
        except:
            if key[:3] == "new":
                self.icons.append([key[3:],value])
                return

            for i in range(0,len(self.icons)):
                if self.icons[i][0] == key:
                    self.icons[i][1] = value
                    return
        self.icons.append([key, value])

    def __len__(self):
        return len(self.icons)
    
    def append(self,value):
        self.icons.append(value)
    
    def __iter__(self):
        return iter(self.icons)
    
    def clean(self):
        to_remove = []
        for ij in range(0,len(self.icons)):
            try:
                #Checks to see if coords are still well formed
                x,y = self.icons[ij][1]
                int(x)
                int(y)
            except:
                to_remove.append(ij)
        to_remove = sorted(to_remove,reverse=True) #Reverse to avoid index errors
        for i in to_remove:
            self.icons.pop(i) #Pop later to avoid index errors

situtation = 0
been_in_situations = set()
morailty = 0
NAME = "person"
DEFAULT_COLOR = "\033[0m"
RED = DEFAULT_COLOR if DISABLE_COLORS else "\033[31m"
BLUE = DEFAULT_COLOR if DISABLE_COLORS else "\033[34m"
GREEN = DEFAULT_COLOR if DISABLE_COLORS else "\033[32m"
YELLOW = DEFAULT_COLOR if DISABLE_COLORS else "\033[33m"
WHITE = DEFAULT_COLOR if DISABLE_COLORS else "\033[37m"
PURPLE = DEFAULT_COLOR if DISABLE_COLORS else "\033[35m"

person_type = 0
career = 'None'
previous_choices = {'sword_color':DEFAULT_COLOR, "sword_name":"sword", "gold_flower_regen":"0"}
gold = 0
credits = 0
inventory = InventoryManager()
autosave = False
#Constants
WIZARD = "Wizard"
WARRIOR = "Warrior"
VILLIAN = "Villian"
WARLOCK = "Warlock"
GHOST = "Ghost"

PAUSE = DEFAULT_COLOR * (WPM//12) #Creates an approx. 1-2 second dramatic pause in certain places, can be turned off though by disbaling text animations

#Much of this is AI generated data
#This file only stores the riddles and quiz q/a s for the game
WORDLE_DIFFICULTY = 10
WORDLE_NUM_LETTERS = 5

BLOCKED_LETTERS = {'A': "\n .----------------. \n| .--------------. |\n| |      __      | |\n| |     /  \\     | |\n| |    / /\\ \\    | |\n| |   / ____ \\   | |\n| | _/ /    \\ \\_ | |\n| ||____|  |____|| |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'B': "\n .----------------. \n| .--------------. |\n| |   ______     | |\n| |  |_   _ \\    | |\n| |    | |_) |   | |\n| |    |  __'.   | |\n| |   _| |__) |  | |\n| |  |_______/   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'C': "\n .----------------. \n| .--------------. |\n| |     ______   | |\n| |   .' ___  |  | |\n| |  / .'   \\_|  | |\n| |  | |         | |\n| |  \\ `.___.'\\  | |\n| |   `._____.'  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'D': "\n .----------------. \n| .--------------. |\n| |  ________    | |\n| | |_   ___ `.  | |\n| |   | |   `. \\ | |\n| |   | |    | | | |\n| |  _| |___.' / | |\n| | |________.'  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'E': "\n .----------------. \n| .--------------. |\n| |  _________   | |\n| | |_   ___  |  | |\n| |   | |_  \\_|  | |\n| |   |  _|  _   | |\n| |  _| |___/ |  | |\n| | |_________|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'F': "\n .----------------. \n| .--------------. |\n| |  _________   | |\n| | |_   ___  |  | |\n| |   | |_  \\_|  | |\n| |   |  _|      | |\n| |  _| |_       | |\n| | |_____|      | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'G': "\n .----------------. \n| .--------------. |\n| |    ______    | |\n| |  .' ___  |   | |\n| | / .'   \\_|   | |\n| | | |    ____  | |\n| | \\ `.___]  _| | |\n| |  `._____.'   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'H': "\n .----------------. \n| .--------------. |\n| |  ____  ____  | |\n| | |_   ||   _| | |\n| |   | |__| |   | |\n| |   |  __  |   | |\n| |  _| |  | |_  | |\n| | |____||____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'I': "\n .----------------. \n| .--------------. |\n| |     _____    | |\n| |    |_   _|   | |\n| |      | |     | |\n| |      | |     | |\n| |     _| |_    | |\n| |    |_____|   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'J': "\n .----------------. \n| .--------------. |\n| |     _____    | |\n| |    |_   _|   | |\n| |      | |     | |\n| |   _  | |     | |\n| |  | |_' |     | |\n| |  `.___.'     | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'K': "\n .----------------. \n| .--------------. |\n| |  ___  ____   | |\n| | |_  ||_  _|  | |\n| |   | |_/ /    | |\n| |   |  __'.    | |\n| |  _| |  \\ \\_  | |\n| | |____||____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'L': "\n .----------------. \n| .--------------. |\n| |   _____      | |\n| |  |_   _|     | |\n| |    | |       | |\n| |    | |   _   | |\n| |   _| |__/ |  | |\n| |  |________|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'M': "\n .----------------. \n| .--------------. |\n| | ____    ____ | |\n| ||_   \\  /   _|| |\n| |  |   \\/   |  | |\n| |  | |\\  /| |  | |\n| | _| |_\\/_| |_ | |\n| ||_____||_____|| |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'N': "\n .-----------------.\n| .--------------. |\n| | ____  _____  | |\n| ||_   \\|_   _| | |\n| |  |   \\ | |   | |\n| |  | |\\ \\| |   | |\n| | _| |_\\   |_  | |\n| ||_____|\\____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'O': "\n .----------------. \n| .--------------. |\n| |     ____     | |\n| |   .'    `.   | |\n| |  /  .--.  \\  | |\n| |  | |    | |  | |\n| |  \\  `--'  /  | |\n| |   `.____.'   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'P': "\n .----------------. \n| .--------------. |\n| |   ______     | |\n| |  |_   __ \\   | |\n| |    | |__) |  | |\n| |    |  ___/   | |\n| |   _| |_      | |\n| |  |_____|     | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'Q': "\n .----------------. \n| .--------------. |\n| |    ___       | |\n| |  .'   '.     | |\n| | /  .-.  \\    | |\n| | | |   | |    | |\n| | \\  `-'  \\_   | |\n| |  `.___.\\__|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'R': "\n .----------------. \n| .--------------. |\n| |  _______     | |\n| | |_   __ \\    | |\n| |   | |__) |   | |\n| |   |  __ /    | |\n| |  _| |  \\ \\_  | |\n| | |____| |___| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'S': "\n .----------------. \n| .--------------. |\n| |    _______   | |\n| |   /  ___  |  | |\n| |  |  (__ \\_|  | |\n| |   '.___`-.   | |\n| |  |`\\____) |  | |\n| |  |_______.'  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'T': "\n .----------------. \n| .--------------. |\n| |  _________   | |\n| | |  _   _  |  | |\n| | |_/ | | \\_|  | |\n| |     | |      | |\n| |    _| |_     | |\n| |   |_____|    | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'U': "\n .----------------. \n| .--------------. |\n| | _____  _____ | |\n| ||_   _||_   _|| |\n| |  | |    | |  | |\n| |  | '    ' |  | |\n| |   \\ `--' /   | |\n| |    `.__.'    | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'V': "\n .----------------. \n| .--------------. |\n| | ____   ____  | |\n| ||_  _| |_  _| | |\n| |  \\ \\   / /   | |\n| |   \\ \\ / /    | |\n| |    \\ ' /     | |\n| |     \\_/      | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'W': "\n .----------------. \n| .--------------. |\n| | _____  _____ | |\n| ||_   _||_   _|| |\n| |  | | /\\ | |  | |\n| |  | |/  \\| |  | |\n| |  |   /\\   |  | |\n| |  |__/  \\__|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'X': "\n .----------------. \n| .--------------. |\n| |  ____  ____  | |\n| | |_  _||_  _| | |\n| |   \\ \\  / /   | |\n| |    > `' <    | |\n| |  _/ /'`\\ \\_  | |\n| | |____||____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'Y': "\n .----------------. \n| .--------------. |\n| |  ____  ____  | |\n| | |_  _||_  _| | |\n| |   \\ \\  / /   | |\n| |    \\ \\/ /    | |\n| |    _|  |_    | |\n| |   |______|   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'Z': "\n .----------------. \n| .--------------. |\n| |   ________   | |\n| |  |  __   _|  | |\n| |  |_/  / /    | |\n| |     .'.' _   | |\n| |   _/ /__/ |  | |\n| |  |________|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n"}
WORDLE_FREQ = 100/WORDLE_DIFFICULTY

SLOT_ASSETS = [
f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |      {GREEN}$${DEFAULT_COLOR}      | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |      {RED}!{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {PURPLE} @{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |      {YELLOW}%{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {RED} ^{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {BLUE} &{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
  f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {GREEN} *{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |    {RED}  +{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {YELLOW} ?{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |    {PURPLE}  ~{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {GREEN} ={DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |   {BLUE}  [-]{DEFAULT_COLOR}      | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 r""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |              | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """
]
#7x11x13 = 1001 (slight edge to house 0.1%)
SLOT_1_ROLLS = [SLOT_ASSETS[i] for i in range(0,7)]
SLOT_2_ROLLS = [SLOT_ASSETS[i] for i in range(0,11)]
SLOT_3_ROLLS = [SLOT_ASSETS[i] for i in range(0,13)]
SLOT_WINNING = SLOT_ASSETS[0]
SLOT_REFRESH = f"\033[{len(SLOT_1_ROLLS[0].split('\n'))+1}A" #Move cursor back up to create animation

SLOT_FPS = 30
SLOT_SLEEP = 1/SLOT_FPS
SLOT_ANIMATION_TIME = (1, 6, 0.35) #(time for each slot to be displayed, total slots per slot, transition time)

#Grass in farm
GRASS_DIFFICULTY = 3

#Golden flower in royal garden regen time in seconds
GOLD_FLOWER_REGEN = 60*60*24

#Answers to library questions, stored in this format:
ROYAL_LIBRARY_QUESTIONS = {
    -1: ["QUESTION", "ANSWER"],
    1 : ["Where is Kallisto's body?", "After she was killed by Malcor, her body was taken with him to his lair. You will find her body there."],
}
#Battle against Rahas
BATTLE_SIZE = 11
BATTLE_REFRESH = f"\033[{BATTLE_SIZE + 3}A"

HIDE_CURSOR = "\033[?25l"
SHOW_CURSOR = "\033[?25h"

MOVE_COOLDOWN = 0.25 #In seconds
SHOOT_COOLDOWN = 1.5 #In seconds
BULLET_SPEED = 5
DIFFICULTY_BOSS = 300 #Max is 500
FPS = 30

#All text is replaced with these alternatives, lowercase is checked automatically, but not capitalized
#Important words which the player is shown thorugh char_anamations
IMMERSIVE_TEXT_KEYWORDS = {
    "Royal" : PURPLE + "Royal",
    "Kallisto" : GREEN + "Kallisto",
    "Library" : PURPLE + "Library",
    "Garden" : GREEN + "Garden",
    "Farm" : YELLOW + "Farm",
    "Maze" : GREEN + "Maze",
    "Golden" : YELLOW + "Golden",
    "Rahas" : PURPLE + "Rahas",
    "Caroline" : RED + "Caroline",
    "Wizard" : PURPLE + "Wizard",
    "Warrior" : RED + "Warrior",
    "Ghost" : PURPLE + "Ghost",
    "Gold" : YELLOW + "Gold",
    "Credits" : BLUE + "Credits",
    "Bones" : WHITE + "Bones",
    "Skull" : WHITE + "Skull",
    "Fire" : RED + "Fire",
    "Magical" : PURPLE + "Magical",
    "Purple" : PURPLE + "Purple",
    "Red" : RED + "Red",
    "Green" : GREEN + "Green",
    "Blue" : BLUE + "Blue",
    "Yellow" : YELLOW + "Yellow",
    "White" : WHITE + "White",
    "Good" : BLUE + "Good",
    "Evil" : PURPLE + "Evil",
    "Together": RED + "Together",
    "Time" : GREEN + "Time",
    "Fireball" : RED + "Fireball",
    "Magic" : PURPLE + "Magic",
}
if DISABLE_COLOR_REPLACE:
    IMMERSIVE_TEXT_KEYWORDS = {}

#Taken from https://emojicombos.com/dragon
DRAGON = f"""{BLUE}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣠⣼⠀⠀⠀⠀⠈⠙⡆⢤⠀⠀⠀⠀⠀⣷⣄⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣾⣿⣿⣿⣿⣿⣿⡿⢿⡷⡆⠀⣵⣶⣿⣾⣷⣸⣄⠀⠀⠀⢰⠾⡿⢿⣿⣿⣿⣿⣿⣿⣷⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣽⣿⣿⣿⣿⡟⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⣻⣵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠐⣻⣿⣿⡏⢹⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣟⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⡄⠀⠀⠀⠀⢻⣿⣿⣷⡌⠸⣿⣾⢿⡧⠀⠀⠀⠀⠀⢀⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣠⣾⡿⢛⣵⣾⣿⣿⣿⣿⣿⣯⣾⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⢻⣿⣿⣿⣶⣌⠙⠋⠁⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣷⣽⣿⣿⣿⣿⣿⣷⣮⡙⢿⣿⣆⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣰⡿⢋⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣿⣿⣿⣿⣧⡀⠀⠀⠀⣠⣽⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⢀⣼⣿⣿⣿⣿⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣝⢿⣇⠀⠀⠀⠀
⠀⠀⠀⣴⣯⣴⣿⣿⠿⢿⣿⣿⣿⣿⣿⣿⡿⢫⣾⣿⣿⣿⣿⣿⣿⡦⢀⣼⣿⣿⣿{PURPLE}⣿⣿{BLUE}⣿⣿⣿⣿⣦⡀⢴⣿⣿⣿⣿⣿⣿⣷⣝⢿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⣧⣽⣦⠀⠀⠀
⠀⠀⣼⣿⣿⣿⠟⢁⣴⣿⡿⢿⣿⣿⡿⠛⣰⣿⠟⣻⣿⣿⣿⣿⣿⣿⣿⡿⠿⠋⢿⣿⣿⣿⣿⣿⠻⢿⣿⣿⣿⣿⣿⣿⣿⣟⠻⣿⣆⠙⢿⣿⣿⡿⢿⣿⣦⡈⠻⣿⣿⣿⣧⠀⠀
⠀⡼⣻⣿⡟⢁⣴⡿⠋⠁⢀⣼⣿⠟⠁⣰⣿⠁⢰⣿⣿⣿⡿⣿⣿⣿⠿⠀⣠⣤⣾⣿⣿⣿⣿⣿⠀⠀⠽⣿⣿⣿⢿⣿⣿⣿⡆⠈⢿⣆⠀⠻⣿⣧⡀⠈⠙⢿⣦⡈⠻⣿⣟⢧⠀
⠀⣱⣿⠋⢠⡾⠋⠀⢀⣠⡾⠟⠁⠀⢀⣿⠟⠀⢸⣿⠙⣿⠀⠈⢿⠏⠀⣾⣿⠛⣻⣿⣿⣿⣿⣯⣤⠀⠀⠹⡿⠁⠀⣿⠏⣿⡇⠀⠹⣿⡄⠀⠈⠻⢷⣄⡀⠀⠙⢷⣄⠙⣿⣎⠂
⢠⣿⠏⠀⣏⢀⣠⠴⠛⠉⠀⠀⠀⠀⠈⠁⠀⠀⠀⠛⠀⠈⠀⠀⠀⠀⠈⢿⣿⣼⣿⣿⣿⣿⢿⣿⣿⣶⠀⠀⠀⠀⠀⠁⠀⠛⠀⠀⠀⠀⠁⠀⠀⠀⠀⠉⠛⠦⣄⣀⣹⠀⠹⣿⡄
⣼⡟⠀⣼⣿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠛⠛⠋⠁⠀⢹⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣧⠀⢻⣷
⣿⠃⢰⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣰⣶⣦⣤⠀⠀⣿⡿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡆⠘⣿
⣿⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡟⠁⠈⢻⣷⣸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⣿
⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⣀⣀⣸⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⣿
⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⣿⡿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇
⠈⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢷⣴⡿⣷⠀⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠴⡿⣟⣿⣿⣶⡶⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

{DEFAULT_COLOR}"""
DRAGON_HEAD = r"""
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠄⠀⠀⠀⢠⡾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⠋⠀⠀⠀⢠⡟⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⢶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⢹⡄⠀⠀⠀⢸⢣⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⡿⠀⢻⡻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡜⢿⣇⠀⠀⡏⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⢸⡇⠀⠈⣷⡹⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⡀⠉⠓⢶⡇⢠⣧⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣴⣶⣶⣤⣄⣀⠀⠀⠀⠀⢸⡇⢸⣇⠀⠀⠸⡇⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣷⣄⢸⡇⠈⣿⡟⠳⢦⣄⡀⠀⠀⠀⠀⠉⠻⢯⡉⠙⠶⣄⠉⠳⣤⠀⠀⠸⣇⠀⢻⡀⠀⠀⢱⠀⠸⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⡇⠀⢯⢷⠀⠀⠀⠉⠛⠶⣦⣄⡀⠀⠀⢳⡀⠀⠀⠳⡄⠀⠳⡄⠀⠻⣆⠀⠻⣆⠀⢸⡆⠀⠘⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡇⠀⢸⡌⣧⡀⠒⢦⣀⠀⠀⠀⠙⠻⢦⣀⢷⡀⠀⠀⢹⡄⠀⠹⣦⡠⢿⣿⡷⣮⣻⣾⡇⠀⠀⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠘⣷⠙⣿⣶⣄⡉⠳⣄⡀⠀⠀⠀⠈⠻⢷⣄⠀⠀⣿⠀⠀⠙⣶⣏⣡⣶⠿⠿⠏⢻⣄⠀⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⢿⠀⠀⠸⣆⠘⢷⡙⠿⣦⡈⠳⣦⣀⠀⠀⠀⠀⠙⢧⣀⣿⠆⠀⢸⠟⢻⣿⠻⣆⠀⠀⠀⠙⢧⠀⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠛⠛⠛⢳⣾⡆⠀⠀⠻⡄⠈⠳⣄⠙⢿⣦⡈⠻⣧⡄⠀⠀⠀⠀⠙⢿⡆⠀⠃⠀⠉⣿⣆⢹⡄⠀⠀⠀⠈⣧⣸⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣴⣞⣉⣷⠀⠀⠀⠹⣄⠀⠙⢧⡀⠙⢷⣄⠘⢿⣤⡀⠀⠀⠀⠀⠻⣦⣄⠀⢸⠋⠙⣦⣿⡀⠀⠀⠀⠹⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡛⠛⠛⠻⢿⣧⡀⠀⠀⠙⢧⡀⠈⠻⣦⢤⣹⣦⠀⢻⣿⠀⠀⠀⠀⣀⣹⣏⣴⣇⠀⠀⠈⣿⡇⠀⠀⠀⠀⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠈⢹⣷⠀⠀⠈⢷⠳⡀⠀⠀⠈⠻⣄⠀⠉⢷⣭⡙⣧⠀⣹⣷⣶⢖⣫⣭⣽⣿⣅⠀⠀⣰⠟⠙⡿⣦⣤⣤⣄⣸⣷⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠘⣧⠙⢦⣀⡀⠀⠙⢦⡀⠀⠙⢿⣿⣿⣏⣽⣿⣿⠟⠛⢋⣻⣿⣷⣶⡋⠀⠀⣠⠾⢿⣗⠿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣾⡿⠿⠶⠶⢶⣶⣶⣶⣿⣧⡀⠻⣿⣶⡀⠈⢳⣄⠠⣄⠀⠙⠿⣿⡟⠁⠀⡴⠋⠉⠉⠙⣧⡉⠀⠊⠀⠀⠀⢙⣷⣌⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠿⢦⡀⠀⠀⠀⠀⠀⠀⠈⠉⠙⢿⣿⣦⡀⠻⣿⣶⣤⠹⣦⠈⢷⡀⢠⡟⢿⣄⠀⠀⠀⡴⠒⠂⠉⠻⢦⡀⠀⢀⠞⠉⠙⢿⣿⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠞⠉⠀⠀⠀⢠⡟⠀⣀⣀⣀⣀⣀⣀⣠⡶⠛⠛⣿⣿⣷⡀⠉⠻⣿⣌⣧⠀⣿⡟⠀⠀⠙⢷⣄⣸⠁⠀⠀⠀⠠⠤⢽⣏⠛⠀⠀⣀⣼⣿⣇⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⠿⠿⠛⠻⢿⣿⡿⠋⠀⠀⠈⠉⢿⣿⣿⣄⠀⠹⣿⣿⣿⣿⠁⠀⠀⠀⠀⠙⣿⣦⡀⣸⠀⠀⠀⠀⡬⢷⣤⣴⠁⠀⠻⣿⣷⣄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢠⣾⡿⠟⠉⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⢀⣀⣠⠾⣿⣿⣿⣿⣄⠀⠉⠉⢻⣿⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣷⣄⣰⡄⠀⠀⠀⠹⠀⠀⠀⠛⢿⣿⡆⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣴⣿⠥⢤⡀⠀⠀⠀⠀⣀⣠⡾⠃⠀⠀⠈⠉⠁⠀⠀⠀⠈⠻⣿⣿⣧⣀⣀⣘⣿⡄⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠰⡄⠀⡀⠀⢸⣷⠀⠀⠀⠀
⠀⠀⠀⠀⢀⣼⠟⠁⠀⢀⣇⣀⣴⣶⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡿⠿⢿⣿⡿⠉⠻⣦⡀⠀⠀⠀⠀⠀⠻⣇⠉⠛⢿⣿⣆⠀⠀⠀⠀⣳⣠⡇⣰⣼⣿⠀⠀⠀⠀
⠀⠀⠀⠀⠈⠁⠀⣠⣴⠿⠛⠉⠁⠀⣰⠟⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣶⣶⣾⣿⡟⢿⠃⠀⠀⠙⢿⣦⡀⠀⠀⠀⠀⠙⢷⣤⣤⣿⣿⢿⡶⠤⠶⠛⣿⠛⠛⡿⠃⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣠⡿⠋⠁⠀⠀⠀⠀⣰⠇⠀⠀⠀⠀⠀⢀⡤⠖⠛⣫⣴⣾⣿⠛⠋⠀⠸⣧⣸⠀⠀⠀⠀⠀⠙⢷⡀⠀⠀⠀⠀⠀⠉⠻⣿⣿⠀⢷⡀⠀⠀⢻⡆⠘⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣼⡟⠀⠀⠀⠀⠀⣠⣾⠋⠀⠀⠀⠀⣠⠾⠋⢀⣤⣾⣿⠛⠉⠻⣆⠀⠀⠀⠙⢿⡄⠀⠀⠀⠀⠀⠈⠃⠀⠀⠀⠀⠀⠀⠀⠘⣿⣧⠘⠇⠀⠀⠘⡇⠀⡇⠀⠀⠀⠀⠀
⠀⠀⠀⣴⡏⣠⡀⠀⣠⣴⣾⣿⠇⠀⠀⠀⠀⠞⠋⠀⣴⣿⣿⣿⠁⠀⠀⠀⠙⢧⡀⠀⠀⠈⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣧⡀⠀⠀⠐⢷⡀⣷⠀⠀⠀⠀⠀
⠀⠀⢠⣿⠟⠉⣡⣾⡿⠋⠁⡟⠀⠀⠀⠀⠀⠀⢀⣾⣿⠟⠁⢿⡆⠀⠀⠀⠀⢀⡟⠻⣍⠉⠉⠻⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣬⡇⠀⠀⠀⠈⠳⢻⡆⠀⠀⠀⠀
⠀⠀⠸⠁⢀⣾⡟⠋⠀⠀⣼⠀⠀⠀⠀⠀⠀⣠⣿⣿⠁⠀⠀⠀⠙⣦⡀⠀⠀⢸⡀⠀⢈⡷⢦⣤⣬⡿⢶⣄⡀⠀⠀⢰⣤⡀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠈⢷⠀⠀⠀⠀
⠀⠀⠀⢀⣾⠏⠀⠀⠀⣰⠇⠀⠀⠀⠀⠀⣴⣿⣿⣹⣧⠀⠀⠀⠀⠀⠉⠉⠉⠉⠻⣏⠁⠀⣠⡟⠁⠀⠀⠈⠙⠶⣄⠘⠿⢿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀
⠀⠀⠀⣿⠃⠀⠀⢀⣼⡟⠀⠀⠀⠀⠀⢰⣿⡿⠁⠀⠘⢧⡀⠀⠀⠀⠘⢷⣀⣀⣤⠾⢿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⡀⠉⠳⣦⡀⠀⠀⠀⠀⠀⢴⡏⠉⠙⠶⠄⠘⡗⠶⡄
⠀⠀⢸⣇⡴⢶⣠⣾⣿⡇⠀⠀⠀⠀⢰⣿⣿⠃⠀⠀⠀⠀⠉⠛⢶⠶⠶⠞⢷⠀⠀⣰⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠙⢳⣄⠀⠀⠀⠈⣿⣄⠀⠀⠀⠀⠀⠀⣿
⠀⠀⣼⠟⢀⣾⡿⠋⣸⡇⠀⠀⠀⠀⣼⣿⠹⣇⠀⠀⠀⠀⠀⠀⠈⣆⠀⣀⣨⠟⠋⣽⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⣀⠠⡀⠙⣧⡀⠀⢰⣿⣿⣆⠀⠀⠀⠀⠀⢻
⠀⢀⡏⢀⣾⡟⠀⠀⣿⠃⠀⠀⠀⢸⣿⡿⠶⠛⠷⣤⣀⣀⣀⣀⣠⢿⡟⠉⠁⠀⣼⡿⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠷⣽⡄⠸⣇⠀⠘⠞⢿⣿⠤⠶⠂⡔⢠⠟
⠀⠀⠀⣾⡟⠀⠀⢰⡿⠀⠀⠀⠀⣿⡟⠀⠀⠀⠀⠀⠉⢹⡏⠁⠀⠈⢷⡤⠤⢴⣿⡇⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⠀⠻⣄⡀⠀⠶⠏⠀⠀⠀⡇⣸⠀
⠀⠀⢸⣿⠁⠀⠀⢸⡇⠀⠀⠀⢰⣿⠻⣄⠀⠀⠀⠀⠀⠈⢷⣀⣤⠔⠋⠀⠀⢰⣿⠃⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣷⣄⠈⠛⠲⣤⡀⠀⣀⡼⣿⠏⠀
⠀⠀⣼⡇⠀⠀⠀⢸⡇⠀⠀⠀⣼⣿⠴⠚⠓⢤⣄⣀⣀⣤⠴⣯⡀⠀⠀⠀⠀⣼⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠓⠦⣤⠬⢿⣦⣅⡿⠋⠀⠀
⠀⠀⣿⣴⠞⠛⢳⣼⡇⠀⠀⢠⣿⠏⠀⠀⠀⠀⠈⢹⡍⠀⠀⠈⢳⣤⣤⣴⠞⢻⡏⠀⠸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠉⠀⠀⠀⠀
⠀⢐⡿⠁⠀⠀⣾⣿⡇⠀⠀⣸⣿⡀⠀⠀⠀⠀⠀⠀⠙⣆⣀⡤⠞⠁⠀⠀⠙⢿⡇⠀⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠈⡇⠀⠀⣼⣿⢻⣇⠀⠀⣿⣿⠓⢤⣀⠀⠀⠀⢀⣤⠿⣯⠀⠀⠀⠀⠀⢀⣾⡇⠀⠀⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠁⠀⢸⣿⠃⢘⣿⠀⠀⣿⣿⠶⠋⠉⠛⠛⣿⠉⠁⠀⠙⢷⣤⣀⣠⣴⠊⣻⡇⠀⠀⠸⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣿⡟⠀⠈⣿⠀⢸⣿⡟⠀⠀⠀⠀⠀⠘⠦⣀⢀⣠⠟⠁⠀⠀⠈⠻⣿⡇⠀⠀⠀⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢰⣿⢡⠞⢧⣿⠀⢸⣿⣧⡀⠀⠀⠀⠀⠀⠀⣰⣏⠀⠀⠀⠀⠀⠀⠀⢸⣷⠀⠀⠀⠀⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣿⠇⠀⣸⣿⠀⣾⣿⣍⣳⠦⢤⣀⡤⠴⠞⠁⠸⢧⡀⠀⠀⠀⠀⣠⣾⣿⡀⠀⠀⠀⠘⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡿⠀⢠⣿⣿⠀⣿⡿⠉⠁⠀⠀⠹⣇⠀⠀⠀⠀⠀⣿⠷⠶⠶⠟⠻⣅⣿⡇⠀⠀⠀⠀⠈⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⠃⣿⠀⣿⣇⠀⠀⠀⠀⠀⠈⠳⢤⣀⡴⠞⠁⠀⠀⠀⠀⠀⠀⣿⣇⠀⠀⠀⠀⠀⠘⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⡿⢰⡟⢠⣿⣿⡄⠀⠀⠀⠀⠀⣀⣴⢿⡅⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡀⠀⠀⠀⠀⠀⠈⠻⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⡇⣸⡇⢸⣿⣿⡿⠓⠦⢤⣶⡛⠋⠁⠀⠙⠲⣤⣄⣀⣀⣀⣀⣴⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠙⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⢻⡇⢸⣿⠁⠀⠀⠀⠀⠈⢷⠀⠀⠀⠀⢀⣼⠟⠉⠉⠋⠉⠀⠉⠹⣿⡇⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢁⣿⠇⢸⣿⠀⠀⠀⠀⠀⠀⠈⠳⢤⣤⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣸⡏⠀⣸⣿⡀⠀⠀⠀⠀⠀⠀⣠⣼⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟⢹⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⣶⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⠃⠀⣿⣿⣷⣶⣶⣶⣶⣶⡿⠋⠀⠉⠈⠙⢦⣄⣀⣀⣀⣠⣤⠶⠚⠓⠛⠛⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠷⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢰⡟⠀⢰⣿⣿⠿⢛⡏⠉⢻⡇⠀⠀⠀⠀⠀⠀⢀⡽⠋⠉⠉⠉⠀⠀⠀⠀⠀⠀⠘⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠷⣤⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⣿⠃⠀⣸⣿⠉⠓⠊⠀⠀⠀⢳⡄⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⡄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⣼⡿⠀⢠⣿⣿⠀⠀⠀⠀⠀⠀⠀⠙⢦⣀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠟⠈⠻⣿⣷⣄⡀⠀⠀⠀⠀⠀⣀⣠⣤⠶⠶⠶⠛⠛⠛⠲⠿⠀⠀⠀⠀⠀⠀
⠀⢀⣴⣿⡇⠀⠀⣸⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⣠⡿⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣰⠿⠦⠤⠴⠾⠋⠁⠉⠙⠛⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠟⠁⣿⣀⣀⣾⡿⠿⠛⠿⢷⣶⣤⣠⣤⠴⠞⠋⠀⠀⠙⢦⣄⣀⠀⠀⠀⠀⠀⣀⣠⠶⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠉⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⢉⡟⠛⠛⠛⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣆⠀⠀⠀⠀⠀⢀⡴⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⢦⣥⠤⠞⠋⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
"""
DRAGON_CLOSEUP = r"""
⠈⢿⣿⣿⣧⡁⣻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡿⠇⠀⠀
⠀⠘⣿⣏⣿⣧⢻⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠈⠓⠦⣤⣤⠤⠶⢶⣒⣒⣒⡲⠶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⡎⠀
⠀⠀⠸⡿⡊⣾⣧⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠙⠲⣤⣤⣤⣴⡶⠿⠟⠛⠛⣛⠿⢿⣿⣶⣽⣿⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣤⠀⢸⠃⠀
⠀⠀⠀⢹⣤⠰⣿⣆⠀⠀⠈⢯⣵⣶⢤⣄⠀⠀⠀⠐⢆⡀⠀⠀⠀⠀⢀⣀⣀⣀⣽⣭⣛⣿⣿⣿⣿⣿⣿⣿⢷⣄⡀⠀⠀⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠛⠋⢠⡏⠀⠀
⠀⠀⠀⠀⢫⢁⢸⡿⣆⠀⠪⣿⢿⣻⠉⠉⠀⠀⠀⠀⠠⢬⣉⣉⡉⢉⣤⡴⣿⡡⢷⠋⡟⡟⣟⣿⡿⠇⠉⠉⠀⠉⠈⠙⣫⡹⠛⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣷⠀⡼⠀⠀⠀
⠀⠀⠀⠀⠀⢧⢀⢾⠿⣄⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢉⣿⡿⡞⣱⠵⠟⠋⡉⢉⠹⣟⣄⣳⣂⣉⣩⣍⣕⣛⣛⡿⣭⡷⠃⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⠇⣸⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⢆⢂⣶⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⢛⡸⠋⡁⣤⣤⣴⣿⣾⡿⠛⢿⠿⠟⠛⠉⠉⠉⠉⠉⠛⠛⠃⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⠏⢠⠇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠘⣎⣟⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟⡧⠊⢄⣤⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⢏⣞⡟⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠘⣽⡻⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⢁⣰⣿⢿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⡟⢁⡞⢸⡁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠸⣷⡹⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢸⡇⢸⡟⢁⢾⣿⣿⣿⣿⣿⣿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⢿⢻⣿⢟⡥⠚⣉⠀⠀⠳⣄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⡇⠱⢌⠻⣿⣿⣦⡀⠀⠀⠀⠀⠀⢸⡇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⢾⡏⣉⠷⠊⣡⠽⠚⠉⠀⠉⠙⠲⢌⡳⣄⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡾⣠⠖⠀⠲⣝⢿⣉⡿⢶⣄⠀⠀⠀⠘⡇⢸⢿⡋⠸⡿⣿⣿⣿⣿⣿⣯⣽⣄⡀⠀⠀⢀⣀⣠⣴⡾⠻⣅⠴⠋⣁⠴⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠉⠲⢝⡦
⠀⠀⠀⠀⠀⠀⠀⡼⡴⠁⠀⠀⠀⠀⠑⢝⢷⣯⢿⣷⣤⣀⢀⡇⠀⠉⠀⠀⢧⠞⢹⣿⡿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⠷⢚⣡⠴⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙
⠀⠀⠀⠀⠀⢀⣼⡞⠀⠀⠀⠀⠀⠀⠀⠀⠑⢽⣾⣿⣿⣿⣿⡇⠀⠀⠀⠀⠈⣄⡞⠙⣀⣼⠛⣿⣿⣿⣿⣿⣿⡿⠛⣡⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⣾⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣿⣿⣿⠀⠀⠀⠀⠀⠀⠈⢆⣸⠁⢳⣰⣿⠓⠴⣭⣿⣯⣦⡞⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠
⠀⠀⠀⢀⣾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⣻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠙⢄⣿⠧⢤⣉⣉⣽⣇⢺⣿⣿⣿⣿⣿⣷⣦⣤⣄⣀⣀⣀⣀⣤⣤⣤⣤⣶⣶⣿⣿⠿⠘⢛
⠀⠀⢠⡾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣏⣩⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠤⠀⠠⠴⢺⣿⣿⣿⣧⡽⠚⠛⠛⠛⠛⠛⠛⠻⠿⠿⠿⠛⠚⠛⣉⣉⠤⠴⠒⠊⠉
⣟⣳⠟⢳⡶⣶⡤⣤⣤⠤⡤⢤⡤⣤⠤⣶⣶⣿⣿⣍⣽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⢷⡤⠶⠒⣉⣷⣿⣿⣿⣿⠏⠉⠉⠉⠉⠁⠒⠲⠦⣀⠀⠀⡴⠋⠉⠀⠀⠀⠀⠀⠀
⠈⠉⠉⠉⠑⠚⠓⠻⠭⢍⣉⡉⠉⠉⢉⡩⠷⠚⢿⣭⡽⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠆⠹⣒⣉⡡⡞⢯⣿⣿⡟⢧⡀⠀⠀⠀⠀⠀⠀⠀⠈⣦⢸⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⢰⠋⠀⠀⠀⠘⢷⣶⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⡼⢞⣚⣩⢷⣻⣷⠈⢳⡀⠀⠀⠀⠀⠀⠀⠀⠘⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡟⠀⠀⠀⠀⠀⣸⣿⣯⢷⡄⠸⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣨⣟⡩⢭⣓⢾⡧⣿⡇⠀⢻⣦⣤⣀⠀⠀⠀⠀⠀⣧⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⣠⠔⠋⠀⢿⢒⡳⣿⣆⠘⠢⡀⠀⠀⠀⠀⠀⠀⣠⣾⠿⢷⡪⣵⣮⡽⣟⣿⡇⠀⠀⢻⣿⣿⡟⠲⢤⡀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡴⠛⠁⠀⠀⠀⣼⢩⡯⢹⣿⡷⣄⠙⠆⠀⠀⢀⣠⣶⡿⣛⠯⣳⢭⢷⢻⣵⣿⠿⠃⠀⠀⠀⢿⢿⣷⣄⠀⠈⠓⠾⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠼⠏⠀⠀⠀⠀⠀⣸⠯⣟⣁⢲⡿⣿⠄⠙⠦⣀⣾⣿⣿⣿⣽⣮⣷⣿⣿⠾⠟⠋⠁⠀⠀⠀⠀⠀⠈⢯⢿⣝⡂⠀⠀⠀⠽⠛⠶⣄⣀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠊⠁⠀⠀⠀⠀⠀⠀⢠⣟⣽⣗⣂⣞⣼⠇⠀⠀⢀⣾⣿⣿⣿⣿⡿⠛⠋⠭⣀⠀⢠⠆⠀⠀⠀⠀⠀⠀⠀⠘⣿⢿⡛⠒⠀⠀⠀⠀⠀⠀⠉⠓⠦⣄⡀
⠀⠀⠀⠀⠀⠀⣠⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⣿⡒⣾⣿⠃⢀⣤⣤⣿⣿⣿⣿⣿⠃⠉⠙⠒⢤⡈⠙⢣⡀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣯⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉
⠀⠀⠀⢀⡴⠋⡴⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⢼⣿⠇⠀⢸⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠈⠳⣄⠘⢦⡀⠀⠀⠀⠀⢀⡴⠟⠛⢿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡠⠞⡁⢀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣯⣿⡏⠀⣶⣿⠻⠸⣇⣿⢿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠈⢳⡄⢑⣄⠀⠀⣰⡟⠋⠉⠓⠦⣽⣿⣯⠃⠀⠀⠀⠀⠀⠀⠀⠀
⠂⠀⠀⣀⡇⢰⢙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⠁⠀⠙⠿⠆⠀⠈⠁⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣏⣈⣦⢰⣿⠖⠀⠐⠲⠤⣽⣿⣿⣤⣄⠀⠀⠀⠀⠀⠀⠈
⠀⠀⠀⠹⢀⢺⠀⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣷⣿⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⣿⣧⡀⠀⢸⡴⠒⠒⠲⢶⣿⣿⣿⣿⠉⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⠀⠹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡿⠉⢻⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣾⣿⣿⣿⣿⣷⡀⠀⢷⠒⢒⣲⣾⣻⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠘⠀⠀⢃⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⡿⠛⠀⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠾⣭⣉⠉⢻⢿⣿⣿⣷⡀⠸⣯⡥⢔⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠊⢇⠀⢺⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣵⡴⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣟⣆⠀⠀⢹⡙⠦⣼⣿⡿⣇⠀⠈⠙⠛⠉⠀⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀
⣠⣤⣶⣾⣿⣷⣾⣦⣦⣤⣀⡀⠀⠀⠀⠀⠉⠛⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠃⠉⠉⡏⠃⣾⡿⢋⣴⣻⡆⠀⠀⠀⠀⢪⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀
⡿⠿⠛⠛⠛⢿⠿⣽⣍⡟⣿⣿⣶⣎⣀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⠓⠒⠲⡽⢾⣿⣿⣿⣿⠟⣧⠀⠀⠀⠀⣺⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠸⡀⢹⡉⠻⢿⣼⡿⣿⣿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣶⠒⠒⣗⣿⣿⣿⣿⡏⠀⢸⠀⠀⡀⠀⠘⠿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠁⠀⠁⠀⠀⠙⢷⣿⢹⣿⣿⣿⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⢟⣿⣿⡿⠀⠀⢸⣧⡀⣧⠀⣠⣴⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡷⢿⢿⣿⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⣠⣾⣿⣿⡇⠀⠀⢸⣟⣮⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢻⣾⡛⣏⣻⢿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⡿⠃⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣯⣹⣤⡟⢻⣿⣷⣴⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠿⠿⠏⠃⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣧⡿⢾⣉⠟⠿⣿⣿⣶⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣰⣿⡿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀"""
CAROLINE_WILDABEAST = """
⠀⠀⠀⠀⢶⡆⠀⠀⣴⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢠⣾⣿⣦⣤⣭⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣰⠏⠀⢹⣻⣭⣭⡧⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⠏⠀⠴⠚⣷⣿⣿⠀⠀⢀⡤⠖⠛⠹⠶⠤⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡏⠀⠀⠀⡼⠉⠉⠁⢀⡴⠋⠀⠀⠤⢄⡀⠀⠀⠈⢢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡇⠀⠀⠀⢧⡀⠀⢠⠎⠀⢠⣤⡞⠒⠲⡌⠃⠀⠀⠀⠱⢤⡀⠀⢀⣀⣀⣀⠀⠀
⠀⣧⠀⠀⠀⠀⠙⠲⠏⠀⢀⡀⠙⣇⠀⠀⢘⡶⠆⣤⠤⠔⢲⣯⡖⠉⠀⠀⠈⢧⠀
⠀⢺⣦⡀⠀⠂⠀⠀⠀⠀⠀⢠⣄⠼⣗⠒⠋⠀⠀⠹⣄⣠⣿⡋⡀⢠⣤⡆⠀⢸⠀
⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠈⠦⣠⠴⣄⢀⣠⣄⣸⠇⠀⣳⣿⣧⠈⢹⠁
⠀⠀⠀⠘⠶⡆⠀⠆⢶⣴⠀⢾⠀⠀⠀⠀⠀⠀⠈⠉⡼⡭⣭⡴⠖⠼⠛⣿⣿⠏⠀
⠀⠀⠀⠀⠀⢻⠀⠀⠀⠁⠀⠘⡄⠀⣠⢤⣀⡤⡄⢸⣿⣿⠋⠀⠀⠀⠀⠙⠁⠀⠀
⠀⠀⠀⠀⠀⣏⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠘⠛⢱⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣸⠁⠀⠀⠸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⠃⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠹⡆⠀⠀⠀⣷⣄⢠⡀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⠃⠀⡄⠀⠀⠺⠾⠃⠀⠀⠀⠀⠾⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣀⣀⡴⠋⠀⠛⠁⠀⠀⠀⠀⠀⠀⢀⡄⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠃⠀⢀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢸⠁⠀⠀⠀⠀⣤⡄⠀⠀⠀⡴⠛⠲⡄⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⡇⠀⠀⠀⣀⠀⠘⠀⠀⣠⠞⠁⠀⠀⢣⠀⠀⠀⠀⠠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠘⠒⠒⠶⠁⠉⠉⠉⠉⠁⠀⠀⠀⠀⡞⠀⠀⠰⠇⠐⠛⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣼⠁⠀⠀⠀⠀⠀⠀⠈⢳⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠷⠤⠤⠤⠤⠿⠉⠁⠀⠀⠀⠀⠀⠀⠀
"""

#Syntax
#Each tuple is a section of the maze. It contains:
# (ID,FORWARD_DESC,FORWARD_LINKING_IDS, BACKWARD_DESC, BACKWARD_LINKING_IDS) #None defualts to same as the other
# ID: The ID of the section -> ID = 0 is the end of the maze
# DESC: Description of current section
# LINKING_IDS: {ID : M + DESCRIPTION}, here each id is where you can go from the current section | M = 'f' or 'b' which indicates forward or backward
# Check out the assets/maze.png file for a visual representation of the maze described here

MAZE = [
    (1, "You walk down the path. You follow a U-turn." , {4: "fLeft", 5: "fRight"}, "You walk and after a U-turn, you hit a dead-end. You walk back.", None),
    (4, "You walk down the path. It is a dead end. You walk back down the path.", {1: "bRight", 5: "fStraight"}, None, None),
    (5, "You walk down the path. It is covered with leaves", {6: "fLeft", 7: "fRight"}, None, {4: "fStraight", 1: "bLeft"}),
    (6, "You walk for a moment.", {8:"fRight", 9: "fStraight"}, None, None),
    (7, "You walk down the path. You can see daylight. You run towards it. The hedge covers it. Its a dead end. You walk back.", {5:"bLeft", 6: "fStraight"}, None, None),    
    (8, "You walk down the path. It is a dead end again. You walk back.", {2: "fLeft", 9: "fRight"}, None, None),
    (2, "You walk for half a moment.", {5: "bRight", 7: "fStraight"}, None, None),
    (9, "You walk down a long twisting path.", {10: "fRight", 11: "fLeft"}, None, {8: "fLeft", 2: "fStraight"}),
    (10, "You walk down the path. Its sadly a dead end. You walk back.", {9: "bLeft", 11: "fStraight"}, None, None),
    (11, "You walk down a extrememly long path.", {12: "fLeft", 14: "fRight"}, None, {10: "fStraight", 9: "bRight"}),
    (12, "You walk down a short path. It is a dead end", {11:"bRight", 14:"fStraight"}, None, None),
    (14, "You walk down a path. It short and you feel near the end", {13: "fRight", 0: "fLeft"}, None, {11: "bLeft", 12: "fStraight"}),
    (13, "You walk down a grass path. You reach a dead end", {14: "bLeft", 0: "fStraight"}, None, None)
]   

RIDDLES = [
    ("What has keys but can’t open locks?", {"piano", "keyboard"}),
    ("What has to be broken before you can use it?", {"egg"}),
    ("I’m tall when I’m young, and I’m short when I’m old. What am I?", {"candle"}),
    ("What is full of holes but still holds water?", {"sponge"}),
    ("What gets wet while drying?", {"towel"}),
    ("What can you catch, but not throw?", {"cold"}),
    ("What goes up but never comes down?", {"age"}),
    ("I speak without a mouth and hear without ears. I have no body, but I come alive with wind. What am I?", {"echo"}),
    ("What has a head, a tail, is brown, and has no legs?", {"penny"}),
    ("What runs all around a backyard, yet never moves?", {"fence"}),
    ("What has keys but can’t open locks?", {"piano", "keyboard", "instrument"}),
    ("I speak without a mouth and hear without ears. I have no body, but I come alive with the wind. What am I?", {"echo", "sound", "voice"}),
    ("The more you take, the more you leave behind. What am I?", {"footsteps", "tracks", "marks"}),
    ("What has hands but can’t clap?", {"clock", "watch", "time"}),
    ("I’m tall when I’m young, and I’m short when I’m old. What am I?", {"candle", "light", "wax"}),
    ("What can travel around the world while staying in a corner?", {"stamp", "postage", "corner"}),
    ("What has to be broken before you can use it?", {"egg", "shell", "break"}),
    ("I’m not alive, but I grow; I don’t have lungs, but I need air; I don’t have a mouth, but water kills me. What am I?", {"fire", "flame", "heat"}),
    ("What gets wetter as it dries?", {"towel", "cloth", "dry"}),
    ("What has a head, a tail, is brown, and has no legs?", {"penny", "coin", "money"}),
    ("What has many teeth but can’t bite?", {"comb", "toothbrush", "hair"}),
    ("What is full of holes but still holds water?", {"sponge", "cloth", "cleaning"}),
    ("I’m not alive, but I can grow; I don’t have lungs, but I need air; I don’t have a mouth, but water kills me. What am I?", {"fire", "flame", "burn"}),
    ("What comes once in a minute, twice in a moment, but never in a thousand years?", {"letter M", "alphabet", "time"}),
    ("What has a neck but no head?", {"bottle", "jar", "container"}),
    ("What can you catch but not throw?", {"cold", "illness", "sickness"}),
    ("What has one eye but can’t see?", {"needle", "storm", "hole"}),
    ("What has a bed but doesn’t sleep, and a mouth but doesn’t eat?", {"river", "stream", "water"}),
    ("What has cities, but no houses; forests, but no trees; and rivers, but no water?", {"map", "atlas", "diagram"}),
    ("What has a thumb and four fingers but is not alive?", {"glove", "handwear", "clothing"}),
    ("What can be cracked, made, told, and played?", {"joke", "story", "game"}),
    ("What is so fragile that saying its name breaks it?", {"silence", "quiet", "sound"}),
    ("I have keys but open no locks. I have space but no room. You can enter but not go outside. What am I?", {"keyboard", "computer", "typewriter"}),
    ("What has a face and two hands but no arms or legs?", {"clock", "watch", "timepiece"}),
    ("What has an eye but cannot see, and is commonly found on a farm?", {"needle", "corn", "eye"}),
    ("What has a beginning but no end, and can be seen every day but never touched?", {"sunrise", "time", "day"}),
    ("I am not alive, but I can grow; I don’t have lungs, but I need air; I don’t have a mouth, but I need water. What am I?", {"fire", "flame", "heat"}),
    ("What gets bigger the more you take away from it?", {"hole", "gap", "space"}),
    ("What has a bottom at the top?", {"leg", "bed", "furniture"}),
    ("What can fill a room but takes up no space?", {"light", "air", "sound"}),
    ("What can be broken but never held?", {"promise", "trust", "agreement"}),
    ("What has a heart that doesn’t beat?", {"artichoke", "vegetable", "plant"}),
    ("What is always in front of you but can’t be seen?", {"future", "air", "time"}),
    ("What has a face and two hands but no body?", {"clock", "watch", "timepiece"}),
    ("What is full of keys but can’t open any doors?", {"piano", "keyboard", "instrument"}),
    ("What can travel around the world while staying in a corner?", {"stamp", "postage", "letter"}),
    ("What has a bottom at the top?", {"leg", "bed", "furniture"}),
    ("What is always in front of you but can’t be seen?", {"future", "air", "time"}),
    ("What gets wetter as it dries?", {"towel", "cloth", "dry"}),
    ("What can be cracked, made, told, and played?", {"joke", "story", "game"}),
    ("What has to be broken before you can use it?", {"egg", "shell", "break"}),
    ("What is so fragile that saying its name breaks it?", {"silence", "quiet", "sound"}),
    ("What has many teeth but can’t bite?", {"comb", "toothbrush", "hair"}),
    ("What has an eye but cannot see, and is commonly found on a farm?", {"needle", "corn", "eye"}),
    ("What has a bed but doesn’t sleep, and a mouth but doesn’t eat?", {"river", "stream", "water"}),
    ("What can you catch but not throw?", {"cold", "illness", "sickness"}),
    ("What is always in front of you but can’t be seen?", {"future", "air", "time"}),
    ("What can be cracked, made, told, and played?", {"joke", "story", "game"}),
    ("What has a thumb and four fingers but is not alive?", {"glove", "handwear", "clothing"}),
    ("What has a bed but doesn’t sleep, and a mouth but doesn’t eat?", {"river", "stream", "water"})
]

MYTHOLOGY_QUESTIONS = [
    ("Who is the king of the Greek gods?", ["Zeus", "Hades", "Poseidon", "Apollo"]),
    ("What is Thor’s hammer called in Norse mythology?", ["Mjolnir", "Gungnir", "Gram", "Skofnung"]),
    ("Who is the Roman god of war?", ["Mars", "Jupiter", "Neptune", "Mercury"]),
    ("In Egyptian mythology, who is the god of the underworld?", ["Osiris", "Ra", "Horus", "Anubis"]),
    ("Who was the Greek goddess of wisdom?", ["Athena", "Hera", "Aphrodite", "Demeter"]),
    ("What creature has the body of a lion and the head of a human in Egyptian mythology?", ["Sphinx", "Minotaur", "Chimera", "Griffin"]),
    ("In Greek mythology, who flew too close to the sun?", ["Icarus", "Daedalus", "Perseus", "Orpheus"]),
    ("Which Norse god is known as the trickster?", ["Loki", "Odin", "Thor", "Frey"]),
    ("Who is the Greek god of the sea?", ["Poseidon", "Zeus", "Hades", "Hermes"]),
    ("What is the Roman name for the Greek god Hermes?", ["Mercury", "Apollo", "Juno", "Vulcan"]),
    ("Who is the Norse god of thunder?", ["Thor", "Loki", "Odin", "Baldur"]),
    ("In Greek mythology, who was condemned to hold up the sky for eternity?", ["Atlas", "Prometheus", "Hermes", "Zeus"]),
    ("Who is the goddess of love and beauty in Roman mythology?", ["Venus", "Diana", "Minerva", "Juno"]),
    ("What is the name of the Greek goddess of the hunt?", ["Artemis", "Athena", "Hera", "Aphrodite"]),
    ("In Norse mythology, what is the name of the world tree?", ["Yggdrasil", "Asgard", "Midgard", "Jotunheim"]),
    ("Who is the Greek god of wine?", ["Dionysus", "Apollo", "Hermes", "Ares"]),
    ("What is the name of the Egyptian sun god?", ["Ra", "Osiris", "Anubis", "Horus"]),
    ("In Greek mythology, who is the god of the underworld?", ["Hades", "Zeus", "Poseidon", "Ares"]),
    ("Who is the king of the Norse gods?", ["Odin", "Thor", "Loki", "Tyr"]),
    ("In Roman mythology, who is the queen of the gods?", ["Juno", "Venus", "Minerva", "Ceres"]),
    ("Who is the goddess of the hearth in Greek mythology?", ["Hestia", "Hera", "Demeter", "Athena"]),
    ("What creature is half-man and half-horse in Greek mythology?", ["Centaur", "Minotaur", "Satyr", "Griffin"]),
    ("In Greek mythology, who is the messenger of the gods?", ["Hermes", "Apollo", "Athena", "Ares"]),
    ("What is the name of Thor’s father in Norse mythology?", ["Odin", "Loki", "Baldur", "Heimdall"]),
    ("Who is the goddess of the harvest in Greek mythology?", ["Demeter", "Hestia", "Artemis", "Hera"]),
    ("In Roman mythology, who is the god of the sea?", ["Neptune", "Mars", "Jupiter", "Vulcan"]),
    ("Who was the first woman created by the gods in Greek mythology?", ["Pandora", "Eurydice", "Helen", "Medusa"]),
    ("What is the name of the fire-breathing creature with the head of a lion, body of a goat, and tail of a serpent?", ["Chimera", "Cerberus", "Hydra", "Minotaur"]),
    ("Who is the Norse goddess of love and fertility?", ["Freyja", "Frigg", "Skadi", "Hel"]),
    ("In Greek mythology, who is known as the god of war?", ["Ares", "Apollo", "Zeus", "Hermes"]),
    ("What is the name of the three-headed dog that guards the underworld in Greek mythology?", ["Cerberus", "Hydra", "Chimera", "Sphinx"]),
    ("In Egyptian mythology, who is the goddess of magic?", ["Isis", "Bastet", "Nut", "Nephthys"]),
    ("Who is the Greek god of music, poetry, and the sun?", ["Apollo", "Hermes", "Dionysus", "Ares"]),
    ("What creature in Greek mythology turns people to stone with its gaze?", ["Medusa", "Siren", "Harpy", "Gorgon"]),
    ("In Norse mythology, what is the name of the hall where warriors go after death?", ["Valhalla", "Asgard", "Midgard", "Helheim"]),
    ("Who is the goddess of the moon in Greek mythology?", ["Selene", "Hecate", "Nyx", "Artemis"]),
    ("In Roman mythology, who is the god of the forge?", ["Vulcan", "Mars", "Neptune", "Apollo"]),
    ("Who is the Greek goddess of the harvest and agriculture?", ["Demeter", "Hera", "Athena", "Artemis"]),
    ("What is the name of the river that souls must cross to enter the underworld in Greek mythology?", ["Styx", "Lethe", "Acheron", "Phlegethon"]),
    ("Who is the Egyptian goddess of the sky?", ["Nut", "Isis", "Ma'at", "Hathor"]),
    ("In Greek mythology, who was cursed to turn everything he touched into gold?", ["King Midas", "Sisyphus", "Orpheus", "Perseus"]),
    ("Who is the Roman goddess of the hunt?", ["Diana", "Minerva", "Vesta", "Venus"]),
    ("In Norse mythology, who is the wife of Odin?", ["Frigg", "Freyja", "Hel", "Skadi"]),
    ("Who is the Greek god of the underworld?", ["Hades", "Zeus", "Poseidon", "Apollo"]),
    ("What is the name of the winged horse in Greek mythology?", ["Pegasus", "Chimera", "Hydra", "Griffin"]),
    ("In Egyptian mythology, who is the god of the sun?", ["Ra", "Osiris", "Horus", "Anubis"]),
    ("Who is the Norse god of wisdom, poetry, and magic?", ["Odin", "Thor", "Loki", "Baldur"]),
    ("In Greek mythology, who is the god of sleep?", ["Hypnos", "Morpheus", "Thanatos", "Erebus"]),
    ("What is the name of the goddess of discord in Greek mythology?", ["Eris", "Nemesis", "Ate", "Hecate"]),
    ("In Roman mythology, who is the god of wine?", ["Bacchus", "Jupiter", "Mars", "Apollo"]),
    ("Who is the Greek god of love?", ["Eros", "Hermes", "Apollo", "Ares"]),
    ("What creature in Greek mythology is known for its beautiful singing that lures sailors to their doom?", ["Siren", "Harpy", "Gorgon", "Nymph"]),
    ("Who is the Roman goddess of love?", ["Venus", "Juno", "Diana", "Minerva"]),
    ("In Norse mythology, who is the god of light and purity?", ["Baldur", "Thor", "Loki", "Odin"]),
    ("Who is the Greek god of the sun?", ["Helios", "Apollo", "Hermes", "Ares"]),
    ("What is the name of the giant serpent in Norse mythology that encircles the world?", ["Jörmungandr", "Fafnir", "Nidhogg", "Fenrir"]),
    ("In Egyptian mythology, who is the goddess of the home and fertility?", ["Hathor", "Bastet", "Isis", "Nephthys"]),
    ("Who is the king of the Titans in Greek mythology?", ["Cronus", "Atlas", "Prometheus", "Hyperion"]),
    ("What creature in Greek mythology is part woman and part bird?", ["Harpy", "Siren", "Gorgon", "Sphinx"]),
    ("Who is the Roman god of the underworld?", ["Pluto", "Mars", "Neptune", "Vulcan"]),
    ("In Norse mythology, what is the name of the wolf destined to kill Odin?", ["Fenrir", "Garm", "Skoll", "Hati"]),
    ("Who is the Greek goddess of victory?", ["Nike", "Athena", "Hera", "Artemis"]),
    ("In Roman mythology, who is the god of beginnings and endings?", ["Janus", "Jupiter", "Mars", "Vulcan"]),
    ("Who is the Greek goddess of the hearth and home?", ["Hestia", "Hera", "Demeter", "Artemis"]),
    ("What is the name of the nine-headed serpent in Greek mythology?", ["Hydra", "Cerberus", "Chimera", "Sphinx"]),
    ("In Egyptian mythology, who is the god of chaos and storms?", ["Set", "Anubis", "Ra", "Thoth"]),
    ("Who is the Norse god of fertility and prosperity?", ["Frey", "Tyr", "Baldur", "Odin"]),
    ("Who is the Greek god of healing and medicine?", ["Asclepius", "Apollo", "Hermes", "Dionysus"]),
    ("What is the name of the messenger of the gods in Roman mythology?", ["Mercury", "Apollo", "Mars", "Neptune"]),
    ("In Greek mythology, who is the goddess of the night?", ["Nyx", "Selene", "Hecate", "Eris"]),
    ("Who is the Roman god of fire and blacksmiths?", ["Vulcan", "Mars", "Neptune", "Mercury"]),
    ("In Norse mythology, who is the ruler of the underworld?", ["Hel", "Loki", "Fenrir", "Odin"]),
    ("Who is the Greek goddess of magic?", ["Hecate", "Eris", "Nyx", "Selene"]),
    ("What creature in Greek mythology is a woman with snakes for hair?", ["Medusa", "Siren", "Harpy", "Sphinx"]),
    ("In Roman mythology, who is the god of agriculture?", ["Saturn", "Mars", "Vulcan", "Mercury"]),
    ("Who is the Egyptian goddess of motherhood and fertility?", ["Isis", "Hathor", "Bastet", "Nut"]),
    ("In Norse mythology, who is the god of war and justice?", ["Tyr", "Thor", "Odin", "Loki"]),
    ("Who is the Greek goddess of the moon and hunting?", ["Artemis", "Hera", "Athena", "Demeter"]),
    ("What is the name of the primordial void in Greek mythology?", ["Chaos", "Gaia", "Tartarus", "Erebus"]),
    ("In Roman mythology, who is the goddess of wisdom and war?", ["Minerva", "Juno", "Diana", "Venus"]),
    ("Who is the Greek god of the sky?", ["Zeus", "Poseidon", "Hades", "Apollo"]),
    ("What is the name of the horse that has wings in Greek mythology?", ["Pegasus", "Chimera", "Cerberus", "Hydra"]),
    ("In Egyptian mythology, who is the god of wisdom and writing?", ["Thoth", "Anubis", "Ra", "Horus"]),
    ("Who is the Norse god of mischief?", ["Loki", "Thor", "Odin", "Tyr"]),
    ("Who is the Greek goddess of the earth?", ["Gaia", "Hera", "Demeter", "Artemis"]),
    ("In Roman mythology, who is the god of the underworld?", ["Pluto", "Mars", "Neptune", "Vulcan"]),
    ("Who is the Norse goddess of love, beauty, and fertility?", ["Freyja", "Frigg", "Hel", "Skadi"]),
    ("In Greek mythology, who is the god of fire and blacksmiths?", ["Hephaestus", "Apollo", "Ares", "Hermes"]),
    ("What is the name of the river that separates the world of the living from the world of the dead in Greek mythology?", ["Styx", "Lethe", "Acheron", "Phlegethon"]),
    ("Who is the Roman goddess of the hearth?", ["Vesta", "Minerva", "Venus", "Juno"]),
    ("In Norse mythology, who is the god of the sea?", ["Njord", "Thor", "Odin", "Loki"]),
    ("Who is the Greek goddess of the rainbow?", ["Iris", "Hera", "Artemis", "Demeter"]),
    ("What is the name of the ferryman who carries souls across the river Styx in Greek mythology?", ["Charon", "Cerberus", "Hades", "Hermes"]),
    ("In Egyptian mythology, who is the goddess of cats?", ["Bastet", "Hathor", "Isis", "Nut"]),
    ("Who is the Greek god of dreams?", ["Morpheus", "Hypnos", "Thanatos", "Phobos"]),
    ("In Norse mythology, what is the name of the realm of fire?", ["Muspelheim", "Asgard", "Midgard", "Helheim"]),
]

LOGIC_PUZZLES = [
    ("Which number should come next in the pattern: 2, 4, 8, 16, ...?", ["32", "20", "24", "30"]),
    ("If you rearrange the letters 'CIFAIPC', you would have the name of a(n):", ["Ocean", "City", "Animal", "Country"]),
    ("What is the missing number in the sequence: 1, 3, 6, 10, 15, ...?", ["21", "18", "20", "22"]),
    ("Which word does not belong in the following list: Apple, Banana, Cherry, Carrot?", ["Carrot", "Banana", "Apple", "Cherry"]),
    ("If some cats are lions and some lions are tigers, are some cats definitely tigers?", ["No", "Yes", "Cannot be determined", "Sometimes"]),
    ("John is standing behind Mary, and Mary is standing behind John. How is this possible?", ["They are standing back-to-back", "John is taller", "Mary is shorter", "They are in a line"]),
    ("If it takes 5 machines 5 minutes to make 5 widgets, how long would it take 100 machines to make 100 widgets?", ["5 minutes", "100 minutes", "50 minutes", "10 minutes"]),
    ("How many sides does a cube have?", ["6", "8", "4", "12"]),
    ("Which one of the following is the odd one out: 2, 3, 5, 7, 9?", ["9", "3", "5", "7"]),
    ("A clock shows the time as 3:15. What is the angle between the hour and minute hand?", ["7.5 degrees", "0 degrees", "15 degrees", "90 degrees"]),
    ("A bat and a ball cost $1.10 in total. The bat costs $1 more than the ball. How much does the ball cost?", ["5 cents", "10 cents", "15 cents", "1 cent"]),
    ("If it takes 12 men 12 hours to build a wall, how long would it take 6 men to build the same wall?", ["12 hours", "6 hours", "24 hours", "18 hours"]),
    ("If you have a 5-liter jug and a 3-liter jug, how can you measure exactly 4 liters of water?", ["Fill the 5-liter jug, pour into the 3-liter jug twice", "Fill the 3-liter jug twice", "Fill the 5-liter jug once", "Fill the 3-liter jug once"]),
    ("In a race, you overtake the person in second place. What position are you now in?", ["Second", "First", "Third", "Last"]),
    ("A farmer has 17 sheep, and all but 9 die. How many sheep does the farmer have left?", ["9", "8", "0", "17"]),
    ("What can travel around the world while staying in the same spot?", ["A stamp", "The wind", "A satellite", "A cloud"]),
    ("How many months have 28 days?", ["All of them", "1", "12", "6"]),
    ("I am an odd number. Take away one letter, and I become even. What number am I?", ["Seven", "Eleven", "Nine", "Three"]),
    ("You see a boat filled with people. It has not sunk, but when you look again you don’t see a single person. Why?", ["All the people were married", "The boat left", "The people jumped", "The boat capsized"]),
    ("What comes next in the sequence: 1, 1, 2, 3, 5, 8, ...?", ["13", "10", "12", "15"]),
    ("What is the next number in the series: 5, 10, 20, 40, ...?", ["80", "60", "100", "70"]),
    ("If A is the father of B and C is the mother of B, what is the relationship of A to C?", ["Husband", "Brother", "Uncle", "Cousin"]),
    ("In a race, you overtake the person in second place. What position are you in?", ["Second", "First", "Third", "Fourth"]),
    ("Which one of the following is a prime number?", ["17", "18", "20", "22"]),
    ("Which of the following does not belong in this group: Dog, Cat, Hamster, Whale?", ["Whale", "Dog", "Cat", "Hamster"]),
    ("If you have 3 apples and you take away 2, how many do you have?", ["2", "1", "0", "3"]),
    ("If you multiply a number by 6 and then add 2, you get 20. What is the number?", ["3", "4", "2", "5"]),
    ("Which number is missing from the sequence: 2, 3, 5, 7, 11, ...?", ["13", "9", "15", "17"]),
    ("What letter comes next in the sequence: J, F, M, A, M, ...?", ["J", "A", "M", "J"]),
    ("What number comes next: 1, 4, 9, 16, 25, ...?", ["36", "30", "32", "40"]),
    ("If all bloogs are shmoogs and all shmoogs are kroogs, are all bloogs definitely kroogs?", ["Yes", "No", "Cannot be determined", "Sometimes"]),
    ("What is the odd one out: Fork, Spoon, Knife, Plate?", ["Plate", "Fork", "Spoon", "Knife"]),
    ("A man is looking at a picture of someone. His friend asks, 'Who is it you are looking at?' The man replies, 'Brothers and sisters, I have none. But that man's father is my father's son.' Who is the man in the picture?", ["His son", "His father", "His uncle", "His nephew"]),
    ("A farmer has 17 sheep and all but 9 die. How many are left?", ["9", "8", "0", "17"]),
    ("Which word is closest in meaning to 'opaque'?", ["Cloudy", "Clear", "Bright", "Transparent"]),
    ("Which of the following numbers is a multiple of 3?", ["15", "14", "10", "25"]),
    ("If 3 people can paint 3 fences in 3 hours, how many fences can 6 people paint in 6 hours?", ["12", "9", "6", "3"]),
    ("What number is missing: 7, 14, 21, ..., 35?", ["28", "24", "30", "27"])
]


"""
Enchantment books on swords.
Usage to add more:
    "enchantmentBook Name": "Description"
to check if enchantment is applied:
get_karma("enchantmentBook Name") == 1 #True if applied else False
"""
ENCHANTMENT_BOOKS = {
    "enchantmentBook Fire": "Covers your sword in an eternal flame",
    "enchantmentBook Poison": "Covers your sword in poison",
}

while True:
    if career == None: #Standard Careers (not including ghost)
        if abs(morailty) >= 5 and abs(person_type) >= 5:
            if morailty >= 5 and person_type >= 5:
                career = WIZARD
            elif morailty >= 5 and person_type <= -5:
                career = WARRIOR
            elif morailty <= -5 and person_type >= 5:
                career = VILLIAN
            elif morailty <= -5 and person_type <= -5:
                career = WARLOCK

    if situtation == 0:
        char_animation("Welcome Adventurer!")
        char_animation("1) Start a new game")
        char_animation("2) Load a game")

        if os.path.exists("game.data"):
            char_animation("3) Continue from save detected in game.data")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','start','new'],'b':['2','load'],'c':['3','game']}, "")
        else:
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','start','new'],'b':['2','load']}, "")

        if choice == 'a':
            autosave = char_animation_in("Do you want to enable autosave? (yes/no): ").lower() in {'yes','y','true'}
            if autosave:
                char_animation("Autosave is now on. You can turn it off by entering 'autosave' in the game.")
            else:
                char_animation("Autosave is off. You can turn it on by entering 'autosave' in the game. (Only works towards the end of a stage)")
            situtation = 1
        elif choice == 'b' or choice == 'c':
            if choice == 'b':
                filename = char_animation_in("Enter a filename: ")
            else:
                filename = "game.data"
            with open(filename) as file:
                try:
                    save_data = file.read().split('\n')
                    situtation = int(save_data[0])
                    NAME = save_data[1]
                    been_in_situations = {int(item) for item in save_data[2].strip('{}').split(',')}
                    morailty = int(save_data[3])
                    person_type = int(save_data[4])
                    career = save_data[5]
                    previous_choices = parse_dict(save_data[6])
                    gold = int(save_data[7])
                    inventory = InventoryManager(parse_dict(save_data[8]))
                    autosave = save_data[9] == 'True'
                    credits = int(save_data[10])
                except Exception as e:
                    char_animation(f"Invalid save file! {e}")
                    continue
        situtation = 1
    
    elif situtation == 1: #Clearing
        if 1 not in been_in_situations:
            char_animation("You wake up in the clearing of a forest, not remembering how you got here. You don't remember anything or anyone. The only thing you remember is a single word: your name.")
            NAME = char_animation_in("What is it?: ")
            been_in_situations.add(1)
            char_animation(f"Hello {NAME}. You see 4 paths labeled with signs: ")

            char_animation("\n\n")
            char_animation("1. The path going to the Temple, it has a a bricked road with lamps on the side.")
            char_animation("2. The path going to the Library, it has a road covered with leaves, seemingly not being disturbed in years.")
            char_animation("3. The path to the Arena, it has a road with a lot of footsteps, and you can hear the sound of swords clashing from the distance.")                    
            char_animation("4 The path to the Dragon's lair, the sign itself tangled with vines and the path so overgrown it may as well not have been there.")
            choice = get_char_animation_in("Which path do you take?: ",{'2':['1','temple'],'3':['2','library'],'4':['3','arena'],'5':['4',"dragon","lair"]}, allow_save=True)
            situtation = int(choice)
            been_in_situations.add(1)
        else: #Disable Dragon Lair after first one...
            char_animation(f"Hello {NAME}. You see 4 paths labeled with signs: ")
            char_animation("\n\n")
            char_animation("1. The path going to the Temple, it has a a bricked road with lamps on the side.")
            char_animation("2. The path going to the Library, it has a road covered with leaves, seemingly not being disturbed in years.")
            char_animation("3. The path to the Arena, it has a road with a lot of footchar_animations, and you can hear the sound of swords clashing from the distance.")                    
            choice = get_char_animation_in("Which path do you take?: ",{'2':['1','temple'],'3':['2','library'],'4':['3','arena']}, allow_save=True)
            situtation = int(choice)

    elif situtation == 2: #Temple
        char_animation("\n\nTemple")
        if 2 not in been_in_situations:
            char_animation("As you walk down this path you see another person walking down the path. Do you?: ")
            char_animation("1. Ask him for help")
            char_animation("2. Ignore him")
            char_animation("3. Attack him")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','ask','help'],'b':['2','ignore'],'c':['3','attack']})
            if choice == 'a':
                previous_choices["old man"] = 1
                person_type += 1
                morailty += 1
                char_animation("You ask him for help, and he says: ")
                char_animation("What do you mean you don't know where you are?! You are in the kingdom of Mythopes, ruled by Emporer Rahas! Child you look like you need help, I am old I don't have much but you can have this: he hands you a bag of gold")
                if career == GHOST:
                    char_animation("You are a ghost, you can't hold the gold :(")
                else:
                    char_animation("You take the gold and thank him + 100 Gold")
                    gold += 100
            elif choice == 'b':
                previous_choices["old man"] = 0
                person_type -= 1
                if career != GHOST:
                    char_animation("You ignore him and continue down the path... On your way there you see a bag of gold on the side of the path, you could've sworn it wasn't there a moment ago, +100 Gold")
                    gold += 100
            elif choice == 'c':
                previous_choices["old man"] = -1
                person_type -= 1
                morailty -= 10000
                if career == GHOST:
                    char_animation("You attack him but float right through him lol.")
                else:
                    char_animation("You attack him and quickly overpower him. +100 Gold")
                    gold += 100

            if career != GHOST:
                char_animation("You continue down the path and you see a temple, and you enter it. There are a few people inside who seem to put money into the temple's donation box. Do you: ")
                char_animation("1. Put some money in the donation box")
                char_animation("2. Ignore the donation box")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','put','money'],'b':['2','ignore']})
                if choice == 'a':
                    amt = int(char_animation_in("How much money do you put in the donation box?: "))
                    previous_choices["donation"] = amt
                    gold -= amt
                    if amt > 0:
                        char_animation(f"You put the {amt} money in the donation box")
                    if gold < 0:
                        char_animation("You are now in debt but you feel good :)")
                        morailty += 1000
                    if amt > 50:
                        morailty += 2
                    if amt > 80:
                        morailty += 1
                    if morailty == 100:
                        morailty += 2
                    if amt < 0:
                        char_animation(f"You take the {amt} money from the donation box", end="")
                        char_animation(f".{PAUSE}.{PAUSE}.{PAUSE}\nYou suddenly feel a sharp pain in you head. You hear a nasty voice in your head 'hahaha you think you can fool me!!'")
                        char_animation(f"Do you wish to explain yourself? (yes/no)")
                        choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes','explain', 'y'],'b':['2','no','ignore', 'n']})
                        if choice == 'a':
                            the_explanation = char_animation_in("[Explain youself]: ").lower()
                            if 'sorry' in the_explanation:
                                the_explanation = the_explanation.split('sorry')
                                the_explanation = the_explanation[0].split('not')
                                if len(the_explanation)%2 == 0:
                                    char_animation("Intersting explanation, *not* an apology though.")
                                else:
                                    char_animation("You explain yourself... ")
                                    char_animation("The voice in your head says 'I will let you go this time... if you solve my riddle'")
                                    question,answers = randchoice(RIDDLES)
                                    char_animation("    " + question)
                                    ans = char_animation_in("Answer: ").lower()
                                    if ans in answers:
                                        char_animation("You are correct... surprising for a mortal... to bad you still have to go")
                                    else:
                                        char_animation("You're wrong... bye!")
                            else:
                                char_animation("You don't even say sorry... some apology!")
                        char_animation("The sharp pain in your head multiplies hundred fold and you die... no worse... you are neither here nor there, you are a ghost.")
                        career = GHOST
                        inventory = InventoryManager({})
                        gold = 0
                if choice == 'b' or amt == 0:
                    previous_choices["donation"] = 0
                    char_animation("You ignore the donation box and continue down the path...")
                
                if choice == 'a' and amt > 0:
                    char_animation("Good Job adventurer!")
            else:
                char_animation("You enter the temple and you feel a deep chill... You feel a dark presence.")
                char_animation("A familiar voice says: ")
                char_animation("ha ha ha, you are growing weaker by the second...")

            been_in_situations.add(2)

        char_animation("Where do you chose to go?")
        char_animation("1. Back to the clearing")
        char_animation("2. Go to the town")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)
        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 10
        
    elif situtation == 3: #Library
        if 3 not in been_in_situations:
            char_animation("\n\nLibrary")
            char_animation("You walk down the path for what seems like ages. You finally reach the library.")
            char_animation("Its a grand structurem, so tall you cant see the top. It so huge you cant see where it ends.")
            char_animation("Yet it appears abandoned, the building is covered in vines.")
            char_animation("You enter the library and see huge lines of bookshelves filled with thousands of dusty books.")
            
            lib_loc = 0
            char_animation("You continue foraward and see two paths, one up a ladder and one down steep stairs.")
            char_animation("Do you: ")
            char_animation("1. Go up the ladder")
            char_animation("2. Go down the stairs")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','up','ladder'],'-1':['2','down','stairs']},allow_save=True)
            lib_loc += int(choice)
            
            char_animation("You continue foraward and see two more paths, one up a spiral staircase and one down a trapdoor.")
            char_animation("Do you: ")
            char_animation("1. Go up the stairs")
            char_animation("2. Go down the trapdoor")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','up','stairs'],'-1':['2','down','trapdoor']})
            lib_loc += int(choice)
            if choice == '1':
                person_type += 1
            else:
                person_type -= 1
            
            char_animation("You continue foraward and see two more paths, left towards a large shelf of boooks, same yet different from what you've seen so far or right towards a set of glowing spheres on the bookshelves.")
            char_animation("Do you: ")
            char_animation("1. Go left towards a large shelf of boooks")
            char_animation("2. Go right towards a set of glowing spheres on the bookshelves")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','left'],'-1':['2','right']})
            if OPENAI_API_KEY != None and choice == '1':
                char_animation("You see open a book and it reads: ")
                char_animation(get_openai_response("Give a short story about an ancient library. Only provide the story do not say anything else."))
            if OPENAI_API_KEY != None and choice == '2':
                char_animation("You see a glowing sphere and you touch it, you see a vision of a great library, the biggest you have ever seen. Inside of it you see you. You hear a voice: ")
                char_animation(get_openai_response("Provide a prophecy of the player doing great things. Only provide the prophecy do not say anything else."))            

            lib_loc += int(choice)
            if choice == '1':
                person_type -= 1
            else:
                person_type += 2


            char_animation("You continue foraward and see two more paths, each with a huge archway and a single word on the top.")
            char_animation("Do you: ")
            char_animation("1. Go left towards the archway with the word 'Power' on the top")
            char_animation("2. Go right towards the archway with the word 'Knowledge' on the top")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','left'],'-1':['2','right']})
            lib_loc += int(choice)
            if choice == '1':
                morailty -= 2
            if choice == '2':
                morailty += 1
                person_type += 1

            lib_loc //= 2
            
            if lib_loc == 0:
                choice = char_animation_in("Now what?: ")
                if choice == 'BA':
                    char_animation(f".{PAUSE}.{PAUSE}.{PAUSE}\nYou have broken out of the matrix... Just kidding but you can chose either path: ")
                    char_animation("1. Meet the librarian")
                    char_animation("2. Meet the priest")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','librarian'],'b':['2','priest']})
                    if choice == 'a':
                        lib_loc = 1
                    elif choice == 'b':
                        person_type += 1
                        lib_loc = -1
                    char_animation("Great choice, also heres +100 Gold for being smart :)")
                else:
                    char_animation(":(")
                    lib_loc = randchoice([-1,1])

            if lib_loc < 0:
                char_animation("You continue down the path and you see a cloaked man, he looks at you and you can only see his piercing eyes that seem thousands of years old yet like those of a newborn.")
                char_animation(f"He looks at you mysteriously and says: 'Better {PAUSE}elsewhere {PAUSE}you {PAUSE}will {PAUSE}do!'")
                char_animation("You feel a tug in your gut and you feel your entire body being compressed into a tiny ball.")
                char_animation("You wake up and are now in...") #Arena
                situtation = 4
                been_in_situations.add(3)
                continue
            if lib_loc > 0:
                char_animation("You see a librarian, who looks as old as time itself. She looks at you and says: ")
                char_animation("Its been a long time since I've seen a mortal here... You must be special...")
                char_animation("Good Luck Adventurer!")
            
            been_in_situations.add(3)
        
        char_animation("Where do you chose to go?")
        char_animation("1. Back to the clearing")
        char_animation("2. Go to the town")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)
        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 10

    elif situtation == 4: #Arena entrance
        char_animation("\n\nThe Arena")
        if 4 not in been_in_situations:
            char_animation("You walk down the path and enter a large clearing")
            char_animation("The largest building you have ever seen is in front of you.")
            char_animation("It is a massive colosseum made of chisled white marble.")
            char_animation("Yet on looking closer it seems to be in ruins, with cracks all over and vines appearing to grow over it")
            char_animation("You enter the colosseum and see a large arena, with no one in the stands.")
            
            if gold > 0 and career != GHOST:
                char_animation("As you walk in you see a shopkeeper, he looks at you and says would you like to purchase something: ")
                char_animation("1. Buy a sword (66 gold)")
                char_animation("2. Buy a potion (50 gold)")
                char_animation("3. Buy food (50 gold)")
                char_animation("4. Ignore him and move on")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','sword'],'b':['2','potion'],'c':['3','food'],'d':['4','ignore']})
                if choice == 'a':
                    if gold >= 66:
                        gold -= 66
                        inventory.add("sword")
                        char_animation("You buy a sword")
                        person_type -= 1
                    else:
                        char_animation("You don't have enough gold. The shopkeeper is annoyed and you move forward.")
                elif choice == 'b':
                    if gold >= 50:
                        gold -= 50
                        inventory.add("potion")
                        char_animation("You buy a potion")
                        person_type += 1
                    else:
                        char_animation("You don't have enough gold. The shopkeeper is annoyed and you move forward.")
                elif choice == 'c':
                    if gold >= 50:
                        gold -= 50
                        inventory.add("food")
                        char_animation("You buy food")
                    else:
                        char_animation("You don't have enough gold. The shopkeeper is annoyed and you move forward.")
                elif choice == 'd':
                    char_animation("You ignore the shopkeeper and move forward.")
                
                if 'food' in inventory:
                    char_animation("You continue down the path and you see a beggar who asks you for some alms. Do you:")
                    char_animation("1. Give him all your food")
                    char_animation("2. Give him some food")
                    char_animation("3. Ignore him")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','all'],'b':['2','some'],'c':['3','ignore']})
                    if choice == 'a':
                        inventory.remove('food')
                        char_animation("You give him all your food")
                        morailty += 3
                        previous_choices['beggar_arena'] = 2
                    elif choice == 'b':
                        char_animation("You give him some food")
                        previous_choices['beggar_arena'] = 1
                        morailty += 1
                    elif choice == 'c':
                        char_animation("You ignore him")
                        morailty -= 1
                
                else:
                    char_animation("You continue down the path and you see a beggar who asks you for some alms. Do you:")
                    char_animation("1. Give him all your gold")
                    char_animation(f"2. Give him some gold {min(10,gold//3)}")
                    char_animation("3. Ignore him")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','all'],'b':['2','some'],'c':['3','ignore']})
                    
                    if choice == 'a':
                        gold = 0
                        char_animation("You give him all your gold")
                        previous_choices['beggar_arena'] = 2
                        morailty += 3
                    elif choice == 'b':
                        gold -= min(10,gold//3)
                        char_animation("You give him some gold")
                        previous_choices['beggar_arena'] = 1
                        morailty += 1
                    elif choice == 'c':
                        char_animation("You ignore him")
                        morailty -= 1

                if choice == 'a' or choice == 'b':
                    char_animation("The beggar says: ")
                    char_animation("Remember in life,")
                    char_animation("In chaos you'll find peace,")
                    char_animation("Neither charging forth nor seeking release,")
                    char_animation("With no steps forward nor backward, you'll conquer the storm.")
                    char_animation("and you'll find out you were wrong all along.")

            elif career == GHOST:
                char_animation("An apparation appears and says: ")
                char_animation("Remember in life,")
                char_animation("In chaos you'll find peace,")
                char_animation("Neither charging forth nor seeking release,")
                char_animation("With no steps forward nor backward, you'll conquer the storm.")
                char_animation("and you'll find out you were wrong all along.")
                char_animation("Before you can say anything else it dissapears.")

            else:
                char_animation("You feel a deep sense that you would be better off coming back later...")
                char_animation("Do you: ")
                char_animation("1. Go back to the clearing")
                char_animation("2. Continue forward")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','forward']})
                if choice == 'a':
                    situtation = 1
                    continue
                elif choice == 'b':
                    char_animation("You continue forward")
            
            been_in_situations.add(4)
        
        situtation = 12
    
    elif situtation == 12: #Arena
        if 12 not in been_in_situations:
            char_animation("You walk into the arena and see it in its glory. ")
            char_animation("You can almost see the warriors fighting in the arena, the crowd cheering.")
            char_animation("And then you see a large man, 7ft tall, 300 pounds of pure muscle, barelling at you.")
            char_animation("Do you: ")
            char_animation("1. Stay and fight him")
            char_animation("2. Run away")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','fight'],'b':['2','run'],'c':['stay','still','none','nothing','peace']})
            if choice == 'a':
                char_animation("You stay and fight him...")
                person_type -= 2
                if 'potion' in inventory:
                    char_animation("You accidently throw your potion at him and he dissapears in a poof of smoke...")
                elif 'sword' in inventory and get_karma('beggar_arena') in {1,2}:
                    char_animation("You fight him with your sword and you win.")
                else:
                    char_animation("You fight him but he is too strong and you die. Better luck next time...")
                    char_animation("Game over.... not yet...")
                    char_animation_in("You can go back a step if you would like... Press enter to go back...")
                    input()
                    situtation = 12
                    continue

            elif choice == 'b':
                char_animation("You run away as fast as you can, as strong as he looks you are faster.")
                char_animation("You run and run until you reach the clearing.")
                person_type += 1
                situtation = 1
                continue
            
            elif choice == 'c':
                char_animation("You stay still and do nothing... He continues running forward... You still do nothing, you stay still...")
                char_animation("You remember the beggar's words...")
                char_animation("In chaose you'll find peace... Neither charging forth nor seeking release... With no steps forward nor backward, you'll conquer the storm.")
                char_animation("He is still running at you....")
                char_animation("And he runs right at you and stops... He looks at you and says: ")
                char_animation("You are the first one who hasn't run away or fought me...")
                char_animation("Intriguing...")
                char_animation("Most find my appearance terrifying... I am the guardian of the arena... I am here to test you and all who come for all of enternity.")
                char_animation("You have passed the test...")
                previous_choices['fighter_arena'] = 1

            been_in_situations.add(12)
            
        char_animation_in("Where would you like to go?: ")
        char_animation("1. Back to the clearing")
        char_animation("2. Go to the town")
        if get_karma('fighter_arena') == 1:
            char_animation("3. Go to the warrior's base")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town'],'c':['3','warrior','base']}, allow_save=True)
        else:
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)

        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 10
        elif choice == 'c':
            situtation = 11

    elif situtation == 5: #Dragon's Lair path 1
        person_type -= 1
        char_animation("You go down the dragon lair path, and you see bones scattered along the path. Do you: ")
        char_animation("1. Continue down the path")
        char_animation("2. Go back")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','continue'],'b':['2','back']}, allow_save=True)
        if choice == 'a':
            situtation = 6
        elif choice == 'b':
            situtation = 1
    
    elif situtation == 6: #Dragon's Lair path 2
        person_type -= 1
        char_animation("You continue down the path, and you see a dead body of a knight, possibly just a few days old, Do you: ")
        char_animation("1. Continue down the path")
        char_animation("2. Go back")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','continue'],'b':['2','back']}, allow_save=True)
        if choice == 'a':
            situtation = 7
        elif choice == 'b':
            situtation = 1
    
    elif situtation == 7: #Dragon's Lair
        person_type -= 1
        char_animation("You see a large cavern, nothing but darkness ahead. You hear a deep growling sound. Do you: ")
        char_animation("1. Go back")
        char_animation("2. Continue")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','continue']}, allow_save=True)
        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 8
    
    elif situtation == 8: #Dragon's Lair
        if 8 in been_in_situations:
            char_animation("You have already been here before... You are too scared to go back in.")
            situtation = 1
            continue
        been_in_situations.add(8)
        char_animation("\n\nDragon's Lair")
        
        char_animation("In the center of the cavern, you can barely see a shadowy figure. You slowly approach it and it moves with deadly speed. In the blink of an eye the way you came in is blocked by rocks.")
        char_animation("In the most petrifying voice you here it speak... Wait its speaking not to you but in you... You can hear its voice in your head.")
        char_animation("It voice loathes of pure evil and it speaks to you.")
        char_animation("\"You can only leave if you answer my riddle correctly.\"")
        question,answers = randchoice(RIDDLES)
        char_animation("")
        char_animation("    " + question)
        ans = char_animation_in("Answer: ").lower()
        if ans in answers:
            char_animation("The dragon lets out a laugh, yesss you have answer correctly... To bad you still have to die.")
            
        char_animation("The shadowy figure lets out a loud roar and you feel a searing pain in your head.")
        char_animation("You are now... not dead but not alive. You are something worse - a ghost. Not in the mortal plane but not in the afterlife. Neither here nor there")
        career = GHOST
        inventory = InventoryManager({})
        gold = 0
        char_animation("You leave to go back to the clearing...")
        input("")
        situtation = 1

    elif situtation == 10: #Town
        if career == None or career == 'None':
            if morailty > 0 and person_type > 0:
                career = WIZARD
            elif morailty < 0 and person_type < 0:
                career = WARLOCK
            elif morailty > 0 and person_type < 0:
                career = WARRIOR
            elif morailty < 0 and person_type > 0:
                career = VILLIAN
            else:
                career = randchoice([WIZARD, WARLOCK, WARRIOR, VILLIAN])
                previous_choices['career_choice'] = 1

        char_animation("\n\nTown")
    
        if 10 not in been_in_situations:
            char_animation("You walk down the path and enter a large town.")
            char_animation("The town is filled with people, you see shops, and children playing in the gardens.")
            char_animation("You see a sign that says: ")
            char_animation("Welcome to the Township of the Center, where happiness is found.")
            
            char_animation("You walk into the first shop you see, the Warrior's Den.")
            char_animation("You see the shopkeeper and he says: ")
            char_animation("Welcome to the Warrior's Den! I've been expecting you.")
            char_animation("We have everything you could want but I suppose you have some questions?")
            potential_questions = [
                ("Who are you?", "I am the shopkeeper of the Warrior's Den. As for my name... you can call me Tom"),
                ("Why were you expecting me?", "I was expecting you because you are special... why? Don't worry all will become clear..."),
                ("What do you want?", "I want to help you... I want to help you find your way..."),
                ("Where is this place?", "You are in a seperate plane of existence, far beyond your realm, how you got here I do not know. This is Mythopes, the kingdom ruled by Emporer Rahas."),
            ]
            if career == GHOST:
                previous_choices['told_ghost'] = 1
                potential_questions.append(("What happened to me?", "You are a ghost, you are in a different plane of existence... I don't know much about ghosts but you should try finding the priest of the Castle of the Day Before."))
            while True:
                char_animation("\n\n")
                for i,question in enumerate(potential_questions):
                    char_animation(f"{(i+1)}) {question[0]}")
                char_animation("What would you like to ask?")
                while True:
                    choice = char_animation_in("Enter your choice: ")
                    try:
                        choice = int(choice)
                        if choice >= 1 and choice <= len(potential_questions):
                            break
                    except:
                        None
                    char_animation("Invalid choice.")

                char_animation("You ask: " + potential_questions[choice-1][0])
                char_animation("He replies: " + potential_questions[choice-1][1])
                potential_questions.pop(choice-1)
                if len(potential_questions) == 0:
                    break
            
            char_animation("\n\nGood Luck Adventurer!")
           
            char_animation("You walk through the town and see a few paths: ")
            been_in_situations.add(10)

        allowed = True

        if (career != GHOST) and (17 in been_in_situations) and (16 in been_in_situations):
            allowed = False #Disables nav bar menu in the other one
            char_animation("What would you like to do?")
            char_animation("1. Stay in town (Earn/Spend gold)")
            char_animation("2. Go somewhere else")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','stay'],'b':['2','go']}, allow_save=True)
            if choice == 'a':
                char_animation("Where do you want to go? ")
                char_animation("0. Shop")
                char_animation("1. Quiz for gold!!")
                char_animation("2. Slot Machine, try your luck out, win upto 1000x your bet")
                char_animation("3. Solve a riddle and win")
                char_animation("4. Wordle, guess the word in 6 tries and win 10 gold")
                char_animation("5. Maze, find your way out and win 50 gold")
                char_animation("6. Boss battle, practice your skills and win upto 100 gold")
                choice = get_char_animation_in("Enter your choice: ",{'s':['0','shop'],'a':['1','quiz'],'b':['2','slot','machine'],'c':['3','trivia','quiz'],'d':['4','wordle'], 'k': ['5','maze'], 'm': ['6', 'battle']}, allow_save=True)
            else:
                char_animation("Where do you want to go?")
                char_animation("1. Farm")
                char_animation("2. City")
                char_animation("3. Library")
                char_animation("4. Arena")
                char_animation("5. Temple")
                char_animation("6. Royal Palatium")
                choice = get_char_animation_in("Enter your choice: ",{'e':['1','farm'],'f':['2','city'],'g':['3','library'],'h':['4','arena'],'i':['5','temple'],'j':['6','palatium']}, allow_save=True)

        if career != GHOST:
            if allowed:
                char_animation("Where do you want to go?")
                char_animation("0. Shop")
                char_animation("1. Quiz for gold!!")
                char_animation("2. Slot Machine, try your luck out, win upto 1000x your bet")
                char_animation("3. Solve a riddle and win")
                char_animation("4. Wordle, guess the word in 6 tries and win 10 gold")
                char_animation("5. Farm")
                char_animation("6. City")
                char_animation("7. Library")
                char_animation("8. Arena")
                char_animation("9. Temple")
                choice = get_char_animation_in("Enter your choice: ",{'s':['0','shop'],'a':['1','quiz'],'b':['2','slot','machine'],'c':['3','trivia','quiz'],'d':['4','wordle'],'e':['5','farm'],'f':['6','city'],'g':['7','library'],'h':['8','arena'],'i':['9','temple']}, allow_save=True)
            if choice == 's':
                if career == WIZARD or career == VILLIAN:
                    char_animation("Welcome to the Magik shop!")
                    char_animation("1. Buy a spellbook of Stun (unlimited uses) (350 gold)")
                    char_animation("2. Buy a potion of poison (1 use) (30 gold)")
                    char_animation("3. Buy a potion of healing (1 use) (10 gold)")
                    char_animation("4. Buy a potion of invisibility (1 use) (100 gold)")
                    char_animation("5. I'm feeling lucky (25 gold)")
                    char_animation("6. Nothing, just browsing")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','spellbook'],'b':['2','poison'],'c':['3','healing'],'d':['4','invisibility'],'e':['5','lucky'], 'f':['6','nothing','browse']})
                    if choice == 'f':
                        char_animation("Come back later!")
                        continue #Reiterates back to the town nav menu                    
                    if choice == 'e':
                        if gold >= 25:
                            gold -= 25
                            char_animation("You buy a mystery item")
                            choice = randint(1,20)
                            if choice <= 1:
                                choice = 'a'
                                gold += 350 #Provide money for transaction
                            elif choice <= 5:
                                choice = 'd'
                                gold += 100
                            elif choice <= 12:
                                choice = 'b'
                                gold += 30
                            else:
                                choice = 'c'
                                gold += 10
                        else:
                            char_animation("You don't have enough gold")

                    if choice == 'a':
                        if gold >= 350:
                            gold -= 350
                            inventory.add("spellbook_of_stun")
                            char_animation("You buy a spellbook of Stun")
                        else:
                            char_animation("You don't have enough gold")
                    elif choice == 'b':
                        if gold >= 30:
                            gold -= 30
                            inventory.add("potion")
                            char_animation("You buy a potion of poison")
                        else:
                            char_animation("You don't have enough gold")
                    elif choice == 'c':
                        if gold >= 10:
                            gold -= 10
                            inventory.add("potion_of_healing")
                            char_animation("You buy a potion of healing")
                        else:
                            char_animation("You don't have enough gold")
                    elif choice == 'd':
                        if gold >= 100:
                            gold -= 100
                            inventory.add("potion_of_invisibility")
                            char_animation("You buy a potion of invisibility")
                        else:
                            char_animation("You don't have enough gold")
                    
                elif career == WARRIOR or career == WARLOCK:
                    char_animation("Welcome to the Warrior's shop!")
                    char_animation("1. Buy a sword (unlimited uses, can break) (100 gold)")
                    char_animation("2. Buy a strength potion (one time use) (500 gold)")
                    char_animation("3. Buy a potion of healing (one time use) (10 gold)")
                    char_animation("4. Buy armor (always active) (300 gold)")
                    char_animation("5. I'm feeling lucky (25 gold)")
                    char_animation("6. Nothing, just browsing")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','sword'],'b':['2','strength'],'c':['3','healing'],'d':['4','armor'],'e':['5','lucky'], 'f':['6','nothing','browse']})
                    if choice == 'f':
                        char_animation("Come back later!")
                        continue
                    if choice == 'e':
                        if gold >= 25:
                            gold -= 25
                            char_animation("You buy a mystery item")
                            choice = randint(1,20)
                            if choice <= 1:
                                choice = 'd'
                                gold += 300
                            elif choice <= 5:
                                choice = 'a'
                                gold += 100
                            elif choice <= 9:
                                choice = 'b'
                                gold += 50
                            else:
                                choice = 'c'
                                gold += 10
                        else:
                            char_animation("You don't have enough gold")
                    
                    if choice == 'a':
                        if gold >= 100:
                            gold -= 100
                            inventory.add("sword")
                            char_animation("You buy a sword")
                        else:
                            char_animation("You don't have enough gold")
                    
                    elif choice == 'b':
                        if gold >= 500:
                            gold -= 500
                            inventory.add("strength_potion")
                            char_animation("You buy a strength potion")
                        else:
                            char_animation("You don't have enough gold")
                    
                    elif choice == 'c':
                        if gold >= 10:
                            gold -= 10
                            inventory.add("potion_of_healing")
                            char_animation("You buy a potion of healing")
                        else:
                            char_animation("You don't have enough gold")
                    
                    elif choice == 'd':
                        if gold >= 300:
                            gold -= 300
                            inventory.add("armor")
                            char_animation("You buy armor")
                        else:
                            char_animation("You don't have enough gold")
            elif choice == 'a':
                gold += play_quiz()
            elif choice == 'b':
                gold += play_slot_machine()
            elif choice == 'c':
                gold += play_trivia()
            elif choice == 'd':
                gold += play_wordle()
            elif choice == 'e':
                situtation = 13
            elif choice == 'f':
                situtation = 14
            elif choice == 'g':
                situtation = 3
            elif choice == 'h':
                situtation = 12
            elif choice == 'i':
                situtation = 2
            elif choice == 'j':
                situtation = 18
            elif choice == 'k':
                play_maze()
                gold += 50
            elif choice == 'm':
                levels = {
                    1: (100,5, 30),
                    2: (200,3, 50),
                    3: (400,1, 100),
                }
                char_animation("Which difficulty would you like to try?")
                char_animation("1. Easy")
                char_animation("2. Medium")
                char_animation("3. Hard")
                choice = get_char_animation_in("Enter your choice: ",{1:['1','easy'],2:['2','medium'],3:['3','hard']})
                boss_health, player_health, gold_earned = levels[choice]
                batt = real_fight_rahas(boss_health=boss_health, player_health=player_health)
                if batt:
                    gold += gold_earned
                    char_animation(f"You win! + {gold_earned} gold")
                else:
                    char_animation("You lose! Better luck next time!")

        else:
            if previous_choices['told_ghost'] != 1:
                char_animation("You walk into the shop and the shopkeeper looks at you and says -  'What happened to you! You are a ghost, you are in a different plane of existence... I don't know much about ghosts but you should try finding the priest of the Castle of the Day Before.'")

            char_animation("\nYou walk back to the main street and ask around for the Castle of the Day Before... An old man shows you the direction and you start your journey there...")
            situtation = 15
            
    elif situtation == 11: #Warrior's Base
        char_animation("\n\nWarrior's Base")
        char_animation("\n\nThis is all for now! Come back later when chapter 2 is released!")
        char_animation("Would you like to go: ")
        char_animation("1. Back to th Arena")
        char_animation("2. To the town")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)
        if choice == 'a':
            situtation = 12
        elif choice == 'b':
            situtation = 10
    
    elif situtation == 13: #Farm Journey
        if 13 not in been_in_situations:
            char_animation("You start walking towards the farm...")
            char_animation(f"and walk {PAUSE} and walk {PAUSE} and {PAUSE} walk... {PAUSE}")
            char_animation("Its been hours, you see a cart coming down the road...")
            char_animation("Do you: ")
            char_animation("1. Ask for a ride")
            char_animation("2. Ignore it")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','ride'],'b':['2','ignore']})
            if choice == 'a':
                char_animation("You ask for a ride and they agree. You get in and they start taking you to the farm.")
                char_animation("There are 3 people in the cart,")
                char_animation("A large man with a handlebar mustache driving the cart")
                char_animation("A thin man with a large hat")
                char_animation("A woman with a large basket")
                char_animation("The thin man looks at you and friendly says: ")
                char_animation("\n  Hello there! Where are you headed?")
                char_animation_in("  You reply: ")
                char_animation("  He says: 'Wow! Doesn't seem like you are from around here... where are you from?'")
                char_animation_in("  You reply: ")
                char_animation(f"  He says: 'Wow! Interesting...{PAUSE}")
                char_animation("  You wouldn't happen to have some gold on you, for our troubles you know?")
                char_animation("\nBefore you can reply he pulls out a knife out of his hat and points it at you.")
                char_animation("The woman pulls out another knife and holds it at your throat.")
                char_animation("The large man silently stops on the side of the road and turns around slowly.")
                char_animation("He starts going through your pockets and finds your gold.")
                char_animation(f"-{gold} Gold")
                char_animation(f"You are thrown onto the road. As they are about to run off, you see a blur run past you.")
                if get_karma("fighter_arena") == 1:
                    char_animation("Its your friend from the arena, he quickly disarms and ties up the three bandits.")
                else:
                    char_animation("Its a mysterious figure, he quickly disarms and ties up the three bandits.")
                    char_animation("He introduces himself as a warrior recently freed from the Arena")
                char_animation("He returns your gold ")
                
            elif choice == 'b':
                char_animation("You continue walking down the road...")
                char_animation("and you walk {PAUSE} and walk {PAUSE} and {PAUSE} walk... {PAUSE}")
                char_animation("Its night time...")
                char_animation("A giant wolf jumps out of the bushes and runs towards you...")
                char_animation_in("Quick, do you: ")
                char_animation("1. Run")
                char_animation("2. Fight")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','run'],'b':['2','fight']})
                if choice == 'a':
                    char_animation("You run as fast as you can towards a tree, the wolf is faster...")
                    char_animation("{PAUSE} you are about the reach the tree when you trip and fall...")
                    char_animation("The wolf is about to pounce on you when you hear a loud roar...")
                    char_animation("The wolf is thrown back and you see a large figure standing in front of you...")
                    if previous_choices['fighter_arena'] == 1:
                        char_animation("Its your friend from the arena, he picks up the wolf and hurls it a few yards away. It runs away")
                    else:
                        char_animation("Its a mysterious figure, he picks up the wolf and hurls it a few yards away. It runs away")
                        char_animation("He introduces himself as a warrior recently freed from the Arena")    

                elif choice == 'b':
                    if 'sword' in inventory:
                        char_animation("You fight the wolf with your sword, but it snaps as soon as it hits the wolf's hide. You realise its metallic.")
                        inventory.remove('sword')
                        inventory.add('broken_sword')
                    elif 'potion' in inventory:
                        char_animation("You throw your potion at the wolf but it is impervious to it.")
                        inventory.remove('potion')
                    else:
                        char_animation("You pick up a stick and try to scare away the wolf but it looks deep into your eyes. You realise you are in trouble")

                    char_animation("As you are about to be pounced on, you hear a loud roar... you see a flash of metal and the wolf is bleeding blue blood. It quickly runs away.")
                    if previous_choices['fighter_arena'] == 1:
                        char_animation("Its your friend from the arena!")
                    else:
                        char_animation("Its a mysterious figure, he introduces himself as a warrior recently freed from the Arena!")

                char_animation("That was a blood wolf, impervious to most things, but not Excalibur here!")
            
            char_animation("Why are you out here?")
            char_animation_in("You reply: ")
            char_animation("He says: 'I see... You should be more careful next time!")
            if get_karma("fighter_arena") == 1:
                previous_choices['fighter_arena'] = 1
                char_animation("Come meet me at the warrior's base at the arena whenever you want.")
                been_in_situations.add(12)
            been_in_situations.add(13)
            char_animation("You continue down the road, and you see the farm in the distance...")
            char_animation("You see a large barn, a few cows, and a farmer working in the fields.")
            char_animation("Ready to go there?")
            char_animation("1. Yes")
            char_animation("2. YESSSSS")
            char_animation("3. Too late to turn back now ;-;")
            choice = get_char_animation_in(">> ", {'y':['yes','1'],'2':['ofc','2'],'3':['too late','3']})

        situtation = 16 # Actual farm
    
    elif situtation == 16: #Farm
        char_animation("\n\nFarm")
        if 16 not in been_in_situations:
            char_animation("You walk into the farm and fields expanding as far as you can see")
            char_animation("In between all of them is a circular town, a mile long.")
            char_animation("In the center was the Praed Palacia - The Palace of the Queen of the Fields.")

            char_animation("You walk into the town and see a hotel. You walk in and ask: ")
            char_animation(" How much for a room?")
            char_animation(" 10 Gold for a night")

            if gold >= 10:
                char_animation(f"You have {gold} gold.")
                char_animation("What do you do?: ")
                char_animation("1. Pay for the room")
                char_animation("2. Ask for cheaper accomodation")
                choice = get_char_animation_in("Enter your choice: ",{'b':['1','pay','room'],'a':['2','ask','cheaper']})
                if choice == 'b':
                    gold -= 10
                    char_animation("You pay for the room and the kind fellow at the counter takes you to your room.")
                    char_animation("You sleep there for the night.")
            else:
                char_animation("You don't have enough gold")
                char_animation("What do you do?: ")
                char_animation("1. Ask for cheaper accomodation")
                char_animation("2. Beg for a room")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','ask','cheaper'],'b':['2','beg','room']})
                if choice == 'b':
                    char_animation("You beg for a room and the kind fellow at the counter says: ")
                    char_animation(" How much money do you have?")
                    char_animation(f" You reply: {gold} gold")
                    char_animation(" He says: I suppose thats enough... He shows you to your room and you sleep there for the night.")
                    gold = 0

            if choice == 'a':
                char_animation("You ask for a cheaper accomodation and they the kind fellow at the counter says: ")
                char_animation(" Hmm... I suppose you can sleep in the attic...")
                char_animation(" You can sleep there for free")
                char_animation(" You walk up to the attic and see a rickety bed, you sleep there for the night.")

            input("Press enter to continue...")
            char_animation("\n\nYou wake up in the middle of the night to a shrilling scream... You run down the stairs and see - the kind fellow dead and the bell-lady standing over him screaming.")
            char_animation("You see a figure run out of the hotel and you chase after him.")
            char_animation("As you are running out a knight sees you.")
            char_animation("He apprehends you and takes you to the dungeon for the murder of Harkaitz Oscar, awaiting trial.")
            char_animation("You are put in a cell and accussed for murder. You as a newcomer are most suspicious.")

            char_animation("\n\nThe cell is barren. In the corner you notice a woman lying down. She looks up at you and asks: ")
            char_animation(" What are you in here for?")
            char_animation(" I was framed for murder. I'm here until the trial. What about you?")
            char_animation(" I was betrayed years ago. Framed for something I never did. I'm still awaitng trial.")
            char_animation(f" I'm {NAME}")
            char_animation(f" I'm Twila Finn")
            char_animation(" Wait what do you mean years?")
            char_animation(" I lost track, maybe a couple years, maybe a few decades.")
            char_animation(" Then we must break free!")
            char_animation(" How? There is now way?")

            char_animation_in(" Your creative mind has already thought of something: ")

            char_animation(" Nope, tried that she says laughing.")

            char_animation_in(" You quickly retort back another creative idea: ")

            char_animation(" I've done that too.")
            char_animation("You are about to give another idea when you here another voice say or you can brew a strength potion.")
            char_animation(" What?")
            char_animation(" The clothes you're wearing - Its made of unicorn leather. The necklace she's wearing has a sky opal and I have some residual goop from our meal, which has hot water.")
            char_animation(" I can brew a strength potion - Goop flavoured strength potion, and you can break us out of here. The name is Igor, Reziko Igor.")

            char_animation("You quickly rip of a part of your clothes. She takes the necklace off and looks at it. She hesitates and then throws it to him. He quickly starts brewing.")

            char_animation(f"He brews... {PAUSE} Pauses a moment... {PAUSE}More than a moment... {PAUSE} And then he says: ")
            char_animation(" I'm sorry, I can't do it! {PAUSE}")
            char_animation(" Just kidding, its ready! He hands you the potion. You offer it to Twila but she says: ")
            char_animation(" Nope the goop is all yours.")
            char_animation("You drink it and it tastes horrible. Besides a terrible taste, you feel nothing.")
            char_animation(" I don't feel different")
            char_animation(" You hold the bars and push with all your strength. The bars feel like cardboard and you push them apart.")
            char_animation(" A knight comes running and you knock him out with a single punch.")
            char_animation(" You, Igor and Twila run into the night.")

            char_animation(" You run into the fields and hide behind the corn.")
            char_animation(" You tell everyone: Lets leave this place and go elsewhere.")
            char_animation(" Twila says: No. I have to get my revenge on the perosn who betrayed me. The Queen.")
            char_animation(" What? The Queen? Why?")
            char_animation(" Igor chuckled. She is the Queen's sister. She was next in line for the throne. But the Queen framed her for a crime she didn't commit - the murder of her parents.")

            char_animation(" Igor says, me a Twila will head towards the Palacia. You coming?")
            char_animation("1. Go with them.")
            char_animation("2. Escape to the city.")
            
            while True:
                choice = get_char_animation_in("Enter your choice", {'a':['1','with'], 'b':['escape','2']})
                char_animation(randchoice([
                    "Twilia pleads with you to come. She says she'll owe you one",
                    "Igor asks you to stay!",
                    f"'Please {NAME}, help me beat my sister', Twilia says",
                    f"'Cmon {NAME}, lets do the right thing.' Igor says"
                ]))
                if choice == 'a':
                    break
            
            char_animation("You decide to help them!")
            char_animation("You head down the path and reach the Palacia. Gaurds are all around it.")

            char_animation(" 'How are we going to get in?' you ask")
            char_animation(" 'I know a secret passage' Twilia says.")

            char_animation("You head down the fields past the Palacia. There in the middle of the field is a trapdoor.")
            char_animation(" You all head down the trapdoor and find yourself in a pitch dark tunnel. Twilia reaches out and get a torch.")
            char_animation(" You walk down the stone paved tunnel for what seems like an eternity.")
            char_animation(" Eventually you reach a ladder which goes up. You climb up and find yourself in a room.")
            char_animation(" This is my dad's room. He built the passage when he was a prince so that he could wander through the fields at night.")
            
            char_animation("\n\nYou and Igor follow Twilia who runs down the corridor. You stop outside a door - The Queen's Chambers. You enter in and see no one.")
            char_animation("What do you do?")
            char_animation("1. Wait for her to come to confront her.")
            char_animation("2. Search the room for clues.")
            char_animation("3. Stay sneakily hidden.")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','wait'],'b':['2','search'],'c':['3','hide']})
            if choice == 'a':
                char_animation("She comes in and sees you. She screams and calls out for the guards.")
                char_animation("You are about to punch her when a guard comes in and blocks it with ease. Your potion has worn out.")
                char_animation("The Chief Knight comes in and says: You are herby sentenced to life in prison for trying to kill the Queen.")
                char_animation("You are taken to the dungeon and locked up.")
            elif choice == 'b':
                char_animation("Where do you search?")
                char_animation("1. The desk")
                char_animation("2. The bed")
                char_animation("3. The closet")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','desk'],'c':['2','bed'],'b':['3','closet']})

                if choice == 'a':
                    char_animation("You search the desk and find a letter. You pick it up and read it.")
                    char_animation("It says: 'Got You Sister!'")
                    char_animation("You hear a yell and a dozen knights enter and apprehend the three of you.")
                    char_animation("You are taken to the dungeon and locked up.")                            
                elif choice == 'c':
                    char_animation(f"You search the bed and find {PAUSE}nothing.")
                    char_animation("You hear a rumble outside and quickly hide under the bed.")
                elif choice == 'b':
                    char_animation(f"You search the closet and find {PAUSE}a skeleton. You literally find a skeleton in her closet.")
                    choice = 'c'

            if choice == 'c': #For hiding (+bed/ closet)
                char_animation("The three of you stay hidden and see the Queen come in. She sits down and starts writing something.")
                char_animation("Suddenly she gets up and leaves the room.")
                char_animation(f"{PAUSE}You come out of hiding and see a letter on the table. You pick it up and read it.")
                char_animation("It says: 'Got You!'")
                char_animation("You hear a yell and a dozen knights enter and apprehend the three of you.")
                char_animation("You are taken to the dungeon and locked up.")

            char_animation("You are in the dungeon. Twila was smiling. You ask: ")
            char_animation(" Why are you smiling?")
            char_animation(" I've got a plan. Just go with it.")
            char_animation("You guys are thrown back into your cells. A few hours later, the Queen comes in.")
            char_animation("Twilia whispers to you: 'Make her mad.'")

            char_animation_in("You scream at the Queen: ")

            char_animation(f"The Queen stares at you{PAUSE}. Then burst out laughing.")
            char_animation("She says: ")
            char_animation(" You have lost. You are in MY dungeon. You are MY prisoners.")

            char_animation("She starts leaving. Then turns around and says: ")
            char_animation(" I am going to kill all three of you tomorrow. You three are putting your noses where they don't belong, just like Oscar.")
            char_animation(" Just like him, you will die.")

            char_animation("\n YOU killed Oscar?!")
            char_animation(f" Of course. Just like I killed my parents.{PAUSE}")

            char_animation("You are about to say something when Twila says: 'GOT YOU!' and burts out laughing.")

            char_animation("Out of the cell comes the Chief Knight. He says: 'You are herby under arrest for the murder of Arden the King, Maya the Queen and Oscar.'")

            char_animation(f"{PAUSE}An hour later you all meet. Twila explains: ")
            char_animation("I went to the castle knowing I would get captured. While the Cheif Knight was bringing me down I told him that it was the Queen who killed our parents.")
            char_animation("He initially didn't believe me but I told him to stay in a cell. All that was left was to get the Queen to admit to killing them.")
            char_animation("And you did well!")

            char_animation("\nYou bid Igor and Twilia bye and leave. They tell you to come visit them whenever you can!")

            been_in_situations.add(16)

        char_animation("Where would you like to go?: ")
        char_animation("1. Food Shop")
        char_animation("2. Farms to earn gold")
        char_animation("3. City")
        char_animation("4. Town")
        char_animation("5. Visit Igor")
        char_animation("6. Visit Twilia")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','food'],'b':['2','farms'],'c':['3','city'],'d':['4','town'], 'e': ['5','igor'], 'f':['6','twilia']}, allow_save=True)
        if choice == 'a':
            char_animation("Welcome to the food shop!")
            char_animation("1. Buy a loaf of bread (1 gold)")
            char_animation("2. Buy a pie (5 gold)")
            char_animation("3. Buy chicken (10 gold)")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','bread'],'b':['2','pie'],'c':['3','chicken']})
            if choice == 'a':
                if gold >= 1:
                    gold -= 1
                    inventory.add("bread")
                    char_animation("You buy a loaf of bread")
                else:
                    char_animation("You don't have enough gold")
            elif choice == 'b':
                if gold >= 5:
                    gold -= 5
                    inventory.add("pie")
                    char_animation("You buy a pie")
                else:
                    char_animation("You don't have enough gold")
            elif choice == 'c':
                if gold >= 10:
                    gold -= 10
                    inventory.add("chicken")
                    char_animation("You buy chicken")
                else:
                    char_animation("You don't have enough gold")
        elif choice == 'b':
            char_animation("You can do some chores on the farm to earn some gold.")
            char_animation("1. Feed the chickens (5 gold)")
            char_animation("2. Cut the grass (10 gold)")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','feed'],'b':['2','cut']})
            if choice == 'a':
                char_animation("Type in some food for the chickens")
                food = char_animation_in(">> ").lower()
                #Allow words and emojis
                while food not in {'seeds','corn','wheat','🌾','🌽','🌻'}:
                    char_animation("Silly, chickens don't eat that!")
                    food = char_animation_in(">> ").lower() 
                char_animation("The chickens are happy and you earn 5 gold")
                gold += 5
            elif choice == 'b':
                squares = [[randint(0,1) for i in range(0,GRASS_DIFFICULTY)] for i in range(0,GRASS_DIFFICULTY)]
                char_animation("Take a look at the grass which needs to be mowed:")
                for i in range(0,GRASS_DIFFICULTY):
                    for j in range(0,GRASS_DIFFICULTY):
                        if squares[i][j] == 1:
                            print(" G ", end='|')
                        else:
                            print("   ", end='|')
                    print("")
                
                sleep(1)
                print("3", end = " ", flush=True)
                sleep(1)
                print("2", end = " ", flush=True)
                sleep(1)
                print("2 and a half", end = " ", flush=True)
                sleep(1)
                print("1", flush=True)
                sleep(1)
                

                #Move cursor up 5 lines
                print(f"\033[{GRASS_DIFFICULTY + 2}A", flush=True)
                for i in range(0,GRASS_DIFFICULTY):
                    for j in range(0,GRASS_DIFFICULTY):
                        print(f" {i*GRASS_DIFFICULTY + j + 1} ", end='|')
                    print("")
                
                nums = char_animation_in("Enter the numbers which need to be mowed (add a comma inbetween them): ")
                nums = nums.split(",")
                nums = [int(item.strip()) for item in nums]
                flag = False
                for i in range(0,GRASS_DIFFICULTY):
                    for j in range(0,GRASS_DIFFICULTY):
                        if ((i*GRASS_DIFFICULTY + j + 1) not in nums) and squares[i][j] == 1:
                            char_animation(f"Sorry, grass was there on {i*GRASS_DIFFICULTY + j + 1}")
                            flag = True
                        if ((i*GRASS_DIFFICULTY + j + 1) in nums) and squares[i][j] != 1:
                            char_animation(f"Sorry, grass was there on {i*GRASS_DIFFICULTY + j + 1}")
                            flag = True
                        
                
                if flag:
                    char_animation("Sorry you didn't cut the grass well enough...")
                else:
                    char_animation("Good job! + 10 gold")
                    gold += 10
                                   
        elif choice == 'c':
            situtation = 14
        elif choice == 'd':
            situtation = 10

        elif choice == 'e':
            char_animation("You walk down the path and reach the Farm. Igor is there.")
            char_animation("He says: 'Hey! I'm glad you came back.'")
            if 'sky_opal' in inventory:
                char_animation("He looks at the sky opal and says: 'I see you have a sky opal.'")
                char_animation("I can brew a potion of strength with that. Do you want me to?")
                char_animation("1. Yes")
                char_animation("2. No")
                choice = get_char_animation_in("Enter your choice: ",{'a':['yes','1'],'b':['no','2']})
                if choice == 'a':
                    char_animation("You rip out a piece of your clothes and give it to him.")
                    char_animation("He brews a potion of strength and gives it to you.")
                    inventory.remove('sky_opal')
                    inventory.add('strength_potion')
                char_animation("You thank him and leave.")
            else:
                char_animation("You talk to him for a while and leave.")

        elif choice == 'f':
            if (get_karma('needs_opal') == 1 or get_karma('needs_strength_potion')) and 'sky_opal' not in inventory:
                char_animation("You walk down the path and reach the Farm. Twilia is there.")
                char_animation("She says: 'Hey! I'm glad you came back.'")
                char_animation("You ask her: 'Hey do you have anymore sky opals?'")
                char_animation("She says: 'I have one, why do you need it? It's part of my mother's necklace.'")
                char_animation_in("You say: ")
                char_animation("She says: 'Ok, I'll give it to you. I owe you.'")
                char_animation("You thank her and leave.")
                inventory.add('sky_opal')
                previous_choices['needs_opal'] = 0
            else:
                char_animation("You walk down the path and reach the Palacia. Gaurds are all around it.")
                char_animation("They wave at you smiling and you walk in.")
                char_animation("Twilia meets you and you have a good time talking about the past.")
                char_animation("You bid her bye and leave.")

    elif situtation == 14: #City Journey
        if 14 not in been_in_situations and career != GHOST:
            char_animation("You start walking towards the city...")
            char_animation("Before long you see people walking on the path")
        
            if career in {WARLOCK, WARRIOR}:
                char_animation("\nYou see a perosn in black, dusty robes. Do you approach him?")
                char_animation("1. Yes")
                char_animation("2. No")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
                if choice == 'a':
                    previous_choices['met_john'] = 1
                    char_animation(f"You approach saying 'Hello there! I am {NAME}.'")
                    char_animation("Hey I'm John, the Blacksmith. I make and fix weapons and armor for the warriors of the town.")
                    char_animation("If you come across any broken weapons or armor, bring them to me in the city and I'll fix them for you.")
                
            else:
                char_animation("You continue down the path and see a old man in dark faded blue robes with a wooden staff. Do you approach him?")
                char_animation("1. Yes")
                char_animation("2. No")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
                if choice == 'a':
                    char_animation("You approach him and say 'Hello there! I am {NAME}.'")
                    char_animation("He looks at you and says 'Hello {NAME}, I am the cleric of the town. I help the people of the town with their magical needs.'")
                    char_animation("If you ever need help with anything, come to me in the city.")
                    char_animation("Want anything else right now?")
                    if char_animation_in("You reply: ").lower() in {'teach', 'learn', 'magic', 'help'}:
                        char_animation("He says: 'I can teach you a thing or two I suppose.'")
                        char_animation("He teaches you how to make the potion of harming. You now have unlimited potions of harming!")
                        inventory.add("potion", amt=9999999) #Technically just under 10 Million
                    char_animation("He says: Bye for now!")

            char_animation("You continue down the path and see a woman dressed in a bright colourflul dress. Do you approach her?")
            char_animation("1. Yes")
            char_animation("2. No")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
            if choice == 'a':
                char_animation("You approach her and say 'Hello there! I am {NAME}.'")
                char_animation("She looks at you and says 'Hello {NAME}, I am the florist of the city.'")
                char_animation("What do you say?")
                char_animation("1. Ask for information about the city")
                char_animation("2. Ask for a flower")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','info'],'b':['2','flower']})
                if choice == 'a':
                    char_animation("She tells you about the city and its history. You learn a lot about the city.")
                elif choice == 'b':
                    char_animation("Haha sure! She gives you a flower.")
                    char_animation("'How much do I owe you?', you ask.")
                    char_animation("'Oh no, its free! Don't worry about it!'")
                    char_animation("If you ever want a flower, come to me in the city!")
                    inventory.add("flower")
                    char_animation("You thank her and continue down the path.")

            char_animation("You continue down the path and see a street vendor selling stuff. Do you approach him?")
            char_animation("1. Yes")
            char_animation("2. No")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
            if choice == 'a':
                if career in {WIZARD, VILLIAN}:
                    char_animation("The vendor shows you the following items for sale: ")
                    char_animation("1. Potion of Harming (one use) (4 gold)")
                    char_animation("2. Potion of Foresight (one use) (3 gold)")
                    char_animation("3. Potion of Stulus (one use) (12 gold)")
                    char_animation("What would you like to buy?")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','harming'],'b':['2','foresight'],'c':['3','stulus']})            
                    if choice == 'a':
                        if gold >= 4:
                            gold -= 4
                            inventory.add("potion_of_harming")
                            char_animation("You buy a potion of harming")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'b':
                        if gold >= 3:
                            gold -= 3
                            inventory.add("potion_of_foresight")
                            char_animation("You buy a potion of foresight. Tip: to activate it type 'foresight'")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'c':
                        if gold >= 12:
                            gold -= 12
                            inventory.add("potion_of_stulus")
                            char_animation("You buy a potion of stulus")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")

                elif career in {WARRIOR, WARLOCK}:
                    char_animation("The vendor shows you the following items: ")
                    char_animation("1. Totem of escape (one use) (50 gold)")
                    char_animation("2. Beads of Fortune (one use) (3 gold)")
                    char_animation("3. Potion of Stulus (one use) (12 gold)")

                    char_animation("What would you like to buy?")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','escape'],'b':['2','fortune'],'c':['3','stulus']})
                    if choice == 'a':
                        if gold >= 50:
                            gold -= 50
                            inventory.add("totem_of_escape")
                            char_animation("You buy a totem of escape")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'b':
                        if gold >= 3:
                            gold -= 3
                            inventory.add("beads_of_fortune")
                            char_animation("You buy beads of fortune")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'c':
                        if gold >= 12:
                            gold -= 12
                            inventory.add("potion_of_stulus")
                            char_animation("You buy a potion of stulus")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                
            been_in_situations.add(14)
            char_animation("You continue down the road and see the city's sky high walls...")
        
        situtation = 17 # Actual city
    
    elif situtation == 17: #City
        char_animation("\n\nCity")
        if 17 not in been_in_situations:
            char_animation("You walk towards the towering gates of the city and see the guards standing there.")
            char_animation("They ask you for your name and purpose of visit.")
            char_animation("You tell them your name and that you are here to explore the city.")
            char_animation("They tell you that you must solve a riddle to enter the city.")
        
            while True:
                question,answers = randchoice(LOGIC_PUZZLES)
                correct = str(answers[0])
                answers = shuffle(answers)

                char_animation("")
                char_animation(question)
                for i,ans in enumerate(answers):
                    char_animation(f"{i+1}. {ans}")

                ans = get_char_animation_in("Enter your choice: ",{0:['1'],1:['2'],2:['3'],3:['4']})
                
                if answers[ans] == correct:
                    char_animation("The guards let you in.")
                    break
                char_animation(f"The guards shake their heads and tell you the answer was {correct}. They tell you to try again.")

            char_animation("You walk into the city and see a large dystopian city. There are flying cars everywhere. There seems to be no difference between tech and magic")
            char_animation("You see a sign that says: Tech + Magic = Life")
            char_animation("You try to buy some food but they only accept credits not gold. You ask around and find out that you can earn credits by doing tasks.")

            been_in_situations.add(17)

        char_animation("Where would you like to go?")
        char_animation("1. Flower Shop")
        char_animation("2. High-tech Blacksmith")
        char_animation("3. Cleric")
        char_animation("4. Town")
        char_animation("5. Earn Credits")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','flower'],'b':['2','blacksmith'],'c':['3','cleric'],'d':['4','town'],'e':['5','credits']}, allow_save=True)

        if choice == 'a':
            char_animation("Welcome to the Flower Shop!")
            char_animation("1. Buy a flower (1 credit)")
            char_animation("2. Buy 10 flowers (8 credits)")
            char_animation("3. Buy flower bouquet (20 credits)")
            char_animation("4. Buy a mega flower (99 credits)")
            char_animation("5. Nothing, just browsing")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','flower'],'b':['2','flowers'],'c':['3','bouquet'],'d':['4','mega'],'e':['5','nothing','browse']})
            if choice == 'a':
                if credits >= 1:
                    credits -= 1
                    inventory.add("flower")
                    char_animation("You buy a flower")
                else:
                    char_animation("You don't have enough credits")
            if choice == 'b':
                if credits >= 8:
                    credits -= 8
                    inventory.add("flower", amt=10)
                    char_animation("You buy 10 flowers")
                else:
                    char_animation("You don't have enough credits")
            if choice == 'c':
                if credits >= 20:
                    credits -= 20
                    inventory.add("flower_bouquet")
                    char_animation("You buy a flower bouquet")
                else:
                    char_animation("You don't have enough credits")
            if choice == 'd':
                if credits >= 99:
                    credits -= 99
                    inventory.add("mega_flower")
                    char_animation("You buy a mega flower")
                else:
                    char_animation("You don't have enough credits")

        elif choice == 'b':
            char_animation("Welcome to the Blacksmith!")
            char_animation("1. Fix sword (2 credits)")
            char_animation("2. Fix armor (5 credits)")
            char_animation("3. Buy a CUSTOM sword (30+ credits) (Doesn't break!)")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','sword'],'b':['2','armor'],'c':['3','custom']})
            if choice == 'a':
                if credits >= 2:
                    if 'broken_sword' in inventory:
                        credits -= 2
                        inventory.remove("broken_sword")
                        inventory.add("sword")
                        char_animation("Your sword is fixed")
                    else:
                        char_animation("You don't have a broken sword")

                else:
                    char_animation("You don't have enough credits")
            
            elif choice == 'b':
                if credits >= 5:
                    if 'broken_armor' in inventory:
                        credits -= 5
                        inventory.remove("broken_armor")
                        inventory.add("armor")
                        char_animation("You armor is fixed")
                    else:
                        char_animation("You don't have broken armor")
                else:
                    char_animation("You don't have enough credits")
            
            elif choice == 'c':
                if credits >= 30:
                    char_animation("Let's build your sword!")
                    current_price = 30
                    stuff = [
                        "Name your sword (10 credits)",
                        "Color your sword (25 credits)",
                        "Make your sword Extra Sharp (50 credits)",
                        "Enchantment your sword (100 credits + Enchantment book required)"
                    ]
                    options = {'a':['1','name'],'b':['2','color'],'c':['3','sharp'],'d':['4','enchantment'], 'e':['5','done','buy'], 'f':['6','cancel']}
                    bought_items = {"name":None, "color":None, "sharp":None, "enchantment":[]}
                    while True:
                        char_animation(f"Your have {credits-current_price} credits left.")
                        char_animation("What would you like to add: ")
                        
                        for i,thing in enumerate(stuff):
                            char_animation(f"{i+1}. {thing}")
                        char_animation("5. Done and buy")
                        char_animation("6. Cancel")

                        choice = get_char_animation_in("Enter your choice: ",options)
                        if choice == 'a':
                            if credits >= current_price + 10:
                                if bought_items["name"] == None:
                                    current_price += 10
                                bought_items["name"] = char_animation_in("Enter the name of your sword: ")
                                char_animation(f"You name your sword {bought_items['name']}")
                            else:
                                char_animation("You don't have enough credits")

                        if choice == 'b':
                            if credits >= current_price + 25:
                                if bought_items["color"] == None:
                                    current_price += 25
                                char_animation("Pick a color: ")
                                char_animation("1. Red")
                                char_animation("2. Blue")
                                char_animation("3. Green")
                                char_animation("4. Yellow")
                                char_animation("5. Purple")
                                char_animation("6. White")
                                bought_items["color"] = get_char_animation_in("Enter the color of your sword: ",{RED:['1','red'],BLUE:['2','blue'],GREEN:['3','green'],YELLOW:['4','yellow'],PURPLE:['5','purple'],WHITE:['6','white']})
                                char_animation(f"{bought_items['color']}You color your sword this color{DEFAULT_COLOR}")
                            else:
                                char_animation("You don't have enough credits")

                        if choice == 'c':
                            if credits >= current_price + 50:
                                if bought_items["sharp"] != None:
                                    char_animation("You already made your sword extra sharp")
                                else:
                                    current_price += 50
                                    bought_items["sharp"] = True
                                    char_animation("You make your sword extra sharp")
                            else:
                                char_animation("You don't have enough credits")

                        if choice == 'd':
                            possible_books = []
                            for item in inventory.inventory:
                                if "enchantmentBook" in item:
                                    possible_books.append((item,ENCHANTMENT_BOOKS[item]))
                            
                            if len(possible_books) == 0:
                                char_animation("You don't have any enchantment books!")
                            elif credits < current_price + 100:
                                char_animation("You don't have enough credits")
                            else:
                                for i,thing in enumerate(possible_books):
                                    item,description = thing
                                    char_animation(f"{i+1} {description}")
                                
                                choice = get_char_animation_in(
                                    "Enter your choice: ",
                                    {i:[str(i+1),item]}
                                )
                                bought_items["enchantment"].append(item)
                                current_price += 100
                                char_animation(f"Enchanting your sword with {ENCHANTMENT_BOOKS[item]}")                             

                        if choice == 'e':
                            if credits >= current_price:
                                credits -= current_price
                                char_animation("You buy the sword!\n\nHere are its details: ")
                                if bought_items["name"] != None:
                                    previous_choices['sword_name'] = bought_items["name"]
                                    char_animation(f"Name: {bought_items['name']}")
                                if bought_items["color"] != None:
                                    previous_choices['sword_color'] = bought_items["color"]
                                    char_animation(f"Color: {bought_items['color']}sword{DEFAULT_COLOR}")
                                if bought_items["sharp"] != None:
                                    previous_choices['sword_sharp'] = 1
                                    char_animation("Sharpness: Extra Sharp")
                                if len(bought_items["enchantment"]) > 0:
                                    for item in bought_items["enchantment"]:
                                        previous_choices[item] = 1
                                    char_animation(f"Enchantment{'s' if len(bought_items) > 1 else ''}: {', '.join([ENCHANTMENT_BOOKS[item][16:] for item in bought_items['enchantment']])}")
                                
                                for item in bought_items["enchantment"]:
                                    inventory.remove(item) #Remove the enchantment books
                                
                                char_animation(f"Price: {current_price} credits")
                                inventory.add("sword", amt = 9999999)
                                break
                            else:
                                char_animation("You don't have enough credits")
                        
                        if choice == 'f':
                            char_animation("You cancel the transaction")
                            break
                        
                        
                        choice = get_char_animation_in("Enter your choice: ",options)

                else:
                    char_animation("You don't have enough credits :(")

        elif choice == 'c':
            char_animation("Welcome to the Cleric's!")
            char_animation("Would you like to spend or earn credits?")
            char_animation("1. Spend Credits")
            char_animation("2. Earn Credits")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','spend'],'b':['2','earn']})
            if choice == 'a':
                char_animation("\nGreat! Here are the things you can buy: ")
                char_animation("1. Random Potion (11 credits)")
                char_animation("2. Thing-a-ma-jig (50 credits)")
                char_animation("3. Enchantment Book of Fire (100 credits)")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','potion'],'b':['2','thing'],'c':['3','fire']})
                if choice == 'a':
                    if credits >= 11:
                        credits -= 11
                        if randint(1,100) == 2:
                            potion = "potion_of_invisibility"
                        elif randint(1,10) <= 2:
                            potion = "potion_of_healing"
                        else:
                            potion = "potion"
                        inventory.add(potion)
                        char_animation(f"You buy a {potion.replace('_',' ')}.")
                    else:
                        char_animation("You don't have enough credits")
                elif choice == 'b':
                    if credits >= 50:
                        credits -= 50
                        inventory.add("thing_a_ma_jig")
                        char_animation("You buy a thing-a-ma-jig.")
                    else:
                        char_animation("You don't have enough credits")
                elif choice == 'c':
                    if credits >= 100:
                        credits -= 100
                        inventory.add("enchantmentBook Fire")
                        char_animation("You buy an enchantment book of fire.")
                    else:
                        char_animation("You don't have enough credits")
            elif choice == 'b':
                char_animation("\nSure! Answer the following questions to earn credits: ")
                question, answers = randchoice(MYTHOLOGY_QUESTIONS)
                char_animation(f"  {question}")
                correct_answer = answers[0]
                answers = shuffle(answers)
                for i,item in enumerate(answers):
                    char_animation(f"{i+1}. {item}")
                
                response = get_char_animation_in("Answer: ",accepted={0:["1"],1:["2"],2:["3"],3:["4"]})
                if answers[response] == correct_answer:
                    gold_gain = randint(1,10)
                    credits += gold_gain
                    if randint(1,3) == 2:
                        char_animation(f"Great you won {gold_gain} credits and {gold_gain} gold too!")
                        gold += gold_gain//2
                    else:
                        char_animation(f"Great you won {gold_gain} credits!")
                else:
                    char_animation("Sorry, that's not the correct answer.")
                    char_animation(f"The correct answer was: {correct_answer}")


        elif choice == 'd':
            situtation = 10

        elif choice == 'e':
            char_animation("\nEarn Credits!")
            amt = play_trivia()
            char_animation(f"+{amt} credits")

    elif situtation == 15: #Castle - Start of book 2!
        char_animation("\n\nCastle of the Day Before")
        if situtation not in been_in_situations:
            char_animation("You walk towards the old castle and see a man running in fear!")
            char_animation("He screams at you: 'Run! Save yourself! The mage is crazy!")
            char_animation("\nAlthough you are shaken, you continue walking towards the castle.")
            char_animation("It is your only hope to return to your physical form.")
            char_animation("You reach the castle. It is old and crumbling. It is a shadow of its old glory.")
            if get_karma('beaten_rahas') == 1:
                char_animation("It would have been grander than even the Royal Palatium's Palace. Infact the Royal Palatium seems to have been modeled after this...")

            char_animation(f"You walk in and see nothing...{PAUSE*2}nothing but darkness...")
            char_animation(f"You hear a voice: 'Welcome {NAME}. I have been waiting for you.'")

            char_animation("You see a ghostly figure infront of you - almost like you but somehow even more ghostly.")
            char_animation("I am here to answer your questions and help you on your journey.")

            char_animation("What do you ask?")
            potential_questions = [
                ("Who are you?", "I am the mage of the Good King."),
                ("What are you?", "I am an apparation, unlike you. You see as an apparation I am temporarily projecting myself in this plane of existence - the physical world. I am actually in the After Realm."),
                ("What am I?", "You are a ghost. You are still in the physical plane. However, your plane of existence has been closed of by the Nether Staff - the staff of Rahas."),
                ("How do I get back?", "To enter back into the physical world, you must destroy the boundary between your enclosed plane and the physical plane - that is destroy the Nether Staff.")
                ("Who created the Nether Staff?", f"The Nether Staff is as Old as Time itself - as for who created it{PAUSE*3} - an unspeakable evil.")
            ]
            if get_karma('beaten_rahas') == 1:
                potential_questions.append(("Who does the Warrior work for?", f"Who the Warrior works for {PAUSE*3}I do not know."))
            else:
                potential_questions.append(("What turned me into this?", "That I do not know. However the thing that has trapped you in this alternate plane of existence is the Nether Staff."))
            while True:
                char_animation("\n\n")
                for i,question in enumerate(potential_questions):
                    char_animation(f"{(i+1)}) {question[0]}")
                char_animation("What would you like to ask?")
                while True:
                    choice = char_animation_in("Enter your choice: ")
                    try:
                        choice = int(choice)
                        if choice >= 1 and choice <= len(potential_questions):
                            break
                    except:
                        None
                    char_animation("Invalid choice.")

                char_animation("You ask: " + potential_questions[choice-1][0])
                char_animation("He replies: " + potential_questions[choice-1][1])
                potential_questions.pop(choice-1)
                if len(potential_questions) == 0:
                    break
            
            char_animation("'What do I do now?', you ask.")
            char_animation("The only thing which can destroy the Nether Staff is the Aether Staff - the opposite staff of the Nether Staff. When in contact, they will both annihilate each other.")

            char_animation("The Aether staff can be found in the Sanctuary of Dragons. It is the place where the Arch Dragons lived eons ago.")
            char_animation("You must go to the Sanctuary of Dragons and retrieve the Aether Staff, what surprises are there, you will see.")
            char_animation(f"You leave for the Dragon Sanctuary, curious of what you will find{PAUSE}.{PAUSE}.{PAUSE}. and what you will face.")
            
            char_animation("\nYou reach the Sanctuary of Dragons and see a large golden gate. The gate is as tall as the sky itself.")
            char_animation("You step towards the gate and it opens itself.")
            char_animation("You walk in and see the large podium in front of you - The remenants of the Arch Dragon Council.")
            char_animation("You see the Aether Staff in the center of the podium.")
            char_animation("You walk towards it but as you reach it, it zaps you and you are thrown back.")
            char_animation("You hear a deep ancient voice, coming from.{PAUSE}.{PAUSE}. inside you head: 'You want the Aether Staff? Why?'")
            char_animation("You reply: 'I need it to destroy the Nether Staff and free myself from this ghostly plane of existence. Who are you?'")
            char_animation("'I am the Arch Dragon Neiflam. I am the guardian of the Aether Staff.'")
            char_animation("'We Arch Dragons live outside of your plane of existence in the Draconic Realm. Here time is non existant. In your mortal terms I suppose I can look into the future.'")
            char_animation("'I see you are on a quest, but head my warning - Your enemy is not who you think it is.'")
            
            char_animation("\n'And for my part I will tell you the story of the Aether and Nether Staff.'")
            char_animation("'We Arch Dragons lived in peace with humans for eons. One day however one of us - Malcor grew restless.'")
            char_animation("'He wanted to rule over the humans and the Arch Dragons. He created the Nether Staff - a staff which could trap souls in an alternate plane of existence.'")
            char_animation("'He turned on us and we were routed. He would have destroyed all of us if it wasn't for Kallisto - his love.'")
            char_animation("'She created a staff - equal yet opposite to the Nether Staff - the Aether Staff.'")
            char_animation("'She held him off while we Arch Dragons escaped to the Draconic Realm - sealing ourselves off.'")
            char_animation("'Kallisto sacrificed herself to save the rest of our kind. She defeated Malcor - at the cost of her own life.'")

            char_animation("\n'You must realise that the Aether Staff and Nether Staff are linked far beyond what you can comprehend. In a crude sense you could call it love.'")
            char_animation("'Here take the Aether Staff but be warned - you are playing with powers you do not know.'")
            char_animation("Here is another useful thing - the Aether Staff always points towards the Nether Staff.")
            
            char_animation("\nBut how will I pick up the Aether Staff? I am a ghost.")
            char_animation("The Aether Staff is made up of hard stone - All entities from all planes of this Realm can touch it.")
            char_animation("Similarly beware - hardstone swords can hurt you, and you cannot pass through hardstone walls.")

            char_animation("\nYou take the Aether Staff and feel an undescriable power surge through you. You leave the Sanctuary of Dragons to the place the Aether Staff calls you to.")
            char_animation(f"You venture through the forest for a while{PAUSE*2}.{PAUSE*2}.{PAUSE*2}.{PAUSE*2} and reach a clearing.")
            char_animation("In the clearing is a small cottage house. You walk near it and gaze through the window. You see the Warrior standing there.")
            char_animation("Next to him is the Nether Staff. He is wearing hardstone armor and holding a shining hardstone sword.")

            char_animation("You think of multiple plans to get the Nether Staff. What do you do?")
            char_animation("1. Attack him, take the Nether Staff and run")
            char_animation("2. Create a distraction and take the Nether Staff")
            char_animation("3. Talk to him and try to convince him to give you the Nether Staff")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','attack'],'b':['2','distraction'],'c':['3','talk']})
            if choice == 'c':
                char_animation("You walk up to the door and knock. He opens the door and looks at you in disbelief.")
                char_animation(" 'Are you dumb walking upto me like that... You do know that hardstone can hurt you right? Never mind, I'll show you!'")
                char_animation("With a single blow he knocks you out onto the ground.")
            elif choice == 'a':
                char_animation("You run through the door and attack him with the Aether Staff.")
                char_animation("Without missing a beat he whips around and kicks you out of the cottage with a single blow.")
                char_animation("You shoot through the window and land on the ground.")
            elif choice == 'b':
                char_animation("You create a distraction by zapping a rock through the cottage with the Aether Staff.")
                char_animation("He runs out to see what happened. You run into the cottage. As you are about to enter, you are pulled back.")
                char_animation("He uses his hardstone gloves to pull you back. You are thrown out of the cottage onto the ground.")
            
            char_animation("He runs at you with fury, hardstone sword in hand.")
            char_animation("You get up and run at him with the Aether Staff. You feel its power coursing through your veins.")
            
            char_animation("\n\nThe battle begins!\n")
            DIFFICULTY_BOSS *= 1.3 #Increase the difficulty by 30%
            done = not real_fight_rahas(boss_health = 120, player_health = 4) #Increase boss health and reduce player health
            while done:
                char_animation("Sorry you lost!")
                char_animation_in("Press enter to try again...")
                done = not real_fight_rahas(boss_health = 120, player_health = 4) #Increase boss health and reduce player health

            DIFFICULTY_BOSS /= 1.3 #Reset the difficulty
            
            char_animation("You fight him off! He is struck by your blow and he bleeds dark purple blood. He is defeated for now...")
            char_animation("You run into the cottage and grab the Nether Staff and run off into the forest.")
            char_animation(f"{PAUSE*4}")
            char_animation("Thats when you realise - the Warrior has one more trick up his sleeve.")
            char_animation("His cottage isn't in a random clearing - it is in the middle of the Labrynith!")

            play_maze()
            
            char_animation("You clear through the labrynith and are standing outside the forest, on the path to the Castle of the Day Before.")
            char_animation("You put the Aether Staff and Nether Staff together and they both annihilate each other.")
            char_animation("You feel a surge of energy flow through you...")
            char_animation("You see some visions: ")
            char_animation("A dark dragon flying through the sky with a white dragon.")
            char_animation("The dark dragon now has purple eyes and is attacking the white dragon.")
            char_animation("The white dragon is slayed.")
            char_animation("The dark dragon is filled with grief.")
            char_animation(PAUSE*5)
            char_animation("And just as quickly as the visions came, they went away. You fade back into the physical world.")
            char_animation("You are back in the physical world. You have successfully freed yourself!")

            char_animation(PAUSE*5)
            char_animation("You walk towards the Castle of the Day Before...")
            char_animation("You are bursting with excitement and try to find the mage. You can't find him.")
            char_animation("You look throughout the castle but he is nowhere to be found. That is when you see a letter from the mage: ")

            char_animation("Dear {NAME},")
            char_animation(" I am writing this at the time of Malcor the Dragon is taking over the surface world.")
            char_animation(" He has killed the great Arch Dragon Kallisto and has taken over the Mortal Realm.")
            char_animation(" He has created Rahas - a being of pure evil. Rahas literally means evil.")
            char_animation(" My death is all but guaranteed. And there is no way to contact you once I have passed.")
            char_animation(" I have left you all that I have - my castle.")
            char_animation(" It is quite powerful - you can go into the past with it, although you will be a weak apparation.")
            char_animation(" Stand infront of my mirror and say - 'convertat horologium' to go back in time.")
            char_animation(" I hope you have much better luck than I did.")
            char_animation(" Goodbye,")
            char_animation(" The Mage of the Good King - The Mage of the Day Before")

            char_animation("You realise that the apparation you saw wasn't of the mage.")
            ans = char_animation_in("It was of: ")
            for i in range(0,10):
                if 'me' in ans.lower() or 'i' in ans.lower():
                    break
                ans = char_animation_in("Nope what you realised is that it was of: ")

            char_animation("You realise you were the apparation. You check the closet and find some of his clothes.")
            ans = char_animation_in("You stand infront of the mirror and say: ")
            while True:
                if ans.lower() == 'convertat horologium':
                    break
                char_animation("The mirror does nothing. You try again.")
                ans = char_animation_in("You stand infront of the mirror and say: ")
            
            char_animation("You feel a deep pull in your gut and you are sucked into the mirror.")
            char_animation("You are at the castle entrance. You see yourself walking towards the castle - still a ghost.")
            char_animation("You answer your questions and come back to the present.")

            char_animation("What do you do now?: ")
            char_animation("1. Go back in time and help the mage")
            char_animation("2. Go to the Dragon Sanctuary and ask Neiflam for help")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','time'],'b':['2','sanctuary']})
            if choice == 'a':
                #Close up and plot holes showing that time travel happens in a closed loop, i.e. what happenes always happened.
                char_animation("You go back in time and see the mage.")
                char_animation("You say: 'I am here to help you. I am the chosen one. I can save you.'")
                char_animation_in("You say: ")
                char_animation("The mage looks at you and says: 'Haha, I understand. But my time is up. You will have more success in the future.'")
                char_animation("He waves his hand and you are pulled back through the mirror - into the future.")
            
            char_animation("You start walking towards the Dragon Sanctuary. Determined to find Neiflam and defeat Malcor.")
            
            char_animation("You reach the Dragon Sanctuary and see the large golden gate.")
            char_animation("You walk towards it and it opens itself.")
            char_animation("You mutter to youself: 'I'll never get used to that.'")
            char_animation("You walk onto the podium and Neiflam appears.")
            char_animation("He says: 'What you seek is impossible. You cannot kill Malcor.'")
            char_animation("You say: 'I have to try. I have to save the world.'")
            char_animation(f"'Saving the world on the other hand... {PAUSE*3}that is a different story.'")
            char_animation("'You see you cannot kill Malcor. You can however imprison him.'")
            char_animation("'You can use the Inretial Spell - a spell which will imprison almost any being in the Never Realm.'")
            char_animation("'The Never Realm is a phrophesiced place - a place which is neither here nor there. Even we Arch Dragons do not understand it.")
            char_animation("'Creating a portal there is simple enough. Say the Incantation: ")
            char_animation("'numquam semper'")
            char_animation("With 3 objects near you: ")
            char_animation("1. A source of power to fuel the spell")
            char_animation("2. A source of balance to allow transport to the Never Realm - a place of balance")
            char_animation("3. A source of difference - something which is from a different realm.")

            char_animation("You must find these 3 objects and then you can imprison Malcor.")
            char_animation("Once you have all 3 objects, go the the Entrance of the Royal Palatium. You will find the path to Malcor's lair there.")
            char_animation("Which would you like to learn more about?")

            potential_questions = []
            potential_questions.append(( "The source of power",
                    "The only source of power powerful enough to fuel the spell is the heart of an arch dragon",
                    "The heart of a dragon must be taken from the only other arch dragon - Kallisto.",
                    "Kallisto's body will not have decayed. You must find her heart - it is in Malcor's lair."
                ))
            potential_questions.append(( "The source of balance",
                    "The source of balance is required to allow transport to the Never Realm.",
                    "The Never Realm you see is the first realm - the home of the good and evil spirit.",
                    "You must take someone who has been both good and evil..."
                ))
            potential_questions.append(( "The source of difference",
                    "The source of difference is required to allow transport to a different Realm",
                    "But this is the simplest - a single drop of your blood will suffice.",
                    "You are from a different realm and so your blood will work"
            ))
            while True:
                char_animation("\n\n")
                for i,question in enumerate(potential_questions):
                    char_animation(f"{(i+1)}) {question[0]}")
                char_animation("What would you like to ask?")
                while True:
                    choice = char_animation_in("Enter your choice: ")
                    try:
                        choice = int(choice)
                        if choice >= 1 and choice <= len(potential_questions):
                            break
                    except:
                        None
                    char_animation("Invalid choice.")

                char_animation("You ask: " + potential_questions[choice-1][0])
                char_animation("He replies: " + potential_questions[choice-1][1])
                char_animation("He continues: " + potential_questions[choice-1][2])
                char_animation("He finishes: " + potential_questions[choice-1][3])
                potential_questions.pop(choice-1)
                if len(potential_questions) == 0:
                    break

            char_animation("You thank Neiflam and start your journey to find the 3 objects.")
            char_animation("Which object would you like to find first?")
            char_animation("1. The source of power - Kallisto's heart. You must go to the library to find out where Kallisto's body is.")
            char_animation("2. The source of balance - Someone who has been both good and evil. You must ask around, maybe the town square?")

            choice = get_char_animation_in("Where would you like to go? ",{'a':['1','power'],'b':['2','balance']})
            if choice == 'a':
                situtation = 19
            elif choice == 'b':
                situtation = 20
            
            previous_choices['needs_answers_to'] = 1
            previous_choices['king_replay'] = 1
            been_in_situations.add(15)
    
    elif situtation == 18: # Royal Palatium
        char_animation("\n\nRoyal Palatium")
        
        char_animation("Where would you like to go?")
        char_animation("1. Royal Palace")
        char_animation("2. Town Square")
        char_animation("3. Shops")
        char_animation("4. Town")
        if get_karma("spell_p1") == 1 and get_karma("needs_answers_to") == 0:
            char_animation("5. Head to Dragon's Lair to take down Malcor!")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','palace'],'b':['2','square'],'c':['3','shops'],'d':['4','town'],'e':['5','lair']})
        else:
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','palace'],'b':['2','square'],'c':['3','shops'],'d':['4','town']})

        if choice == 'a':
            situtation = 19
        elif choice == 'b':
            situtation = 20
        elif choice == 'c':
            char_animation("Welcome to the Royale Market!")
            char_animation("Today's selection includes: ")
            char_animation("1. Potion of Strength (200 gold)")
            char_animation("2. Wierd trinket?? (99 gold)")
            char_animation("3. Enchanted Book of Fire (300 gold)")
            char_animation("4. Enchanted Book of Poison (300 gold)")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','strength'],'b':['2','trinket'],'c':['3','fire'],'d':['4','poison']})
            if choice == 'a':
                if gold >= 200:
                    gold -= 200
                    inventory.add("potion_of_strength")
                    char_animation("You buy a potion of strength")
                else:
                    char_animation("You don't have enough gold")
            elif choice == 'b':
                if gold >= 99:
                    gold -= 99
                    inventory.add("weird_trinket")
                    char_animation("You buy a weird trinket")
                else:
                    char_animation("You don't have enough gold")
            elif choice == 'c':
                if gold >= 300:
                    gold -= 300
                    inventory.add("enchantmentBook Fire")
                    char_animation("You buy an enchanted book of fire")
                else:
                    char_animation("You don't have enough gold")
            elif choice == 'd':
                if gold >= 300:
                    gold -= 300
                    inventory.add("enchantmentBook Poison")
                    char_animation("You buy an enchanted book of poison")
                else:
                    char_animation("You don't have enough gold")

        elif choice == 'd':
            situtation = 10
        
        elif choice == 'e':
            situtation = 30

    elif situtation == 19: #Royal Palace
        if get_karma("ready_to_attack") != 1:
            char_animation("You walk into the Royal Palace and see the red cloaked guards standing there.")
            char_animation("They don't allow you to enter.")

        char_animation("\n\nRoyal Palace")
        if 19 not in been_in_situations:
            char_animation("You are outside the Royal palace. The guards are standing outside.")
            char_animation("The warrior says 'I'll distract them. You go in.'")
            char_animation("He walks up to the guards and starts talking to them.")
            char_animation("You sneak in, Caroline leads you to the throne room.")
            char_animation("On your way a battalion of guards spot you, they run at you!")
            char_animation(f"{PAUSE}John, Igor and Twilia stay back to fight them. You Caroline and Helen run forward.")
            char_animation("You reach the throne room and see the red cloaked warriors standing outside it. Caroline turns into a wild-beast and attacks them.")
            char_animation("This is your chance and you and Helen run into the throne room.")

            char_animation("\nYou see King Rahas - he is cloaked and sitting on the throne. His purple staff has a skull on it. He looks at you and says: 'You dare enter my palace?'")
            char_animation("You say: 'Yes, I do. I am here to overthrow you.'")
            char_animation("Rahas removes his cloak and you see his face - he has a pale face with deep blue eyes.")

            char_animation("\nHe transforms into a 20 foot tall giant. His staff glowing with power. His eyes glowing blue. He says: 'You think you can defeat me?'")
            char_animation("He raises his staff and 5 fireballs appear hurling at you, you dodge them all.")

            char_animation("\nYou drink the potion of strength and feel a surge of power. You feel like you can take on the world.")
            char_animation("Helen says - 'I'll heal you if you get hurt.'")

            char_animation("\nYou run at Rahas and attack him.")

            char_animation("\n\nThe battle begins!\n")
            
            outcome = True
            while outcome:
                outcome = not real_fight_rahas()
                if outcome: #If you lose
                    char_animation("You lose the battle.")
                    char_animation_in("Press enter to try again...")
                    char_animation("\n\n")
            
            char_animation(f"He is weakened.")
            if silver_bullet == "potion_of_supe":
                char_animation("You drink the Potion of Supe and feel power surge through you. Your eyes become red hot and you shoot lasers out of your eyes.")
                char_animation("With a single blast of all the power you can muster, you shoot a blast of lasers.")
            elif silver_bullet == "potion_of_soul":
                char_animation("You throw the potion of soul at him.")
                char_animation("It hits him and it explodes. A bright light fills the room as his soul is destroyed.")
            elif silver_bullet == "cursed_obsidian_shard":
                char_animation("You throw the cursed obsidian shard at him.")
                char_animation("It hits him and he looks at you in shock. His whole body starts to glow purple.")
            elif silver_bullet == "flitstone_bomb":
                char_animation("You throw the flitstone bomb at him.")
                char_animation("It hits him and he is in shock for a fraction of a second. Then the bomb explodes with a blinding light.")
            
            if silver_bullet != "flitstone_bomb":
                char_animation("He explodes with a blinding light")

            char_animation("The smoke clears and you see the throne room. The red guards explode into dust. Rahas is no where to be seen! You have defeated the tyrant Rahas!")
            char_animation("The people of the city cheer and you are hailed as the hero of the city.")

            char_animation("\nThe good king's grandson becomes the new king. The city is in good hands.")

            char_animation(f"{PAUSE*5}")
            char_animation("\nYou later walk into the secret base. You see the wizard lying on the floor blood coming out of his robes.")
            char_animation("You run to him and ask him what happened but its too late.")
            char_animation("You turn around and see - the Warrior.")
            char_animation("He looks at you laughing and says - You think you won because you defeated Rahas?")
            char_animation("You look at him confused - then you see Rahas's staff in his hand.")
            char_animation("He says - 'Rahas was but a pawn - I serve a greater master. And soon you shall too.'")

            char_animation("He raises the staff and you feel a pain in your head. It radiates throughout your body.")
            char_animation("You black out. When you come to you realise you aren't dead. But you aren't quite alive either.")
            char_animation("You are a ghost. You hear the warrior's laugh echoing thorugh your head.")
            char_animation("You head back to the town... you feel the shopkeeper can help you!")
            
            previous_choices['beaten_rahas'] = 1
            situtation = 10
            career = GHOST
            been_in_situations.add(19)
            char_animation("\nYou have completed book 1! Are you liking it?")
            char_animation("1. Yes")
            char_animation("2. No")
            choice = get_char_animation_in("Enter your choice: ",{'a':['yes','1'],'b':['no','2']}, allow_save=True)
            if choice == 'b':
                char_animation("I'm sorry to hear that.")
            elif choice == 'a':
                char_animation("I'm glad you are enjoying it!")
            char_animation("If you would like to contribute check out TitanStar73/textadventure on github!")            
            continue

        char_animation("Where would you like to go?")
        char_animation("1. Throne Room")
        char_animation("2. Royal Gardens")
        char_animation("3. Royal Library")
        char_animation("4. Back to the Royal Palatium Entrance")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','throne'],'b':['2','gardens'],'c':['3','library'], 'd':['4','entrance']})
        if choice == 'a':
            char_animation("You walk into the throne room and see the Good King's grandson - Endymion on the throne.")
            char_animation("He smiles at you and says: 'Thank you for saving the city. You are a true hero.'")
        elif choice == 'b':
            char_animation("You walk into the Royal Gardens and see the beautiful flowers and trees.")
            reference_date = datetime.datetime(2024, 1, 1, tzinfo=datetime.UTC)
            current_date = datetime.datetime.now(datetime.UTC)
            seconds_since = (current_date - reference_date).total_seconds()

            if seconds_since - int(previous_choices['gold_flower_regen']) > GOLD_FLOWER_REGEN:
                char_animation("You see a gold rose. Do you pick it up?")
                char_animation("1. Yes")
                char_animation("2. No")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
                if choice == 'a':
                    inventory.add("gold_rose")
                    char_animation("You pick up the gold rose.")
                    previous_choices['gold_rose'] = str(seconds_since)

        elif choice == 'c':
            char_animation("You walk into the Royal Library and see the books and scrolls.")
            char_animation("If you have a particular question, you can come here and get the answer.")
            if int(get_karma('needs_answers_to')) in ROYAL_LIBRARY_QUESTIONS:
                char_animation("You need the answer to: ", end = '')
                char_animation(ROYAL_LIBRARY_QUESTIONS[int(get_karma('needs_answers_to'))][0])
                char_animation("You find a book with the answer: ")
                char_animation(ROYAL_LIBRARY_QUESTIONS[int(get_karma('needs_answers_to'))][1])
                previous_choices['needs_answers_to'] = 0

        elif choice == 'd':
            situtation = 18

    elif situtation == 20: #Town Square
        char_animation("\n\nTown Square")
        if 20 not in been_in_situations:
            char_animation("You walk into the town square of the Royal Pallatium.")
            char_animation("You see a lot of people walking around.")
            char_animation("Suddenly you hear the sound of the approach of horses - and screams that follow.")
            char_animation("The horses stop in front of a shop and the red cloaked knights get down.")
            char_animation("They violently enter and grab the shopkeeper by the scruff.")
            char_animation("In a ominous voice, the leader says: 'You haven't been paying your dues. If we don't get it by tomorrow, we will burn down your shop'")
            char_animation("The shopkeeper pleads with them and they leave.")

            char_animation("You walk up to the shopkeeper and ask him what happened.")
            char_animation("He explains: ")
            char_animation(" The red cloaked knights are King Rahas's personal guards. They were enforcing the new tax law which increased the taxes.")
            char_animation(" They went from 88% to 93% of the my earnings. The King has been increasing taxes for years now. I can barely feed myself.")
            char_animation(" It used to be better. My grand father told me stories. The King Galaad use to rule the Pallatium a hundred years ago. He was a good just king.")
            char_animation(" He was overthrown by King Rahas. No on dares speak against him. He has spies everywhere. He looks at you for a moment.")
            char_animation(" Nah you aren't a spy, you don't look like you are from here. No one has been able to overthrow Rahas.")
            char_animation(" They say he is invulnerable and immortal. He looks the same now as he did a hundred years ago.")

            char_animation("You ask him: 'What can I do to help?'")

            char_animation("He says: 'You can't do anything. No one can. Just leave. Leave this place. It's not safe here.'")

            char_animation("You continue walking when you hear a voice: 'Hey! Were you serious about helping?'")

            char_animation("You turn and see a cat standing there. You reply at it hesitantly:'Yes...' not sure if you heard it right.")
            char_animation("She says: 'I know a way to overthrow the King. But I need your help.' The cat was talking!")
            char_animation("She starts running and you follow her.")

            char_animation("She takes you threw the alley ways of the town. Left {PAUSE} right {PAUSE} left {PAUSE} right... you lose track")
            char_animation("She takes you to a small secluded house. She knocks on the door: rat-a-tat-tat")
            char_animation("The door opens and you see a old Wizard - He looks at you and says: Welcome. We've been expecting you.")
            
            char_animation("You are taken into the house and see a group of people sitting around a table. The cat jumps onto a chair and transforms into a red-haired girl.")
            char_animation("Everyone introduces themselves: ")
            char_animation(" The Wizard: An old man with a long white beard. He is an expert wizard, capable of casting the most complex spells.")
            char_animation(" Caroline: The shapeshifter. She can transform into anything")
            char_animation(f" John: The blacksmith. He can make and fix weapons and armor.{' (But you alread now him)' if get_karma('met_john') == 1 else ''}")
            char_animation(" Helen: The healer. She can heal any wound.")
            char_animation_in(f" And you. You introduce yourself as: {NAME}. I am ")
            char_animation("The Wizard says: 'We are the resistance. We are fighting against King Rahas. We think you could change everything.'")

            char_animation(PAUSE*3)
            char_animation("\n\nThe Wizard explains: 'King Rahas has been increasing taxes for years. He has spies everywhere. He is immortal and invulnerable. But there is one who has been prophecised to be his equal.'")
            char_animation("'An outsider' it is said will come and overthrow the King. We didn't know what it meant.")
            jumbled = jumble_name(NAME)
            char_animation(f"The prophecy talked about {jumbled}. We didn't know what that meant. But now we do.")
            if NAME != jumbled:
                char_animation(f"It is your name jumbled up!")
            
            char_animation("We need you to help us. We need you to overthrow the King. We need you to save the Pallatium. You can save us!")

            char_animation("What do you say?")
            char_animation("1. Yes")
            char_animation("2. No :(")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
            if choice == 'b':
                while True:
                    char_animation(randchoice([
                        "Caroline looks at you and says: 'I understand. It's a big ask. Put please thing of the people': ",
                        "Helen says: 'I understand. But trust me helping people is the best feeling in the world': ",
                        "John says: 'I understand. But remember the King is a tyrant. He will kill us all if we don't stop him. Cmon what do you say?: '"
                        "The Wizard says: 'I understand. You are scared. But remember the prophecy. You are his equal.'"
                    ]))
                    char_animation("1. Yes")
                    char_animation("2. No")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
                    if choice == 'a':
                        break
            
            char_animation("You say: 'Yes, I will help you.'")
            char_animation("Great! Lets start")

            char_animation("You ask: 'But how will we beat a immortal, invulnerable King?'")
            char_animation("The Wizard says: 'He is immortal - but not invulnerable. He can be killed through magical means.'")
            char_animation("He can be killed using several ways. But first - we must make you stronger")
            char_animation("You must procure a strength potion. With it you will be strong enough to hold your own against the king.")
            char_animation("You must then meet us back here. I think your friends Igor and Twilia can help.")

            previous_choices['needs_opal'] == 1

            been_in_situations.add(20)

        char_animation("Where would you like to go?")
        char_animation("1. Back to entrance")
        char_animation("2. To secret base")
        if int(previous_choices['king_replay']) == 1:
            char_animation("3. To Caroline who says she knows something...")
            choice = get_char_animation_in("Enter choice: ", {'a': ['1', 'entrance'], 'b':['2','secret','base'], 'c':['3','caroline']}, allow_save=True)
        else:
            choice = get_char_animation_in("Enter choice: ", {'a': ['1', 'entrance'], 'b':['2','secret','base']}, allow_save=True)

        if choice == 'a':
            situtation = 18
        elif choice == 'b':
            situtation = 21
        elif choice == 'c':
            char_animation("You walk up to Caroline and ask her what she knows.")
            char_animation("She says: 'I know why the Warrior attacked you!'")
            char_animation("You ask: 'Why?'")
            char_animation("'He isn't who we thought he was. He works for Malcor the evil Dragon. Malcor was the one who created Rahas.'")
            char_animation("'All of this I know...'")
            char_animation("'Yes but this is what you don't know. Check this out' she says handing you a book.")
            char_animation("In it is a picture of the Warrior")
            char_animation("Under it a single caption: 'The Good King'")
            char_animation("You look at her in shock.")
            char_animation("She says: 'The Good King never died it appears. Or atleast he was brought back'")
            char_animation("'It seems that Malcor has been controlling him all this time. Rahas was never the true enemy.'")
            char_animation("You say: 'But wait, if the Good King used to be good but now is evil - he is the source of balance!'")
            char_animation("'I need to find him and take a hair or something from him. He is the key to defeating Malcor.'")
            
            char_animation("You tell Caroline: 'Thanks for your help. I will head back to the forest to try and find the Warrior, I mean the Good King'")
            char_animation("As you are walking away she comes after you and says: 'Wait! I'll come with you!'")

            char_animation("\nDo you accept her help?")
            char_animation("1. Yes, she will be a valuable asset")
            char_animation("2. No, she is safer here")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
            if choice == 'a':
                char_animation("You say: 'Yes, you can come with me.'")
                char_animation("She smiles and says: 'Great! Lets go!'")
                previous_choices['caroline_with'] = 1
            elif choice == 'b':
                char_animation("You say: 'No, you are safer here.'")
                char_animation("She looks at you and says: 'I understand, Ill be here if you need help.'")
                previous_choices['caroline_with'] = 0
            
            char_animation("You head towards the forest...")
            char_animation("As you enter the forest you are tired. You sit down and rest.")
            if previous_choices['caroline_with'] == 1:
                char_animation("Caroline says: 'I'll get some water, you wait here.'")
            
            char_animation("As you sit there, you wonder about the Good King. He was so good, yet he was turned evil.")
            char_animation("What if Malcor turned me evil...")
            char_animation("You shake your head. Such thoughts are dangerous.")
            
            char_animation("\nAs you are resting you hear a growl behind you.")
            char_animation("You turn around and see a giant wolf. It is snarling at you.")
            char_animation("You stand up and it lunges at you.")
            char_animation("What do you do?")
            char_animation("1. Fight it")
            char_animation("2. Run away")
            char_animation("3. Climb up a tree")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','fight'],'b':['2','run'],'c':['3','climb']})
            
            if choice == 'b':
                char_animation("You try to run away from the wolf")
                char_animation("It is far faster than you.")
                char_animation("You have no choice but to: ")
                char_animation("1. Fight it")
                char_animation("2. Climb up a tree")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','fight'],'c':['2','climb']})
            
            if choice == 'a':
                if 'sword' in inventory:
                    char_animation("You take out your sword and fight the wolf.")
                    char_animation("You attack it with your sword but it slashes right off.")
                    char_animation("You remember, blood wolves are invulnerable to ordinary weapons.")
                if 'potion' in inventory:
                    char_animation("You take out a potion of harming and throw it at the wolf.")
                    char_animation("The wolf appears irritated at best.")
                    char_animation("It appears that the wolf is invulnerable to most magic", end = '')
                    if 'sword' in inventory:
                        char_animation(" too!")
                    else:
                        char_animation("!")
                if 'sword' not in inventory and 'potion' not in inventory:
                    char_animation("You try to fight the wolf with a stick you pick up.")
                    char_animation("It bites the stick and throws it away.")
                char_animation("What do you do now?")
                char_animation("1. Run away")
                char_animation("2. Climb up a tree")
                choice = get_char_animation_in("Enter your choice: ",{'b':['1','run'],'c':['2','climb']})
            
            if choice == 'b':
                char_animation("You try running away from the wolf, but it quickly pounces on you.")
                char_animation("You close your eyes and wait for the end.")
                char_animation(f"{PAUSE}But it never comes.")

            if choice == 'c':
                char_animation("You try climbing up a tree but you trip and fall.")
                char_animation("The wolf lunges at you and you close your eyes.")

            char_animation("You open your eyes and you see a wildabeast attacking the wolf.")
            char_animation("It was a strange sight!")
            if previous_choices['caroline_with'] == 1:
                char_animation("Its Caroline! She is attacking the wolf.")
            
            char_animation("You get up and the wolf runs away, having been defeated by Caroline.")
            char_animation("The wildabeast turns back into Caroline", end = '')
            if previous_choices['caroline_with'] == 1:
                char_animation(".")
            else:
                char_animation("!")
                char_animation(f"'Me be safe?! Looks like I need to keep you safe {NAME}.', she exclaims.")
            
            char_animation("You thank her and you both continue down the path.")
            char_animation("You realise three things: ")
            char_animation("Caroline is amazing!")
            char_animation("You hate blood wolves (and they hate you)!")
            char_animation("You have reached the Warrior's cottage!")

            char_animation("What do you do?")
            char_animation("1. Knock on the door")
            char_animation("2. Sneak in")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','knock'],'b':['2','sneak']})

            if choice == 'a':
                char_animation("You knock on the door and the Warrior opens it, surprised to see you!")
            if choice == 'b':
                char_animation(f"You sneak in{PAUSE*3}.\nthe Warrior whurls around and sees you. He looks at you with disdain!")

            char_animation("You dare have the audacity to come here after what you did to me?!")
            char_animation("And I see you have destroyed the Nether Staff and are no longer a ghost.")
            char_animation("\nI am here in peace. All I want is a single strand of your hair!")

            char_animation("He looks at you and says: 'You think you can defeat my Lord? You think you can defeat me?'")
            ans = char_animation_in("You reply: ")
            if 'malcor' in ans.lower():
                char_animation("He looks at you and says: 'You dare speak his name!'")
            char_animation("You shall die!!!")

            fake_fight() #Fake fight, seems like a normal boss fight but Caroline becomes a wildabeast and ends it in like 3 seconds lol

            char_animation("Caroline/Wildabeast holds the Warrior down and you tie him up.")
            char_animation("You take a strand of his hair, and Caroline turns back into a human.")
            char_animation_in("You wittily tell the Warrior: ")
            char_animation("the Warrior looks at you with pure hatred. Caroline smirks with glee.")

            char_animation(f"\nYou head back to the Town Square...{PAUSE*3}")

            if get_karma('needs_answers_to') == 1:
                char_animation("'Great now all I need is to head to the library,' you say.")
            else:
                char_animation("'Great I am now ready to face Malcor!' you say.")

            previous_choices['spell_p1'] = 1

    elif situtation == 21: #Base part 1
        if ('strength_potion' not in inventory) and (not get_karma('beaten_rahas')):
            char_animation("Please get the strength potion to coninue!")
            continue

        if 21 not in been_in_situations:
            char_animation("The Wizard: Hey I see you've gotten the strength potion good job!")
            char_animation("Lets discuss the next course of action!")
            char_animation("Great now we need to get you a silver bullet to end the King's life.")

            char_animation("Which one would you like to get?")
            char_animation("1. Potion of Supe: This will give you a random super power")
            char_animation("2. Potion of Soul: This potion, when thrown on a person will rip their soul out of their body.")
            char_animation("3. Flitstone Bomb: This bomb contains flitstone. Flitstone is a rare stone that stops magic around it. This will temporarily stop Rahas's invulnerbility and the bomb will finsih him off.")
            char_animation("4. Cursed Obsidian Shard: A shard of obsidian is sharp. A shard of cursed obsidian is strong enough to wound and kill Rahas.")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','supe'],'b':['2','soul'],'c':['3','flitstone'],'d':['4','obsidian']})

            if choice == 'a':
                silver_bullet = "potion_of_supe"
                char_animation("Wizard: Great choice!")
                char_animation("It is made of simple ingredients - except one.")
                char_animation("I will have the potion ready. You must bring the last ingredient so that I can finish it.")
                char_animation("The last ingredient is the feather of a sphinx. You can find the sphinx in the endless desert.")
                char_animation_in("You start walking towards the desert...")

                char_animation(f"You reach the desert and start walking.{PAUSE}.{PAUSE}.{PAUSE} You finally see a dark figure in the distance.")
                char_animation("You walk towards it and see a giant lion's body - over 30 ft tall. It had massive wings the size of a house.")
                char_animation("The sphinx has the head of a woman. She looks at you and says: ")
                char_animation(" Why have you come to disturb me>")
                char_animation("You say: 'I need a feather from you. The people of Mythapoes need it to save themselves.'")
                char_animation("She says, 'And why do they deserve to be saved?'")
                char_animation_in("You say: ")
                char_animation("She looks at you and says: 'I will give you the feather if you can answer my riddle.'") 
                
                while True:
                    questions, answers = randchoice(MYTHOLOGY_QUESTIONS)
                    correct = answers[0]
                    answers = shuffle(answers)
                    char_animation(f"{randchoice(["Here is the question", "Answer this", "Lets see if you can get this"])}: {questions}")
                    for i,ans in enumerate(answers):
                        char_animation(f"{i+1}. {ans}")
                    choice = get_char_animation_in("Enter your choice: ",{0:['1'],1:['2'],2:['3'],3:['4']})
                    if answers[choice] == correct:
                        break
                    char_animation("The sphinx shakes her head and says... You are wrong. I'll give you another chance for your noble cause.")

                char_animation("\n\n'Good Job!' This sphinx exclaims.")
                char_animation("She plucks a feather from her wing and hands it to you.")
                char_animation("Despite her large size, the feather is small and soft.")
                char_animation("You thank her and head back to the Wizard.")

                char_animation(PAUSE*3)

                char_animation("You reach the base and hand him the feather.")
                char_animation("Just in time! The potion is ready!")

            elif choice == 'b':
                silver_bullet = "potion_of_soul"
                char_animation("Wizard: Great choice!")
                char_animation("It is made of common ingredients except one.")
                char_animation("You must get the venom of a death reaper snake, in the swamp. Beware, the snake's venom although is said to be worse than death.")

                char_animation("\nThe Wizard hands you a flask and gives you directions.")
                char_animation("You start walking towards the swamp...")
                char_animation(PAUSE*3)

                char_animation("You reach the swamp and walk through it cautiously.")
                char_animation("You hear a rustling and turn around. Its nothing, just your nerves.")
                char_animation("You turn back around. And see a flash of green coming at you.")
                if 'armor' in inventory:
                    char_animation("The snake's fangs rip through your armor like its paper.")
                
                char_animation("You feel a sharp pain in your leg. It is the most intense pain you have ever felt. You look down and see the snake slithering away.")
                char_animation("Almost as if mocking you, it goes to the lying open flask on the ground and puts a few drops of its venom in it. Showing you what you can't have.")

                char_animation("\nBut you are in too much pain to care. The pain is radiating through your body.")

                char_animation("\nYou start to feel dizzy. You fall to the ground. You can't move. You can't see. You can't hear.")
                char_animation(f"{PAUSE*3}And then its blackness. And then you wake up. Back in the swamp.")
                char_animation("But everything is different. The pain is gone. You can see, move and hear again. Everything has a green tint. Above you is a thick canopy of leaves. Around you trees so close they form a wall.")
                char_animation("You look for your flask but can't find it.")
                
                flag = False
                answer = char_animation_in("Thats when you realise: ")
                
                for _ in range(5):
                    for item in ['dream','hallucination','mind']:
                        if item in answer:
                            flag = True
                    if flag:
                        break
                    answer = char_animation("Nope. What you realise is: ")
                
                char_animation("You realise you are in your head, you get up and start walking. The trees shift around you.")
                char_animation("You realise you are in a maze.")

                play_maze()

                char_animation("You wake up wheezing. The pain in your leg is fading.")
                char_animation("The only thing to remember this encounter by, is the scar on your leg.")
                char_animation("You pick up the flask and see the venom in it.")
                char_animation(f"You head back to the Wizard.{PAUSE*3}")
                char_animation("You hand him the flask and he says: 'Good job! The potion is ready!'")

            elif choice == 'c':
                char_animation("The Wizard: Great choice!")
                char_animation("It is made of common ingredients except one - flitstone.")
                char_animation("You can only find it in the mines of the dwarves. They are mistrusting of humans since they were driven into the ground by Rahas.")
                char_animation("You must go and get a piece of flitstone.")

                char_animation("You start walking towards the mines according to the direction the Wizard gives you")

                char_animation(f"{PAUSE*3}\n\nYou reach the entrace. It is a huge cavern, with a large spiraling staircase.")
                char_animation("You walk down to find it abandoned. You walk for a few hours and see not a single soul in sight.")
                char_animation("The Wizard said that flitstone is red in color.")

                while True:
                    char_animation("\nFind the flitstone!")

                    squares = [[randint(0,1) for i in range(0,GRASS_DIFFICULTY)] for i in range(0,GRASS_DIFFICULTY)]
                    char_animation("Take a look at the map of flitstone deposits:")
                    for i in range(0,GRASS_DIFFICULTY):
                        for j in range(0,GRASS_DIFFICULTY):
                            if squares[i][j] == 1:
                                print(f" {RED}O{DEFAULT_COLOR} ", end='|')
                            else:
                                print(" O ", end='|')
                        print("")
                    
                    sleep(1)
                    print("3", end = " ", flush=True)
                    sleep(1)
                    print("2", end = " ", flush=True)
                    sleep(1)
                    print("2 and a half", end = " ", flush=True)
                    sleep(1)
                    print("1", flush=True)
                    sleep(1)
                    
                    print(f"\033[{GRASS_DIFFICULTY + 2}A", flush=True)
                    for i in range(0,GRASS_DIFFICULTY):
                        for j in range(0,GRASS_DIFFICULTY):
                            print(f" {i*GRASS_DIFFICULTY + j + 1} ", end='|')
                        print("")
                    
                    nums = char_animation_in("Enter the numbers which need to be mined (add a comma inbetween them): ")
                    nums = nums.split(",")
                    nums = [int(item.strip()) for item in nums]
                    flag = False
                    for i in range(0,GRASS_DIFFICULTY):
                        for j in range(0,GRASS_DIFFICULTY):
                            if ((i*GRASS_DIFFICULTY + j + 1) not in nums) and squares[i][j] == 1:
                                char_animation(f"Sorry, there was flitstone in {i*GRASS_DIFFICULTY + j + 1}")
                                flag = True
                            if ((i*GRASS_DIFFICULTY + j + 1) in nums) and squares[i][j] != 1:
                                char_animation(f"Sorry, there was no flitstone in {i*GRASS_DIFFICULTY + j + 1}")
                                flag = True
                            
                    
                    if flag:
                        char_animation("Sorry you didn't mine the flitstone well enough...")
                    else:
                        break

                char_animation("You mine the flintstone and head back to the Wizard.")
                char_animation("You hand him the flitstone and he says: 'Good job! The bomb is ready!'")

                silver_bullet = "flitstone_bomb"
            
            elif choice == 'd':
                char_animation("The Wizard: Great choice!")
                char_animation("Making such a throwing knife is easy... once you have a shard of Cursed Obsidian.")
                char_animation("This is a dark substance only found with the dark necromancer - Xeno the Mysterious.")

                char_animation("\nYou start walking towards the dark forest where Xeno is said to reside...")
                char_animation("You worry what he will do...")

                char_animation("\nYou reach the forest. It is dark and the trees are twisted...")
                char_animation("You walk through the forest for what seems like ages. That is when you see it - ")
                char_animation("A dark spire. You slowly start your ascent up it...")
                char_animation(f"It goes on {PAUSE} and on{PAUSE} and on{PAUSE}")
                char_animation("You finally reach the top and see a dark figure standing there.")
                char_animation("he turns around and you can't see his face... He says: 'You come here for a shard of cursed obsidian...'")
                char_animation("You say: {PAUSE}")
                char_animation("I know because I can read minds... Very well I will help you kill Rahas - but you must do something for me.")

                char_animation("You say: 'What do you want?'")

                char_animation("He chuckles and says: Tell me a story. A long and interesting one.")

                while True:
                    story = char_animation_in("Enter a story: ")
                    if len(story) < 200:
                        char_animation("Nope. Make it longer.")
                    elif len(set(story.split(" "))) < 50: #unique words
                        char_animation("Nope. Make it more interesting.")
                    else:
                        break
                
                char_animation("He says: 'Wow it has been long since I heard a story like this!'")
                char_animation("He gives you a shard of cursed obsidian. You thank him and leave.")

                char_animation("\nYou head back to the Wizard and hand him the shard.")
                char_animation("He quickly fashions a throwing blade with it.")
                silver_bullet = "cursed_obsidian_shard"
            
            char_animation("With your silver bullet ready, you prepare to face the King.")
            char_animation("Remember though - you can only use it once. Make sure you are ready.")
            char_animation("The wizard tells you, lets train a bit!")

            training_sequence()

            been_in_situations.add(21)
            
        situtation = 22
    
    elif situtation == 22: #Base part 2
        if 22 not in been_in_situations:
            char_animation("The Wizard: Great lets review the rest of the plan:")
            char_animation("1. We sneak into the Royal Palace. We'll all help you but at the end it will be you vs Rahas.")
            char_animation("2. You drink the strength potion and fight Rahas.")
            char_animation("3. Once he is weakened, you use the silver bullet to finish him off.")

            char_animation("\nOh by the way, here is your team who will come with you:")
            char_animation("1. Caroline: The shapeshifter. She can transform into anything")
            char_animation("2. John: The blacksmith. Besides fixing stuff, he is great at breaking stuff too!")
            char_animation("3. Helen: The healer. She'll heal you up if required. If you are low, look out for her heart power-ups on the map'")
            char_animation("4. Igor: The mage. He can cast spells and help you out.")
            char_animation("5. Twilia: Besides being a queen, she is a great archer.")
            char_animation("6. The Warrior: The warrior from the Arena, he is strong and will help you out!")

            char_animation("You are ready. Lets put our plan into action, and good luck!")
            previous_choices['ready_to_attack'] = 1
            been_in_situations.add(22)
            situtation = 19

            char_animation("Are you ready to attack?")
            char_animation("1. Yes")
            char_animation("2. Absolutely yes!")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','absolutely']}, allow_save=True)
            continue
        
        char_animation("Hey welcome to the secret base!")

        char_animation_in("Click enter to continue...")
        situtation = 20

    elif situtation == -1 and DEBUG_ALLOWED: #Debug
        print("Debug mode")
        print(f"Situtation: {situtation}")
        print(f"Morailty: {morailty}")
        print(f"Person Type: {person_type}")
        print(f"Career: {career}")
        print(f"Previous Choices: {previous_choices}")
        print(f"Gold: {gold}")
        print(f"Inventory: {inventory}")
        print(f"Autosave: {autosave}")
        print(f"Name: {NAME}")
        print(f"Been in Situations: {been_in_situations}")
        
        print("Would you like to edit anything?")
        choice = input("Enter your choice (y/n): ").lower()
        if choice in {'y','yes'}:
            while True:
                command = input(">>> ")
                if command == 'exit':
                    break
                else:
                    exec(command)
        
        situtation = int(input("Enter the new situtation: "))

    elif situtation == 30: #Dragon's Lair, Story time :)
        char_animation("You walk towards the lair of Malcor the Dragon.")
        char_animation("You see skulls and bones throughout the path there.")
        char_animation_in("You continue on{PAUSE}.{PAUSE}.{PAUSE}.")
        char_animation("You reach the entrance of the lair...")
        char_animation("It is a large cave with a huge opening. From it you sense pure evil...")
        char_animation_in("You walk in{PAUSE}.{PAUSE}.{PAUSE}.")

        char_animation("You see nothing in the pitch black darkness.")
        char_animation("You hear a dark voice: 'So you have come...'")
        char_animation("The voice is the most despicalbe evil voice you have ever heard.")
        char_animation("You try to move forward but you are petrified in your place.")

        char_animation("\nWhat do you do?")
        char_animation("1. Try to move forward")
        char_animation("2. Try to run away")
        char_animation("3. Scream at Malcor")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','move'],'b':['2','run'],'c':['3','scream']})
        if choice == 'a':
            char_animation("You try moving forward but your legs are firmly stuck on the ground.")
        if choice == 'b':
            char_animation("You try running away but you can't move, your legs are stuck firmly on the ground.")
        if choice in {'a','b'}:
            char_animation("Malcor laughs and says: 'You are but a mortal - you think you can defeat me?'")
            char_animation("'You can't even move!'")
        
        char_animation("You try to scream at Malcor but no sound comes out.")
        char_animation_in("Mustering all your courage you scream: ")
        char_animation("Malcor laughs evilly. He moves forward and you can see his eyes: ")
        char_animation("They are glazed with purple smoke. They are the most evil eyes you have ever seen.")

        ans = char_animation_in("You muster all your courage and scream: ")
        if 'kallisto' not in ans.lower():
            char_animation("Malcor breathes heavily and you feel the heat of his breath.")
            char_animation("He says: 'You amuse me...'")
            char_animation("You scream: 'How can you kill her?! How could you kill Kallisto - the love of your life?!'")
        
        char_animation(f"Malcor looks at you stunned for a second. {PAUSE*3}")
        char_animation("Malcor's eyes change - the smoke clears a bit.")
        char_animation("A new voice emerges out of him - one harshly different to the previous one - it is filled with kindness.")
        char_animation(f"'Ka{PAUSE}llis{PAUSE}to{PAUSE}. No {PAUSE*2}I could not have {PAUSE*3}killed her...' he says.")

        char_animation("You see a tear fall from his eye. But just as quickly as it came, it is gone.")
        char_animation("The smoke returns to his eyes and his voice returns to the evil one - 'ENOUGH!'")
        char_animation("He moves his head out of the darkness and you see his head - the most massive structure you have ever seen.")

        print(DRAGON_HEAD)

        char_animation("You are shocked at the sight of Malcor. Perhaps as a good thing, you are so scared you are no longer petrified into place.")
        char_animation(f"He blows fire at you - magical fire purple in color, you dash out of the way.")

        char_animation("He lunges at you and you dodge out of the way, skidding across the floor of the cavern.")
        char_animation("He stands above you... and you see him in his full glory.")

        print(DRAGON_CLOSEUP)

        char_animation("As he is about to strike you down - he stops. Hesitates for a second and the smoke in his eyes clears out once again.")

        ans = char_animation_in("You get and idea! You scream: ")
        if 'kallisto' not in ans.lower():
            char_animation("To no effect...")
            char_animation("Then it hits you. You scream: 'Kallisto! Kallisto! Kallisto!'")

        char_animation("Malcor looks at you and speaks in the softest tone you ever heard: 'You speak her name...'")
        char_animation("He looks at you and says: 'Where is she?'")
        
        char_animation("\nOnce again the smoke fills back his eyes - and he looks at you with disdain.")
        char_animation("'HAHAHA you think you can defeat me! You know what... It has been long since I had amusing company...")
        char_animation("I will tell you a story...")

        char_animation("\nEons ago there live two arch dragons - Malcor and Kallisto. They were young powerful dragons in the world.")
        char_animation("They were in love. They were on the top of the world - literally.")
        char_animation("But then a voice spoke to Malcor. It told him that he could be the most powerful dragon in the world.")
        char_animation("It told him he could rule all 12 realms. It told him he could be a god - with his love Kallisto by his side.")
        char_animation("And so he was tempted. He spoke to the voice and it talked back to him.")
        char_animation("It told him that he must free it from the Never Realm. That once free the voice will grant him all the power his heart desires.")
        char_animation("And so he did. He found the the objects of balance - his own scale and difference - a feather from a phoenix from the Eternal Realm.")
        char_animation("And so he came to this very cave and started the spell to free the voice.")
        char_animation("Little did he know - Kallisto had found out. She knew it was too late so she ushered of the remaining dragons to the Draconic Realm and stayed back herself.")
        char_animation("She didn't want to leave Malcor - for a life without him was no life at all.")
        char_animation("And so she stayed. And went to the cave. The spell was almost complete...")
        char_animation("A blinding light erupted, 100 yards behind where you are lying right now. And a portal started forming.")
        char_animation("Kallisto tried what she could - she moved slashed at the portal trying to close it.")
        char_animation("Malcor screamed out trying to stop her. But it was too late.")
        char_animation("The voice was freed. The spell was complete.")
        char_animation("Little did Malcor or Kallisto know - the final object for the spell was the object of power - the heart of a dragon.")
        char_animation("And so Kallisto's heart was ripped out of her body and disintergrated infront of Malcor's very eyes.")
        char_animation("Kallisto herself burst into dust...")
        
        char_animation("\nThe voice escaped and closed the portal behind it. Malcor was in grief - he had lost the love of his life.")
        char_animation("He spoke to the voice angrily and told it to bring her back - bring her back from the dead.")
        char_animation("The voice merely chuckled and said: 'I can't - because she isn't dead. She has had a fate worse than death.'")
        char_animation("'Her very spirit has been transported to the Never Realm. She is permanently sealed in there.'")
        char_animation("Malcor attacked the voice in rage but that is what the voice wanted - that is what I wanted.")
        char_animation("I possessed Malcor - the mightiest of the dragons. I was free. The remaining realms were mine.")
        char_animation("The remaining realms were mine - for I am the evil spirit - all powerful - all knowing - all evil.")

        char_animation("\nYou look at Malcor and for the first time look at him in pity.")
        char_animation("He was but a pawn in the game of the evil spirit.")

        char_animation_in("You look straight at Malcor and say: ")
        char_animation("Malcor looks stunned for a moment - then the kind voice back again in a strained tone says")
        char_animation("'Run... Run... Find the Good King, his armor is the only thing that can help defeat %$*& - the evil spirit.'")
        char_animation("You look right at him and run out of the cave...")
        situtation = 31
        char_animation("\n")

    elif situtation == 31: #Good King's Cottage
        char_animation("You run out of the cave into the shining sun - it has never felt better.")
        char_animation("You run and run until you reach the town square. You see the Wizard there.")
        char_animation(f"He asks {NAME}: 'What happened?'")
        char_animation("You quickly explain everything to him. He nods and looks at you deeply: 'So you need the Warrior's armor and weapons, I suppose?'")
        char_animation("'According to legend, the Good King's armor was given to him by Kallisto herself. It was forged out of hard light.'")
        char_animation("'It is probably enchanted and will give you a fighting chance against the evil spirit.'")
        char_animation("'Very well, Igor and Twilia will help you. Caroline and John have gone on another mission at the moment and haven't returned since...'") #Potential opening for spin-off along w/ mage and Never Realm
        
        char_animation("\nIgor and Twilia come out of the base smiling - until you tell them your predicament.")
        char_animation("They look at you and say: 'We will help you. We will help you get the Good King's armor.'")

        char_animation("You leave the town square and head towards the forest.")

        char_animation("You reach the forest and start walking through it...")
        char_animation("You aren't too nervous - you've beaten the Warrior twice before.")
        char_animation("You reach the clearing and see the Warrior's cottage...")
        char_animation("As you enter you see the Warrior lying dead on the floor... purple smoke coming out of his mouth.")
        char_animation("He has been punished for his failure by the evil spirit.")
        char_animation("His armor and sword is nowhere to be seen. That is when you remember... the Warrior's armor was made of hardstone!")
        char_animation("That means he must have hidden his hard light armor elsewhere, infact the evil spirit must have kept it as far away as possible.")
        char_animation("Since the hard light armor might block the evil spirit's control over the Warrior.")
        char_animation("You look behind and tell Igor and Twilia: 'The Good King's armor is not here - it must be hidden somewhere else.'")
        char_animation("igor says: 'It must be in the Dragon Lair'")
        ans = char_animation_in("You reply: ")
        if 'yes' in ans.lower() or 'correct' in ans.lower():
            char_animation("Then it hits you!")
            char_animation("The Good King's armor cannot be in the Dragon Lair")
            char_animation("The evil spirit would be weakened by it - it must be far from the Dragon Lair but still safe...")

        char_animation("What do you do next?")
        char_animation("1. Go to Castle and see if the mage left any clues")
        char_animation("2. Go to the town square and ask the Wizard")
        char_animation("3. Go to the library and see if you find anything")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','castle'],'b':['2','town'],'c':['3','library']})

        if choice == 'b':
            char_animation("You head to the town square and see the Wizard.")
            char_animation("You explain him your predicament and he nods.")
            char_animation("'Unforntunately I have no idea' he says.")
            char_animation("\nWhat do you do?")
            char_animation("1. Go to Castle and see if the mage left any clues")
            char_animation("2. Go to the library and see if you find anything")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','castle'],'c':['2','library']})
        elif choice == 'c':
            char_animation("You head to the Royal Pallatium's library to see if you can find anything.")
            char_animation("The only thing you find is - 'The Good King's armor was presumably destroyed after his death'")
            char_animation("What do you do next?")
            char_animation("1. Go to Castle and see if the mage left any clues")
            char_animation("2. Go to the town square and ask the Wizard")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','castle'],'b':['2','town']})

        if choice == 'b':
            char_animation("You head to the town square and see the Wizard.")
            char_animation("You explain him your predicament and he nods.")
            char_animation("'Unforntunately I have no idea' he says.")
            char_animation("\nYou head towards the castle to see if the mage left any clues.")
        elif choice == 'c':
            char_animation("You head to the Royal Pallatium's library to see if you can find anything.")
            char_animation("The only thing you find is - 'The Good King's armor was presumably destroyed after his death'")
            char_animation("You head towards the castle to see if the mage left any clues.")

        char_animation("You reach the castle - still amazed by the ruins of the once great building.")
        char_animation("You walk through the ruins and go to the mage's room.")
        char_animation("What do you do?")
        char_animation("1. Search the room for any clues")
        char_animation("2. Try using the mirror to go back in time and ask the mage.")
        
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','search'],'b':['2','mirror']})

        if choice == 'a':
            char_animation("You try searching the room but find nothing...")
            char_animation("You try using the mirror to go back in time and ask the mage.")

        ans = char_animation_in("You look at the mirror and say the incantation: ")
        if ans.lower() != 'convertat horologium':
            for i in range(0,5):
                ans = char_animation("Nothing happens. You say: ")
                if ans.lower() == 'convertat horologium':
                    break
            if ans.lower() != 'convertat horologium':
                char_animation("A nagging thought in the back of your head shows you the spell.")
                char_animation("You mutter 'convertat horologium' and the mirror pulls you in.")

        char_animation("\nYou are pulled back in time and you see the mage infront of you...")
        char_animation("You appear infront of the mage as an apparation and he says: ")
        char_animation("'You have come again?'")
        char_animation("You says: 'Yes, I need to know where the Good King's armor is.'")
        char_animation("The mage says:")
        char_animation("'Ahh the Kings armor. A curious thing. Given to the King by Kallisto herself.'")
        char_animation("'Unfortunately I believe the King has been defeated. The evil spirit has hidden away the King's armor in the Dark Temple.'")
        char_animation("'The Dark Temple is the temple of the evil spirit. It is bound to be protected by enchantments of all kinds.'")
        char_animation("'Be warned - those who enter the Dark Temple never return.'")
        char_animation("'Luckily I have spent the remainder of my life trying to find its location.'")
        char_animation("'Simply open up the third floorboard from the window in my room and you will find a map to the Dark Temple.'")
        char_animation(f"'Good luck {NAME} - you will need it.'")
        char_animation(f"You are pulled back to the present.{PAUSE*3}")

        char_animation("\nYou open up the third floorboard from the window and find a map to the Dark Temple.")
        char_animation("You look at Igor and Twilia and tell them what the mage said.")
        char_animation(f"All three of you head towards the Dark Temple...{PAUSE*4}")

        char_animation("\nYou reach the Dark Forest, in it is the Dark Temple.")
        char_animation("The map shows nothing more than that the Dark Temple is in the forest.")
        char_animation("You three walk through the forest and reach a fork in the road.")
        char_animation("Wht do you do?")
        char_animation("1. Go left towards a path with dry leaves on the ground.")
        char_animation("2. Go right towards a path with a stream running besides it.")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','left','leaves'],'b':['2','right','stream']})
        if choice == 'a':
            char_animation("You go left and walk through the forest.")
            #Dwarf Mines related adventure
        elif choice == 'b':
            char_animation("You go right and walk through the forest.")
            #Alantian Related Adventure
        
        char_animation("You reach the Dark Temple. It is a massive structure - pitch black in color - yes pitch black, that is the only way to describe it.")
        char_animation("You walk through the entrance and see a massive room.")
        char_animation("You walk around it, trying to find an entrance but none is to be found. All over the temple walls are inscriptions in different languages...")
        i = 0
        while True:
            i+= 1
            char_animation("What do you do?")
            char_animation("1. Walk around it looking for clues")
            char_animation("2. Say something")
            char_animation("3. Ask Igor and Twilia for help")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','walk'],'b':['2','say'],'c':['3','ask']})
            if choice == 'b':
                ans = char_animation_in("You say: ")
                if ans.lower() == "malum est via vitae": #Latin for "Evil is the way of life"
                    break
                char_animation(f"{PAUSE*2}Nothing happens...")
            elif choice == 'a':
                char_animation("You walk around the temple looking for clues...")
                char_animation(f"{PAUSE*2}You find a small inscription on the wall: 'Only those who have accepted evil as the way of life may enter'")
            elif choice == 'c':
                if i < 5:
                    char_animation("You ask Igor and Twilia for help.")
                    char_animation("They look at you and say: 'We are trying to find out' as they inspect the temple")
                else:
                    char_animation("You ask Igor and Twilia for help.")
                    char_animation("They look at you and say: 'You know the Wizard said latin was the first language in Mythopes...'")
            
            if i>10:
                char_animation("Twilia exclaims: 'Eureka! I got it! See this inscription in English - 'Only those who have accepted evil as the way of life may enter'")
                char_animation("We must say 'Evil is the way of life' in Latin!")
                char_animation("You look at the inscription and say: 'Malum est via vitae'")
        
        char_animation("The temple rumbles and the entrance opens up.")
        char_animation("You walk in and see nothing. It is pitch black, unsurprisingly.")
        char_animation("Igor lights a torch and you see you are in a massive chamber.")
        
        #Add more puzzles and stuff here

        char_animation("You walk for a while through the zig-zag path")
        char_animation("Infront of you see the Good King's armor. It is shining in the darkness.")
        char_animation("You walk towards it and pick it up.")
        char_animation("You feel a surge of power. And you feel a tremble - the whole temple starts collapsing.")
        char_animation("Igor and Twilia are about to be crushed by a falling pillar.")
        char_animation("Just then a voice comes in your head: 'Channel your power through the armor'")
        char_animation("You concentrate and a blast of energy shoots out of the sword.")
        char_animation("The pillar is disintegrated in mid-air.")
        char_animation("A chunk of the ceiling falls on you but breaks into dust on impact.")
        char_animation("It feels like you are wearing a strength potion - but a hundred times stronger.")
        char_animation("You all leave the temple and head back to the town square.")

        char_animation("\nHeads turn as they see you in the Good King's shining armor.")
        char_animation("The Wizard looks at you and says: 'You have Kallisto's hard light armor - you are ready to face the evil spirit.'")

        char_animation_in("\nYou look at Igor, Twilia and the Wizard and say: ")
        char_animation("The Wizard smiles weakly at you.")

        char_animation("Are you ready to face the evil spirit?")
        char_animation("1. Yes")
        char_animation("2. No but I don't have a choice")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']}, allow_save=True)

        char_animation(f"\nYou head towards the Dragon's Lair... unsure of what awaits you.{PAUSE*5}")
        situtation = 32

    elif situtation == 32: #Dragon lair, actual final battle
        char_animation("You walk into the cave, the Kings armor shining in the darkness.")
        char_animation("You see Malcor/Evil Spirit standing there...")
        char_animation("He chuckles and says: 'You think you can defeat me?'")
        char_animation("'You cannot even move...'")
        char_animation(f"{PAUSE*2}But this time you can. The Good King's armor's magic is protecting you.")

        char_animation("The dragon's expression falters for half a second. But then he looks straight at you.")
        char_animation("He smiles with evil glee. We shall fight puny mortal.")
        char_animation("He shoots a fireball at you. You dodge out of the way.")
        char_animation("The battle begins...\n")


        won = real_fight_rahas(boss_health=300, player_health=2, max_health=3)
        if not won:
            while not won:
                char_animation("You Lost.")
                char_animation_in("Press enter to try again...")
                won = real_fight_rahas(boss_health=250, player_health=3)
        
        char_animation("You won!")
        char_animation("The battle is over. The evil spirit's hold on Malcor is weakened.")

        char_animation("Malcor looks at you and in a weak voice mutters: ")
        char_animation("'Start the spell... now'")
        
        char_animation("\nYou take out the hair of the Warrior and place it infront of you.")
        char_animation("You take a single drop of your blood.")
        ans = char_animation_in("And you say the incantation: ")
        if ans.lower() != 'numquam semper':
            for i in range(0,5):
                ans = char_animation("Nope. Nothing happens. Try again: ")
                if ans.lower() == 'numquam semper':
                    break
            if ans.lower() != 'numquam semper':
                char_animation("A voice in the back of your head gives you the spell.")
                char_animation("You scream 'NUMQUAM SEMPER' and the spell starts.")
        
        char_animation("Your blood and the hair glow and burst into light.")
        char_animation("A cloudy portal starts forming. You continue chanting 'NUMQUAM SEMPER'.")
        char_animation("The portal grows and grows until it is a massive swirling vortex.")
        char_animation("Yet it is clearly not completed yet...")
        char_animation("Malcor still fighting the evil spirit for control of his own body, slowly moves towards the portal.")
        char_animation("With a single slash of his claw, he touches the portal.")
        char_animation("His heart is ripped out and his body disinigrates.")
        char_animation("With a blinding light you are thrown back.")
        char_animation("You see a dragon spirit, holding the evil spirit's purple form\n")

        print(DRAGON)

        char_animation("You see a flash of blue and purple forms - the evil spirit and another form.")
        char_animation("And you see Malcor's spirit - and another dragon spirit...")
        char_animation("\nAnd with a bang the portal closes. And you black out.\n")

        char_animation(f"{PAUSE*6}When you come to you are still in the cave")
        char_animation("\nThe Warrior walks into the cave. But he looks different.")
        char_animation("He is no longer under the control of the evil spirit.")
        char_animation("He walks up to you and says, I am proud of you. You have single handedly rescued our realm from a hundred years of darkness.")
        char_animation("The Warrior/Good King look at you and says: 'We are forever indebted to you. You have saved us all.'")
        char_animation("\nYou ask: 'But what of Malcor, Kallisto and the evil spirit?'")
        char_animation(f"Ahh yes, a truly curious outcome. Perhaps a story for another time...{PAUSE} Nah I'm just kidding, you should see the look on your face...")

        char_animation("\nYou see the Never Realm is the realm of the good spirit and evil spirit.")
        char_animation("They are forever locked in a battle but a hundred years ago the evil spirit escaped.")
        char_animation("It possessed Malcor and the rest is history.")
        char_animation("Today Malcor sacrificed his heart to open the portal.")
        char_animation("He then held the evil spirit and threw it in, along with himself.")
        char_animation("Without any dragon heart left in this world, the portal can never be opened again.")

        char_animation("\nIt is poetic don't you think?")
        char_animation("The evil and good spirits back in their realm fighting away.")
        char_animation("And Malcor and Kallisto reuinited - even if in spirit form - for the first time in a hundred years.")
        char_animation("They will help the good spirit fight the evil spirit till the end of time... together.")
    
        char_animation(f"{PAUSE*5}\nThe End.")

        char_animation("\n\n\nThank you for playing {NAME}!")
        get_review()

        char_animation("The first trilogy is over - but you can still continue!")
        char_animation("Enjoy the minigames!")
        situtation = 10
        career = 'victor'


char_animation("Goodbye!")
