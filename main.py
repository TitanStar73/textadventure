"""
Code by Arush Mundada

Disclaimer:
Some stuff was generated by AI, those parts have #AI Generated Start and #AI Generated End before and after them

Users will be given the option to provide an OpenAI API key to create a more imersive experience (optional always)

#Stuff to do later
#Finish up games functions
#Finish up cleric
"""
"""Here are the settings you should edit:"""
WPM = 350 #Words speed text animation, recommended: 350
DISABLE_ANIMATION = False #Turns off text animation if enabled
DISABLE_COLORS = False #Turns off colors if enabled

#Optional | Will not change gameplay descisons only provides a more immersive dialogue
#If not provided make it None
OPENAI_API_KEY = None 


#Great! Now start playing! (or feel free to check out the source code!), beware though, spoilers ahead!


print("""
Welcome to the Text Based Adventure!

Some tips:
Come back every once in a while to see if there are any new updates!
Enter quit to exit the game.
Enter save to save your progress in the game to a file (you will need to enter a filename).
Enter autosave to automatically save the game whenever possible.
Enter inventory to view your inventory
      
Nothing is as it seems, nothing is fixed, everything is a choice. Choose wisely.
      
If you see a "..." click enter to continue
      
Try it out...""")

input()
print("Great! Let's get started!")

from random import choice as randchoice
from random import randint, shuffle
from time import sleep
import os.path
import requests
import random


DEBUG_ALLOWED = False #Turns on debug mode | PROCEED WITH CAUTION, ARBITARY PYTHON CODE CAN BE EXECUTED


if OPENAI_API_KEY != None:
    import openai

    def get_openai_response(prompt):
        response = openai.Completion.create(
            engine="gpt4",
            prompt=prompt,
            max_tokens=300
        )
        return response.choices[0].text.strip()

else:
    def get_openai_response(prompt):
        return "Roses are red, Violets are blue, to get a better response, provide an OpenAI API key too!"

def char_animation(msg, end = "\n"):
    global previous_choices
    msg = msg.replace("sword", f"{previous_choices['sword_color']}{previous_choices['sword_name']}{DEFAULT_COLOR}")
    for char in msg:
        print(char, end = "", flush = True)
        sleep(10/WPM)
    print(end, end = "")

def char_animation_in(msg):
    char_animation(msg, end = "")
    return input()

if DISABLE_ANIMATION:
    char_animation = print
    char_animation_in = input

def get_char_animation_in(msg,accepted:dict, allow_save = False,err_msg = ""): #{'choice1':['choice1','alias1','alias2'],'choice2':['choice2','alias1','alias2']}
    global situtation, NAME, been_in_situations, morailty, person_type, career, previous_choices, gold, inventory, autosave, credits
    while True:
        choice = char_animation_in(msg).lower()
        if choice == 'autosave':
            autosave = not autosave
            char_animation(f"Autosave is now {'on' if autosave else 'off'}. Enter autosave again to toggle.")
            continue
        elif choice == 'foresight':
            if 'potion_of_foresight' in inventory:
                char_animation("You see a vision of the future...")
                char_animation("You see yourself in a dark space, surrounded with nothing but black space... A seering pain through your heart")
                inventory.remove('potion_of_foresight')
            else:
                char_animation("You don't have the potion of foresight")
        elif choice == 'inventory':
            char_animation(f"\n{NAME}'s Inventory:")
            char_animation(f"Gold: {gold}")
            if 17 in been_in_situations:
                char_animation(f"Credits: {credits}")
            for item in inventory.inventory:
                char_animation(f"{item}: {inventory.inventory[item]}")

        if choice == 'quit':
            a = char_animation_in("Are you sure? If you haven't saved your progress, you will lose it. Press enter to confirm, or anything else to cancel. You can enter 'save' to save")
            if a == '':
                exit()
        elif choice == 'save' or (autosave and allow_save):
            if not allow_save:
                char_animation("You can't save right now :(\nPlease wait till you are prompted which place to go next!")
                continue
            if autosave:
                filename = "game.data"
            else:
                filename = char_animation_in("Enter a filename: ")
            with open(filename, 'w') as f:
                f.write(f"{situtation}\n{NAME}\n{been_in_situations}\n{morailty}\n{person_type}\n{career}\n{previous_choices}\n{gold}\n{inventory}\n{autosave}\n{credits}")

        for key in accepted:
            if choice in [item.lower() for item in accepted[key]]:
                return key
        char_animation(err_msg, end = "")

def get_karma(thing):
    try:
        return previous_choices[thing]
    except KeyError:
        return 0

def parse_dict(dictt):
    dictt = [item for item in dictt.strip('{}').split(',') if item != ""] #{'key1':'value1','key2':'value2'} -> ["'key1':'value1'"","'key2':'value2'"]
    new_dict = {}
    for item in dictt:
        key, value = item.split(':') #key = "'key1'", value = "'value1'"
        key = key.strip()
        value = value.strip()
        try:
            key = int(key) #Try int
        except ValueError:
            try:
                key = float(key) #Try float
            except ValueError:
                key = key[1:-1] #Remove quotes

        try:
            value = int(value) #Try int
        except ValueError:
            try:
                value = float(value) #Try float
            except ValueError:
                value = value[1:-1] #Remove quotes

        new_dict[key] = value
    return new_dict

def play_wordle():
    def get_a_word():
        url = f"https://api.datamuse.com/words?sp={'?'*WORDLE_NUM_LETTERS}&md=f&max=1000"
        response = requests.get(url)

        if response.status_code == 200 and response.json():
            words = response.json()
            new_words = []
            for word in words:
                if word['tags'] and float(word['tags'][0].split(":")[1]) > WORDLE_FREQ:
                    new_words.append(word['word'])
            return random.choice(new_words)
        return "ERRORS" #Even after error still give a word :)

    def is_a_word(word):
        url = f"https://api.datamuse.com/words?sp={word}&max=1"
        response = requests.get(url)
        if response.status_code == 200 and response.json():
            return response.json()[0]['word'] == word.lower()
        return False
    
    def print_word(word, color_sequence):
        for row in range(len(BLOCKED_LETTERS['A'].split('\n'))):
            for i,letter in enumerate(word):
                print(color_sequence[i], end='')
                print(BLOCKED_LETTERS[letter.upper()].split('\n')[row], end=DEFAULT_COLOR)            
            print("")

    score = 0
    the_word = get_a_word()
    char_animation("Lets start!")
    while score < 6:
        score += 1

        while True:
            guess = input(">> ").lower()
            if len(guess) != len(the_word):
                char_animation(f"Incorrect length. It should be {len(the_word)} letters.")
            elif is_a_word(guess):
                break
            else:
                char_animation("Not a word.")

        print_word(guess, [GREEN if guess[i] == char else (YELLOW if guess[i] in the_word else RED) for i,char in enumerate(the_word)])
        if guess == the_word:
            break

    if score == 1:
        char_animation("You got it in 1 guess!")
        return 100
    if guess == the_word:
        char_animation(f"You got it in {score} guesses!")
        return 10 if score > 3 else 30
    char_animation("You lost! The word was: " + the_word)
    return 0

def play_quiz():
    if randint(0,1) == 0:
        question,answer = randchoice(RIDDLES)
        char_animation(f"Question: {question}")
        response = char_animation_in("Answer: ").lower()
        if response in answer:
            char_animation("Correct!")
            return 10
        else:
            char_animation(f"Incorrect! The answer was {next(iter(answer))}")
            return 0
    else:
        question, answers = randchoice(MYTHOLOGY_QUESTIONS)
        char_animation(f"Question: {question}")
        correct_answer = answers[0]
        answers = shuffle(answers)
        for i,item in answers:
            char_animation(f"{i+1}. {item}")

        response = get_char_animation_in("Answer: ",accepted={1:["1"],2:["2"],3:["3"],4:["4"]})-1
        if answers[response] == correct_answer:
            char_animation("Correct!")
            return 10
        else:
            char_animation(f"Incorrect! The answer was {correct_answer}")
            return 0

def play_trivia():
    question, answers = randchoice(MYTHOLOGY_QUESTIONS)
    char_animation(f"Question: {question}")
    correct_answer = answers[0]
    answers = shuffle(answers)
    for i,item in answers:
        char_animation(f"{i+1}. {item}")

    response = get_char_animation_in("Answer: ",accepted={1:["1"],2:["2"],3:["3"],4:["4"]})-1
    if answers[response] == correct_answer:
        char_animation("Correct!")
        if randint(0,1100) == 9:
            char_animation("You won the Super Jackpot!!")
            return 500
        if randint(0,100) == 9:
            char_animation("You won the Jackpot!!")
            return 100
        return randchoice([1,1,2,4,5,10])
    else:
        char_animation(f"Incorrect! The answer was {correct_answer}")
        return 0


def play_slot_machine():
    for item in SLOT_ASSETS:
        if len(item.split('\n')) != len(SLOT_ASSETS[0].split('\n')):
            print("Error: All assets must have the same number of lines. | This is likely a bug in the source code.")
            print("Exiting slot machine.")
            return 0

    def special_print(texts):
        total = ""
        dubs = texts[0].split('\n')
        dubs2 = []
        #No idea what causes this bug but it took me ages to debug :(
        for text in dubs:
            if text != '':
                dubs2.append(text)

        for row_no in range(0,len(dubs2)):
            for text in texts:
                total += text.split('\n')[row_no] + " "
            total += "\n"
        print(total[:-1])
    
    def get_spliced_asset(a1,a2,ratio): #ratio to ratio + 1 shown, e.g. 0.5 to 1.5
        total = a1 + "\n" + a2
        total = total.split("\n")

        final = ""
        start_line = int(len(a1.split('\n')) * ratio)

        for line_no in range(start_line, start_line + len(a1.split('\n'))):
            final += total[line_no] + "\n"

        return final

    def create_roll(a1,a2, previous = []):
        frames_for_roll = int(SLOT_FPS*SLOT_ANIMATION_TIME[2])
        for i in range(0,frames_for_roll-1):
            previous.append(get_spliced_asset(a1,a2,i/frames_for_roll))
            special_print(previous)
            previous.pop()
            sleep(SLOT_SLEEP)
            print(SLOT_REFRESH, flush=True)
        
        previous.append(get_spliced_asset(a1,a2,1))
        special_print(previous)
        sleep(SLOT_SLEEP)
        
    char_animation(f"Slot machine! Get 3 {GREEN}$${DEFAULT_COLOR} to win 888x your bet! Get 3 of a kind to win 69x your bet!")
    while True:
        try:
            bet = int(char_animation_in("How much money would you like to bet?: "))
            break
        except:
            char_animation("Please enter a whole number.")

    s1 = randchoice(SLOT_1_ROLLS) #randchoice(SLOT_1_ROLLS)
    s2 = randchoice(SLOT_2_ROLLS)
    s3 = randchoice(SLOT_3_ROLLS)
    
    a2 = randchoice(SLOT_1_ROLLS)
    for i in range(0, SLOT_ANIMATION_TIME[1]):
        a1 = a2
        a2 = randchoice(SLOT_1_ROLLS)
        create_roll(a1,a2, previous=[])
        print(SLOT_REFRESH, flush=True)

    create_roll(a2,s1, previous=[])
    sleep(SLOT_ANIMATION_TIME[0])

    print(SLOT_REFRESH, flush=True)
    a2 = randchoice(SLOT_2_ROLLS)
    for i in range(0, SLOT_ANIMATION_TIME[1]):
        a1 = a2
        a2 = randchoice(SLOT_2_ROLLS)
        create_roll(a1,a2, previous=[s1])
        print(SLOT_REFRESH, flush=True)

    create_roll(a2,s2, previous=[s1])
    sleep(SLOT_ANIMATION_TIME[0])

    print(SLOT_REFRESH, flush=True)
    a2 = randchoice(SLOT_3_ROLLS)
    for i in range(0, SLOT_ANIMATION_TIME[1]):
        a1 = a2
        a2 = randchoice(SLOT_3_ROLLS)
        create_roll(a1,a2, previous=[s1,s2])
        print(SLOT_REFRESH, flush=True)

    create_roll(a2,s3, previous=[s1,s2])
    sleep(SLOT_ANIMATION_TIME[0])
    
        
    if s1 == s2 == s3 == SLOT_WINNING:
        char_animation(f"Congratulations! You won {bet*888} gold!")
        return bet*888

    if s1 == s2 == s3:
        char_animation(f"Congratulations! You won {bet*69} gold!")
        return bet*69
    
    char_animation(f"You lost! Sorry :(")
    char_animation(f"-{bet} gold")
    return -bet


class InventoryManager:
    def __init__(self, inventory = {}):
        self.inventory = inventory
    
    def add(self, item, amt = 1):
        if item in self.inventory:
            self.inventory[item] += amt
        else:
            self.inventory[item] = amt

    def __str__ (self):
        return str(self.inventory)

    def get_formated(self):
        pass #print out, everything > 1Mil becomes infinite symbol

    def __contains__(self,item):
        if item in self.inventory:
            return self.inventory[item] > 0
        return False
    
    def remove(self,item, amt = 1):
        self.inventory[item] -= amt
        if self.inventory[item] < 0:
            self.inventory[item] = 0
    
    def count(self,item):
        if item in self.inventory:
            return self.inventory[item]
        return 0
    
    def __iter__(self):
        return iter(self.inventory)
    
situtation = 10
been_in_situations = set()
morailty = 0
NAME = "person"
DEFAULT_COLOR = "\033[0m"
RED = DEFAULT_COLOR if DISABLE_COLORS else "\033[31m"
BLUE = DEFAULT_COLOR if DISABLE_COLORS else "\033[34m"
GREEN = DEFAULT_COLOR if DISABLE_COLORS else "\033[32m"
YELLOW = DEFAULT_COLOR if DISABLE_COLORS else "\033[33m"
WHITE = DEFAULT_COLOR if DISABLE_COLORS else "\033[37m"
PURPLE = DEFAULT_COLOR if DISABLE_COLORS else "\033[35m"

person_type = 0
career = 'None'
previous_choices = {'sword_color':DEFAULT_COLOR, "sword_name":"sword"}
gold = 0
credits = 0
inventory = InventoryManager()
autosave = False
#Constants
WIZARD = "Wizard"
WARRIOR = "Warrior"
VILLIAN = "Villian"
WARLOCK = "Warlock"
GHOST = "Ghost"

PAUSE = DEFAULT_COLOR * (WPM//12) #Creates an approx. 1-2 second dramatic pause in certain places, can be turned off though by disbaling text animations

#Much of this is AI generated data
#This file only stores the riddles and quiz q/a s for the game
WORDLE_DIFFICULTY = 10
WORDLE_NUM_LETTERS = 5

BLOCKED_LETTERS = {'A': "\n .----------------. \n| .--------------. |\n| |      __      | |\n| |     /  \\     | |\n| |    / /\\ \\    | |\n| |   / ____ \\   | |\n| | _/ /    \\ \\_ | |\n| ||____|  |____|| |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'B': "\n .----------------. \n| .--------------. |\n| |   ______     | |\n| |  |_   _ \\    | |\n| |    | |_) |   | |\n| |    |  __'.   | |\n| |   _| |__) |  | |\n| |  |_______/   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'C': "\n .----------------. \n| .--------------. |\n| |     ______   | |\n| |   .' ___  |  | |\n| |  / .'   \\_|  | |\n| |  | |         | |\n| |  \\ `.___.'\\  | |\n| |   `._____.'  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'D': "\n .----------------. \n| .--------------. |\n| |  ________    | |\n| | |_   ___ `.  | |\n| |   | |   `. \\ | |\n| |   | |    | | | |\n| |  _| |___.' / | |\n| | |________.'  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'E': "\n .----------------. \n| .--------------. |\n| |  _________   | |\n| | |_   ___  |  | |\n| |   | |_  \\_|  | |\n| |   |  _|  _   | |\n| |  _| |___/ |  | |\n| | |_________|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'F': "\n .----------------. \n| .--------------. |\n| |  _________   | |\n| | |_   ___  |  | |\n| |   | |_  \\_|  | |\n| |   |  _|      | |\n| |  _| |_       | |\n| | |_____|      | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'G': "\n .----------------. \n| .--------------. |\n| |    ______    | |\n| |  .' ___  |   | |\n| | / .'   \\_|   | |\n| | | |    ____  | |\n| | \\ `.___]  _| | |\n| |  `._____.'   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'H': "\n .----------------. \n| .--------------. |\n| |  ____  ____  | |\n| | |_   ||   _| | |\n| |   | |__| |   | |\n| |   |  __  |   | |\n| |  _| |  | |_  | |\n| | |____||____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'I': "\n .----------------. \n| .--------------. |\n| |     _____    | |\n| |    |_   _|   | |\n| |      | |     | |\n| |      | |     | |\n| |     _| |_    | |\n| |    |_____|   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'J': "\n .----------------. \n| .--------------. |\n| |     _____    | |\n| |    |_   _|   | |\n| |      | |     | |\n| |   _  | |     | |\n| |  | |_' |     | |\n| |  `.___.'     | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'K': "\n .----------------. \n| .--------------. |\n| |  ___  ____   | |\n| | |_  ||_  _|  | |\n| |   | |_/ /    | |\n| |   |  __'.    | |\n| |  _| |  \\ \\_  | |\n| | |____||____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'L': "\n .----------------. \n| .--------------. |\n| |   _____      | |\n| |  |_   _|     | |\n| |    | |       | |\n| |    | |   _   | |\n| |   _| |__/ |  | |\n| |  |________|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'M': "\n .----------------. \n| .--------------. |\n| | ____    ____ | |\n| ||_   \\  /   _|| |\n| |  |   \\/   |  | |\n| |  | |\\  /| |  | |\n| | _| |_\\/_| |_ | |\n| ||_____||_____|| |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'N': "\n .-----------------.\n| .--------------. |\n| | ____  _____  | |\n| ||_   \\|_   _| | |\n| |  |   \\ | |   | |\n| |  | |\\ \\| |   | |\n| | _| |_\\   |_  | |\n| ||_____|\\____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'O': "\n .----------------. \n| .--------------. |\n| |     ____     | |\n| |   .'    `.   | |\n| |  /  .--.  \\  | |\n| |  | |    | |  | |\n| |  \\  `--'  /  | |\n| |   `.____.'   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'P': "\n .----------------. \n| .--------------. |\n| |   ______     | |\n| |  |_   __ \\   | |\n| |    | |__) |  | |\n| |    |  ___/   | |\n| |   _| |_      | |\n| |  |_____|     | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'Q': "\n .----------------. \n| .--------------. |\n| |    ___       | |\n| |  .'   '.     | |\n| | /  .-.  \\    | |\n| | | |   | |    | |\n| | \\  `-'  \\_   | |\n| |  `.___.\\__|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'R': "\n .----------------. \n| .--------------. |\n| |  _______     | |\n| | |_   __ \\    | |\n| |   | |__) |   | |\n| |   |  __ /    | |\n| |  _| |  \\ \\_  | |\n| | |____| |___| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'S': "\n .----------------. \n| .--------------. |\n| |    _______   | |\n| |   /  ___  |  | |\n| |  |  (__ \\_|  | |\n| |   '.___`-.   | |\n| |  |`\\____) |  | |\n| |  |_______.'  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'T': "\n .----------------. \n| .--------------. |\n| |  _________   | |\n| | |  _   _  |  | |\n| | |_/ | | \\_|  | |\n| |     | |      | |\n| |    _| |_     | |\n| |   |_____|    | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'U': "\n .----------------. \n| .--------------. |\n| | _____  _____ | |\n| ||_   _||_   _|| |\n| |  | |    | |  | |\n| |  | '    ' |  | |\n| |   \\ `--' /   | |\n| |    `.__.'    | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'V': "\n .----------------. \n| .--------------. |\n| | ____   ____  | |\n| ||_  _| |_  _| | |\n| |  \\ \\   / /   | |\n| |   \\ \\ / /    | |\n| |    \\ ' /     | |\n| |     \\_/      | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'W': "\n .----------------. \n| .--------------. |\n| | _____  _____ | |\n| ||_   _||_   _|| |\n| |  | | /\\ | |  | |\n| |  | |/  \\| |  | |\n| |  |   /\\   |  | |\n| |  |__/  \\__|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'X': "\n .----------------. \n| .--------------. |\n| |  ____  ____  | |\n| | |_  _||_  _| | |\n| |   \\ \\  / /   | |\n| |    > `' <    | |\n| |  _/ /'`\\ \\_  | |\n| | |____||____| | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'Y': "\n .----------------. \n| .--------------. |\n| |  ____  ____  | |\n| | |_  _||_  _| | |\n| |   \\ \\  / /   | |\n| |    \\ \\/ /    | |\n| |    _|  |_    | |\n| |   |______|   | |\n| |              | |\n| '--------------' |\n '----------------' \n\n", 'Z': "\n .----------------. \n| .--------------. |\n| |   ________   | |\n| |  |  __   _|  | |\n| |  |_/  / /    | |\n| |     .'.' _   | |\n| |   _/ /__/ |  | |\n| |  |________|  | |\n| |              | |\n| '--------------' |\n '----------------' \n\n"}
WORDLE_FREQ = 100/WORDLE_DIFFICULTY

SLOT_ASSETS = [
f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |      {GREEN}$${DEFAULT_COLOR}      | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |      {RED}!{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {PURPLE} @{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |      {YELLOW}%{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {RED} ^{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {BLUE} &{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
  f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {GREEN} *{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |    {RED}  +{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {YELLOW} ?{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |    {PURPLE}  ~{DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |     {GREEN} ={DEFAULT_COLOR}       | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 f""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |   {BLUE}  [-]{DEFAULT_COLOR}      | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """,
 r""" .----------------. 
| .--------------. |
| |              | |
| |              | |
| |              | |
| |              | |
| |              | |
| |              | |
| |              | |
| '--------------' |
 '----------------' """
]
#7x11x13 = 1001 (slight edge to house 0.1%)
SLOT_1_ROLLS = [SLOT_ASSETS[i] for i in range(0,7)]
SLOT_2_ROLLS = [SLOT_ASSETS[i] for i in range(0,11)]
SLOT_3_ROLLS = [SLOT_ASSETS[i] for i in range(0,13)]
SLOT_WINNING = SLOT_ASSETS[0]
SLOT_REFRESH = f"\033[{len(SLOT_1_ROLLS[0].split('\n'))+1}A" #Move cursor back up to create animation

SLOT_FPS = 30
SLOT_SLEEP = 1/SLOT_FPS
SLOT_ANIMATION_TIME = (1, 6, 0.35) #(time for each slot to be displayed, total slots per slot, transition time)


RIDDLES = [
    ("What has keys but can’t open locks?", {"piano", "keyboard"}),
    ("What has to be broken before you can use it?", {"egg"}),
    ("I’m tall when I’m young, and I’m short when I’m old. What am I?", {"candle"}),
    ("What is full of holes but still holds water?", {"sponge"}),
    ("What gets wet while drying?", {"towel"}),
    ("What can you catch, but not throw?", {"cold"}),
    ("What goes up but never comes down?", {"age"}),
    ("I speak without a mouth and hear without ears. I have no body, but I come alive with wind. What am I?", {"echo"}),
    ("What has a head, a tail, is brown, and has no legs?", {"penny"}),
    ("What runs all around a backyard, yet never moves?", {"fence"}),
    ("What has keys but can’t open locks?", {"piano", "keyboard", "instrument"}),
    ("I speak without a mouth and hear without ears. I have no body, but I come alive with the wind. What am I?", {"echo", "sound", "voice"}),
    ("The more you take, the more you leave behind. What am I?", {"footsteps", "tracks", "marks"}),
    ("What has hands but can’t clap?", {"clock", "watch", "time"}),
    ("I’m tall when I’m young, and I’m short when I’m old. What am I?", {"candle", "light", "wax"}),
    ("What can travel around the world while staying in a corner?", {"stamp", "postage", "corner"}),
    ("What has to be broken before you can use it?", {"egg", "shell", "break"}),
    ("I’m not alive, but I grow; I don’t have lungs, but I need air; I don’t have a mouth, but water kills me. What am I?", {"fire", "flame", "heat"}),
    ("What gets wetter as it dries?", {"towel", "cloth", "dry"}),
    ("What has a head, a tail, is brown, and has no legs?", {"penny", "coin", "money"}),
    ("What has many teeth but can’t bite?", {"comb", "toothbrush", "hair"}),
    ("What is full of holes but still holds water?", {"sponge", "cloth", "cleaning"}),
    ("I’m not alive, but I can grow; I don’t have lungs, but I need air; I don’t have a mouth, but water kills me. What am I?", {"fire", "flame", "burn"}),
    ("What comes once in a minute, twice in a moment, but never in a thousand years?", {"letter M", "alphabet", "time"}),
    ("What has a neck but no head?", {"bottle", "jar", "container"}),
    ("What can you catch but not throw?", {"cold", "illness", "sickness"}),
    ("What has one eye but can’t see?", {"needle", "storm", "hole"}),
    ("What has a bed but doesn’t sleep, and a mouth but doesn’t eat?", {"river", "stream", "water"}),
    ("What has cities, but no houses; forests, but no trees; and rivers, but no water?", {"map", "atlas", "diagram"}),
    ("What has a thumb and four fingers but is not alive?", {"glove", "handwear", "clothing"}),
    ("What can be cracked, made, told, and played?", {"joke", "story", "game"}),
    ("What is so fragile that saying its name breaks it?", {"silence", "quiet", "sound"}),
    ("I have keys but open no locks. I have space but no room. You can enter but not go outside. What am I?", {"keyboard", "computer", "typewriter"}),
    ("What has a face and two hands but no arms or legs?", {"clock", "watch", "timepiece"}),
    ("What has an eye but cannot see, and is commonly found on a farm?", {"needle", "corn", "eye"}),
    ("What has a beginning but no end, and can be seen every day but never touched?", {"sunrise", "time", "day"}),
    ("I am not alive, but I can grow; I don’t have lungs, but I need air; I don’t have a mouth, but I need water. What am I?", {"fire", "flame", "heat"}),
    ("What gets bigger the more you take away from it?", {"hole", "gap", "space"}),
    ("What has a bottom at the top?", {"leg", "bed", "furniture"}),
    ("What can fill a room but takes up no space?", {"light", "air", "sound"}),
    ("What can be broken but never held?", {"promise", "trust", "agreement"}),
    ("What has a heart that doesn’t beat?", {"artichoke", "vegetable", "plant"}),
    ("What is always in front of you but can’t be seen?", {"future", "air", "time"}),
    ("What has a face and two hands but no body?", {"clock", "watch", "timepiece"}),
    ("What is full of keys but can’t open any doors?", {"piano", "keyboard", "instrument"}),
    ("What can travel around the world while staying in a corner?", {"stamp", "postage", "letter"}),
    ("What has a bottom at the top?", {"leg", "bed", "furniture"}),
    ("What is always in front of you but can’t be seen?", {"future", "air", "time"}),
    ("What gets wetter as it dries?", {"towel", "cloth", "dry"}),
    ("What can be cracked, made, told, and played?", {"joke", "story", "game"}),
    ("What has to be broken before you can use it?", {"egg", "shell", "break"}),
    ("What is so fragile that saying its name breaks it?", {"silence", "quiet", "sound"}),
    ("What has many teeth but can’t bite?", {"comb", "toothbrush", "hair"}),
    ("What has an eye but cannot see, and is commonly found on a farm?", {"needle", "corn", "eye"}),
    ("What has a bed but doesn’t sleep, and a mouth but doesn’t eat?", {"river", "stream", "water"}),
    ("What can you catch but not throw?", {"cold", "illness", "sickness"}),
    ("What is always in front of you but can’t be seen?", {"future", "air", "time"}),
    ("What can be cracked, made, told, and played?", {"joke", "story", "game"}),
    ("What has a thumb and four fingers but is not alive?", {"glove", "handwear", "clothing"}),
    ("What has a bed but doesn’t sleep, and a mouth but doesn’t eat?", {"river", "stream", "water"})
]

MYTHOLOGY_QUESTIONS = [
    ("Who is the king of the Greek gods?", ["Zeus", "Hades", "Poseidon", "Apollo"]),
    ("What is Thor’s hammer called in Norse mythology?", ["Mjolnir", "Gungnir", "Gram", "Skofnung"]),
    ("Who is the Roman god of war?", ["Mars", "Jupiter", "Neptune", "Mercury"]),
    ("In Egyptian mythology, who is the god of the underworld?", ["Osiris", "Ra", "Horus", "Anubis"]),
    ("Who was the Greek goddess of wisdom?", ["Athena", "Hera", "Aphrodite", "Demeter"]),
    ("What creature has the body of a lion and the head of a human in Egyptian mythology?", ["Sphinx", "Minotaur", "Chimera", "Griffin"]),
    ("In Greek mythology, who flew too close to the sun?", ["Icarus", "Daedalus", "Perseus", "Orpheus"]),
    ("Which Norse god is known as the trickster?", ["Loki", "Odin", "Thor", "Frey"]),
    ("Who is the Greek god of the sea?", ["Poseidon", "Zeus", "Hades", "Hermes"]),
    ("What is the Roman name for the Greek god Hermes?", ["Mercury", "Apollo", "Juno", "Vulcan"]),
    ("Who is the Norse god of thunder?", ["Thor", "Loki", "Odin", "Baldur"]),
    ("In Greek mythology, who was condemned to hold up the sky for eternity?", ["Atlas", "Prometheus", "Hermes", "Zeus"]),
    ("Who is the goddess of love and beauty in Roman mythology?", ["Venus", "Diana", "Minerva", "Juno"]),
    ("What is the name of the Greek goddess of the hunt?", ["Artemis", "Athena", "Hera", "Aphrodite"]),
    ("In Norse mythology, what is the name of the world tree?", ["Yggdrasil", "Asgard", "Midgard", "Jotunheim"]),
    ("Who is the Greek god of wine?", ["Dionysus", "Apollo", "Hermes", "Ares"]),
    ("What is the name of the Egyptian sun god?", ["Ra", "Osiris", "Anubis", "Horus"]),
    ("In Greek mythology, who is the god of the underworld?", ["Hades", "Zeus", "Poseidon", "Ares"]),
    ("Who is the king of the Norse gods?", ["Odin", "Thor", "Loki", "Tyr"]),
    ("In Roman mythology, who is the queen of the gods?", ["Juno", "Venus", "Minerva", "Ceres"]),
    ("Who is the goddess of the hearth in Greek mythology?", ["Hestia", "Hera", "Demeter", "Athena"]),
    ("What creature is half-man and half-horse in Greek mythology?", ["Centaur", "Minotaur", "Satyr", "Griffin"]),
    ("In Greek mythology, who is the messenger of the gods?", ["Hermes", "Apollo", "Athena", "Ares"]),
    ("What is the name of Thor’s father in Norse mythology?", ["Odin", "Loki", "Baldur", "Heimdall"]),
    ("Who is the goddess of the harvest in Greek mythology?", ["Demeter", "Hestia", "Artemis", "Hera"]),
    ("In Roman mythology, who is the god of the sea?", ["Neptune", "Mars", "Jupiter", "Vulcan"]),
    ("Who was the first woman created by the gods in Greek mythology?", ["Pandora", "Eurydice", "Helen", "Medusa"]),
    ("What is the name of the fire-breathing creature with the head of a lion, body of a goat, and tail of a serpent?", ["Chimera", "Cerberus", "Hydra", "Minotaur"]),
    ("Who is the Norse goddess of love and fertility?", ["Freyja", "Frigg", "Skadi", "Hel"]),
    ("In Greek mythology, who is known as the god of war?", ["Ares", "Apollo", "Zeus", "Hermes"]),
    ("What is the name of the three-headed dog that guards the underworld in Greek mythology?", ["Cerberus", "Hydra", "Chimera", "Sphinx"]),
    ("In Egyptian mythology, who is the goddess of magic?", ["Isis", "Bastet", "Nut", "Nephthys"]),
    ("Who is the Greek god of music, poetry, and the sun?", ["Apollo", "Hermes", "Dionysus", "Ares"]),
    ("What creature in Greek mythology turns people to stone with its gaze?", ["Medusa", "Siren", "Harpy", "Gorgon"]),
    ("In Norse mythology, what is the name of the hall where warriors go after death?", ["Valhalla", "Asgard", "Midgard", "Helheim"]),
    ("Who is the goddess of the moon in Greek mythology?", ["Selene", "Hecate", "Nyx", "Artemis"]),
    ("In Roman mythology, who is the god of the forge?", ["Vulcan", "Mars", "Neptune", "Apollo"]),
    ("Who is the Greek goddess of the harvest and agriculture?", ["Demeter", "Hera", "Athena", "Artemis"]),
    ("What is the name of the river that souls must cross to enter the underworld in Greek mythology?", ["Styx", "Lethe", "Acheron", "Phlegethon"]),
    ("Who is the Egyptian goddess of the sky?", ["Nut", "Isis", "Ma'at", "Hathor"]),
    ("In Greek mythology, who was cursed to turn everything he touched into gold?", ["King Midas", "Sisyphus", "Orpheus", "Perseus"]),
    ("Who is the Roman goddess of the hunt?", ["Diana", "Minerva", "Vesta", "Venus"]),
    ("In Norse mythology, who is the wife of Odin?", ["Frigg", "Freyja", "Hel", "Skadi"]),
    ("Who is the Greek god of the underworld?", ["Hades", "Zeus", "Poseidon", "Apollo"]),
    ("What is the name of the winged horse in Greek mythology?", ["Pegasus", "Chimera", "Hydra", "Griffin"]),
    ("In Egyptian mythology, who is the god of the sun?", ["Ra", "Osiris", "Horus", "Anubis"]),
    ("Who is the Norse god of wisdom, poetry, and magic?", ["Odin", "Thor", "Loki", "Baldur"]),
    ("In Greek mythology, who is the god of sleep?", ["Hypnos", "Morpheus", "Thanatos", "Erebus"]),
    ("What is the name of the goddess of discord in Greek mythology?", ["Eris", "Nemesis", "Ate", "Hecate"]),
    ("In Roman mythology, who is the god of wine?", ["Bacchus", "Jupiter", "Mars", "Apollo"]),
    ("Who is the Greek god of love?", ["Eros", "Hermes", "Apollo", "Ares"]),
    ("What creature in Greek mythology is known for its beautiful singing that lures sailors to their doom?", ["Siren", "Harpy", "Gorgon", "Nymph"]),
    ("Who is the Roman goddess of love?", ["Venus", "Juno", "Diana", "Minerva"]),
    ("In Norse mythology, who is the god of light and purity?", ["Baldur", "Thor", "Loki", "Odin"]),
    ("Who is the Greek god of the sun?", ["Helios", "Apollo", "Hermes", "Ares"]),
    ("What is the name of the giant serpent in Norse mythology that encircles the world?", ["Jörmungandr", "Fafnir", "Nidhogg", "Fenrir"]),
    ("In Egyptian mythology, who is the goddess of the home and fertility?", ["Hathor", "Bastet", "Isis", "Nephthys"]),
    ("Who is the king of the Titans in Greek mythology?", ["Cronus", "Atlas", "Prometheus", "Hyperion"]),
    ("What creature in Greek mythology is part woman and part bird?", ["Harpy", "Siren", "Gorgon", "Sphinx"]),
    ("Who is the Roman god of the underworld?", ["Pluto", "Mars", "Neptune", "Vulcan"]),
    ("In Norse mythology, what is the name of the wolf destined to kill Odin?", ["Fenrir", "Garm", "Skoll", "Hati"]),
    ("Who is the Greek goddess of victory?", ["Nike", "Athena", "Hera", "Artemis"]),
    ("In Roman mythology, who is the god of beginnings and endings?", ["Janus", "Jupiter", "Mars", "Vulcan"]),
    ("Who is the Greek goddess of the hearth and home?", ["Hestia", "Hera", "Demeter", "Artemis"]),
    ("What is the name of the nine-headed serpent in Greek mythology?", ["Hydra", "Cerberus", "Chimera", "Sphinx"]),
    ("In Egyptian mythology, who is the god of chaos and storms?", ["Set", "Anubis", "Ra", "Thoth"]),
    ("Who is the Norse god of fertility and prosperity?", ["Frey", "Tyr", "Baldur", "Odin"]),
    ("Who is the Greek god of healing and medicine?", ["Asclepius", "Apollo", "Hermes", "Dionysus"]),
    ("What is the name of the messenger of the gods in Roman mythology?", ["Mercury", "Apollo", "Mars", "Neptune"]),
    ("In Greek mythology, who is the goddess of the night?", ["Nyx", "Selene", "Hecate", "Eris"]),
    ("Who is the Roman god of fire and blacksmiths?", ["Vulcan", "Mars", "Neptune", "Mercury"]),
    ("In Norse mythology, who is the ruler of the underworld?", ["Hel", "Loki", "Fenrir", "Odin"]),
    ("Who is the Greek goddess of magic?", ["Hecate", "Eris", "Nyx", "Selene"]),
    ("What creature in Greek mythology is a woman with snakes for hair?", ["Medusa", "Siren", "Harpy", "Sphinx"]),
    ("In Roman mythology, who is the god of agriculture?", ["Saturn", "Mars", "Vulcan", "Mercury"]),
    ("Who is the Egyptian goddess of motherhood and fertility?", ["Isis", "Hathor", "Bastet", "Nut"]),
    ("In Norse mythology, who is the god of war and justice?", ["Tyr", "Thor", "Odin", "Loki"]),
    ("Who is the Greek goddess of the moon and hunting?", ["Artemis", "Hera", "Athena", "Demeter"]),
    ("What is the name of the primordial void in Greek mythology?", ["Chaos", "Gaia", "Tartarus", "Erebus"]),
    ("In Roman mythology, who is the goddess of wisdom and war?", ["Minerva", "Juno", "Diana", "Venus"]),
    ("Who is the Greek god of the sky?", ["Zeus", "Poseidon", "Hades", "Apollo"]),
    ("What is the name of the horse that has wings in Greek mythology?", ["Pegasus", "Chimera", "Cerberus", "Hydra"]),
    ("In Egyptian mythology, who is the god of wisdom and writing?", ["Thoth", "Anubis", "Ra", "Horus"]),
    ("Who is the Norse god of mischief?", ["Loki", "Thor", "Odin", "Tyr"]),
    ("Who is the Greek goddess of the earth?", ["Gaia", "Hera", "Demeter", "Artemis"]),
    ("In Roman mythology, who is the god of the underworld?", ["Pluto", "Mars", "Neptune", "Vulcan"]),
    ("Who is the Norse goddess of love, beauty, and fertility?", ["Freyja", "Frigg", "Hel", "Skadi"]),
    ("In Greek mythology, who is the god of fire and blacksmiths?", ["Hephaestus", "Apollo", "Ares", "Hermes"]),
    ("What is the name of the river that separates the world of the living from the world of the dead in Greek mythology?", ["Styx", "Lethe", "Acheron", "Phlegethon"]),
    ("Who is the Roman goddess of the hearth?", ["Vesta", "Minerva", "Venus", "Juno"]),
    ("In Norse mythology, who is the god of the sea?", ["Njord", "Thor", "Odin", "Loki"]),
    ("Who is the Greek goddess of the rainbow?", ["Iris", "Hera", "Artemis", "Demeter"]),
    ("What is the name of the ferryman who carries souls across the river Styx in Greek mythology?", ["Charon", "Cerberus", "Hades", "Hermes"]),
    ("In Egyptian mythology, who is the goddess of cats?", ["Bastet", "Hathor", "Isis", "Nut"]),
    ("Who is the Greek god of dreams?", ["Morpheus", "Hypnos", "Thanatos", "Phobos"]),
    ("In Norse mythology, what is the name of the realm of fire?", ["Muspelheim", "Asgard", "Midgard", "Helheim"]),
]

LOGIC_PUZZLES = [
    ("Which number should come next in the pattern: 2, 4, 8, 16, ...?", ["32", "20", "24", "30"]),
    ("If you rearrange the letters 'CIFAIPC', you would have the name of a(n):", ["Ocean", "City", "Animal", "Country"]),
    ("What is the missing number in the sequence: 1, 3, 6, 10, 15, ...?", ["21", "18", "20", "22"]),
    ("Which word does not belong in the following list: Apple, Banana, Cherry, Carrot?", ["Carrot", "Banana", "Apple", "Cherry"]),
    ("If some cats are lions and some lions are tigers, are some cats definitely tigers?", ["No", "Yes", "Cannot be determined", "Sometimes"]),
    ("John is standing behind Mary, and Mary is standing behind John. How is this possible?", ["They are standing back-to-back", "John is taller", "Mary is shorter", "They are in a line"]),
    ("If it takes 5 machines 5 minutes to make 5 widgets, how long would it take 100 machines to make 100 widgets?", ["5 minutes", "100 minutes", "50 minutes", "10 minutes"]),
    ("How many sides does a cube have?", ["6", "8", "4", "12"]),
    ("Which one of the following is the odd one out: 2, 3, 5, 7, 9?", ["9", "3", "5", "7"]),
    ("A clock shows the time as 3:15. What is the angle between the hour and minute hand?", ["7.5 degrees", "0 degrees", "15 degrees", "90 degrees"]),
    ("A bat and a ball cost $1.10 in total. The bat costs $1 more than the ball. How much does the ball cost?", ["5 cents", "10 cents", "15 cents", "1 cent"]),
    ("If it takes 12 men 12 hours to build a wall, how long would it take 6 men to build the same wall?", ["12 hours", "6 hours", "24 hours", "18 hours"]),
    ("If you have a 5-liter jug and a 3-liter jug, how can you measure exactly 4 liters of water?", ["Fill the 5-liter jug, pour into the 3-liter jug twice", "Fill the 3-liter jug twice", "Fill the 5-liter jug once", "Fill the 3-liter jug once"]),
    ("In a race, you overtake the person in second place. What position are you now in?", ["Second", "First", "Third", "Last"]),
    ("A farmer has 17 sheep, and all but 9 die. How many sheep does the farmer have left?", ["9", "8", "0", "17"]),
    ("What can travel around the world while staying in the same spot?", ["A stamp", "The wind", "A satellite", "A cloud"]),
    ("How many months have 28 days?", ["All of them", "1", "12", "6"]),
    ("I am an odd number. Take away one letter, and I become even. What number am I?", ["Seven", "Eleven", "Nine", "Three"]),
    ("You see a boat filled with people. It has not sunk, but when you look again you don’t see a single person. Why?", ["All the people were married", "The boat left", "The people jumped", "The boat capsized"]),
    ("What comes next in the sequence: 1, 1, 2, 3, 5, 8, ...?", ["13", "10", "12", "15"]),
    ("What is the next number in the series: 5, 10, 20, 40, ...?", ["80", "60", "100", "70"]),
    ("If A is the father of B and C is the mother of B, what is the relationship of A to C?", ["Husband", "Brother", "Uncle", "Cousin"]),
    ("In a race, you overtake the person in second place. What position are you in?", ["Second", "First", "Third", "Fourth"]),
    ("Which one of the following is a prime number?", ["17", "18", "20", "22"]),
    ("Which of the following does not belong in this group: Dog, Cat, Hamster, Whale?", ["Whale", "Dog", "Cat", "Hamster"]),
    ("If you have 3 apples and you take away 2, how many do you have?", ["2", "1", "0", "3"]),
    ("If you multiply a number by 6 and then add 2, you get 20. What is the number?", ["3", "4", "2", "5"]),
    ("Which number is missing from the sequence: 2, 3, 5, 7, 11, ...?", ["13", "9", "15", "17"]),
    ("What letter comes next in the sequence: J, F, M, A, M, ...?", ["J", "A", "M", "J"]),
    ("What number comes next: 1, 4, 9, 16, 25, ...?", ["36", "30", "32", "40"]),
    ("If all bloogs are shmoogs and all shmoogs are kroogs, are all bloogs definitely kroogs?", ["Yes", "No", "Cannot be determined", "Sometimes"]),
    ("What is the odd one out: Fork, Spoon, Knife, Plate?", ["Plate", "Fork", "Spoon", "Knife"]),
    ("A man is looking at a picture of someone. His friend asks, 'Who is it you are looking at?' The man replies, 'Brothers and sisters, I have none. But that man's father is my father's son.' Who is the man in the picture?", ["His son", "His father", "His uncle", "His nephew"]),
    ("A farmer has 17 sheep and all but 9 die. How many are left?", ["9", "8", "0", "17"]),
    ("Which word is closest in meaning to 'opaque'?", ["Cloudy", "Clear", "Bright", "Transparent"]),
    ("Which of the following numbers is a multiple of 3?", ["15", "14", "10", "25"]),
    ("If 3 people can paint 3 fences in 3 hours, how many fences can 6 people paint in 6 hours?", ["12", "9", "6", "3"]),
    ("What number is missing: 7, 14, 21, ..., 35?", ["28", "24", "30", "27"])
]


"""
Enchantment books on swords.
Usage to add more:
    "enchantmentBook Name": "Description"
to check if enchantment is applied:
get_karma("enchantmentBook Name") == 1 #True if applied else False
"""
ENCHANTMENT_BOOKS = {
    "enchantmentBook Fire": "Covers your sword in an eternal flame",
    "enchantmentBook Poison": "Covers your sword in poison",
}

while True:
    if career == None: #Standard Careers (not including ghost)
        if abs(morailty) >= 5 and abs(person_type) >= 5:
            if morailty >= 5 and person_type >= 5:
                career = WIZARD
            elif morailty >= 5 and person_type <= -5:
                career = WARRIOR
            elif morailty <= -5 and person_type >= 5:
                career = VILLIAN
            elif morailty <= -5 and person_type <= -5:
                career = WARLOCK

    if situtation == 0:
        char_animation("Welcome Adventurer!")
        char_animation("1) Start a new game")
        char_animation("2) Load a game")

        if os.path.exists("game.data"):
            char_animation("3) Continue from save detected in game.data")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','start','new'],'b':['2','load'],'c':['3','game']}, "")
        else:
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','start','new'],'b':['2','load']}, "")

        if choice == 'a':
            autosave = char_animation_in("Do you want to enable autosave? (yes/no): ").lower() in {'yes','y','true'}
            if autosave:
                char_animation("Autosave is now on. You can turn it off by entering 'autosave' in the game.")
            else:
                char_animation("Autosave is off. You can turn it on by entering 'autosave' in the game. (Only works towards the end of a stage)")
            situtation = 1
        elif choice == 'b' or choice == 'c':
            if choice == 'b':
                filename = char_animation_in("Enter a filename: ")
            else:
                filename = "game.data"
            with open(filename) as file:
                try:
                    save_data = file.read().split('\n')
                    situtation = int(save_data[0])
                    NAME = save_data[1]
                    been_in_situations = {int(item) for item in save_data[2].strip('{}').split(',')}
                    morailty = int(save_data[3])
                    person_type = int(save_data[4])
                    career = save_data[5]
                    previous_choices = parse_dict(save_data[6])
                    gold = int(save_data[7])
                    inventory = InventoryManager(parse_dict(save_data[8]))
                    autosave = save_data[9] == 'True'
                    credits = int(save_data[10])
                except Exception as e:
                    char_animation(f"Invalid save file! {e}")
                    continue
        situtation = 1
    
    elif situtation == 1: #Clearing
        if 1 not in been_in_situations:
            char_animation("You wake up in the clearing of a forest, not remembering how you got here. You don't remember anything or anyone. The only thing you remember is a single word: your name.")
            NAME = char_animation_in("What is it?: ")
            been_in_situations.add(1)
        char_animation(f"Hello {NAME}. You see 4 paths labeled with signs: ")

        char_animation("\n\n")
        char_animation("1. The path going to the Temple, it has a a bricked road with lamps on the side.")
        char_animation("2. The path going to the Library, it has a road covered with leaves, seemingly not being disturbed in years.")
        char_animation("3. The path to the Arena, it has a road with a lot of footchar_animations, and you can hear the sound of swords clashing from the distance.")                    
        char_animation("4 The path to the Dragon's lair, the sign itself tangled with vines and the path so overgrown it may as well not have been there.")
        choice = get_char_animation_in("Which path do you take?: ",{'2':['1','temple'],'3':['2','library'],'4':['3','arena'],'5':['4',"dragon","lair"]}, allow_save=True)
        situtation = int(choice)

    elif situtation == 2: #Temple
        char_animation("\n\nTemple")
        if 2 not in been_in_situations:
            char_animation("As you walk down this path you see another person walking down the path. Do you?: ")
            char_animation("1. Ask him for help")
            char_animation("2. Ignore him")
            char_animation("3. Attack him")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','ask','help'],'b':['2','ignore'],'c':['3','attack']})
            if choice == 'a':
                previous_choices["old man"] = 1
                person_type += 1
                morailty += 1
                char_animation("You ask him for help, and he says: ")
                char_animation("What do you mean you don't know where you are?! You are in the kingdom of Mythopes, ruled by Emporer Rahas! Child you look like you need help, I am old I don't have much but you can have this: he hands you a bag of gold")
                if career == GHOST:
                    char_animation("You are a ghost, you can't hold the gold :(")
                else:
                    char_animation("You take the gold and thank him + 100 Gold")
                    gold += 100
            elif choice == 'b':
                previous_choices["old man"] = 0
                person_type -= 1
                if career != GHOST:
                    char_animation("You ignore him and continue down the path... On your way there you see a bag of gold on the side of the path, you could've sworn it wasn't there a moment ago, +100 Gold")
                    gold += 100
            elif choice == 'c':
                previous_choices["old man"] = -1
                person_type -= 1
                morailty -= 10000
                if career == GHOST:
                    char_animation("You attack him but float right through him lol.")
                else:
                    char_animation("You attack him and quickly overpower him. +100 Gold")
                    gold += 100

            if career != GHOST:
                char_animation("You continue down the path and you see a temple, and you enter it. There are a few people inside who seem to put money into the temple's donation box. Do you: ")
                char_animation("1. Put some money in the donation box")
                char_animation("2. Ignore the donation box")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','put','money'],'b':['2','ignore']})
                if choice == 'a':
                    amt = int(char_animation_in("How much money do you put in the donation box?: "))
                    previous_choices["donation"] = amt
                    gold -= amt
                    if amt > 0:
                        char_animation(f"You put the {amt} money in the donation box")
                    if gold < 0:
                        char_animation("You are now in debt but you feel good :)")
                        morailty += 1000
                    if amt > 50:
                        morailty += 2
                    if amt > 80:
                        morailty += 1
                    if morailty == 100:
                        morailty += 2
                    if amt < 0:
                        char_animation(f"You take the {amt} money from the donation box", end="")
                        char_animation(f".{PAUSE}.{PAUSE}.{PAUSE}\nYou suddenly feel a sharp pain in you head. You hear a nasty voice in your head 'hahaha you think you can fool me!!'")
                        char_animation(f"Do you wish to explain yourself? (yes/no)")
                        choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes','explain', 'y'],'b':['2','no','ignore', 'n']})
                        if choice == 'a':
                            the_explanation = char_animation_in("[Explain youself]: ").lower()
                            if 'sorry' in the_explanation:
                                the_explanation = the_explanation.split('sorry')
                                the_explanation = the_explanation[0].split('not')
                                if len(the_explanation)%2 == 0:
                                    char_animation("Intersting explanation, *not* an apology though.")
                                else:
                                    char_animation("You explain yourself... ")
                                    char_animation("The voice in your head says 'I will let you go this time... if you solve my riddle'")
                                    question,answers = randchoice(RIDDLES)
                                    char_animation("    " + question)
                                    ans = char_animation_in("Answer: ").lower()
                                    if ans in answers:
                                        char_animation("You are correct... surprising for a mortal... to bad you still have to go")
                                    else:
                                        char_animation("You're wrong... bye!")
                            else:
                                char_animation("You don't even say sorry... some apology!")
                        char_animation("The sharp pain in your head multiplies hundred fold and you die... no worse... you are neither here nor there, you are a ghost.")
                        career = GHOST
                        inventory = InventoryManager({})
                        gold = 0
                if choice == 'b' or amt == 0:
                    previous_choices["donation"] = 0
                    char_animation("You ignore the donation box and continue down the path...")
                
                if choice == 'a' and amt > 0:
                    char_animation("Good Job adventurer!")
            else:
                char_animation("You enter the temple and you feel a deep chill... You feel a dark presence.")
                char_animation("A familiar voice says: ")
                char_animation("ha ha ha, you are growing weaker by the second...")

            been_in_situations.add(2)

        char_animation("Where do you chose to go?")
        char_animation("1. Back to the clearing")
        char_animation("2. Go to the town")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)
        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 10
        
    elif situtation == 3: #Library
        if 3 not in been_in_situations:
            char_animation("\n\nLibrary")
            char_animation("You walk down the path for what seems like ages. You finally reach the library.")
            char_animation("Its a grand structurem, so tall you cant see the top. It so huge you cant see where it ends.")
            char_animation("Yet it appears abandoned, the building is covered in vines.")
            char_animation("You enter the library and see huge lines of bookshelves filled with thousands of dusty books.")
            
            lib_loc = 0
            char_animation("You continue foraward and see two paths, one up a ladder and one down steep stairs.")
            char_animation("Do you: ")
            char_animation("1. Go up the ladder")
            char_animation("2. Go down the stairs")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','up','ladder'],'-1':['2','down','stairs']},allow_save=True)
            lib_loc += int(choice)
            
            char_animation("You continue foraward and see two more paths, one up a spiral staircase and one down a trapdoor.")
            char_animation("Do you: ")
            char_animation("1. Go up the stairs")
            char_animation("2. Go down the trapdoor")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','up','stairs'],'-1':['2','down','trapdoor']})
            lib_loc += int(choice)
            if choice == '1':
                person_type += 1
            else:
                person_type -= 1
            
            char_animation("You continue foraward and see two more paths, left towards a large shelf of boooks, same yet different from what you've seen so far or right towards a set of glowing spheres on the bookshelves.")
            char_animation("Do you: ")
            char_animation("1. Go left towards a large shelf of boooks")
            char_animation("2. Go right towards a set of glowing spheres on the bookshelves")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','left'],'-1':['2','right']})
            if OPENAI_API_KEY != None and choice == '1':
                char_animation("You see open a book and it reads: ")
                char_animation(get_openai_response("Give a short story about an ancient library. Only provide the story do not say anything else."))
            if OPENAI_API_KEY != None and choice == '2':
                char_animation("You see a glowing sphere and you touch it, you see a vision of a great library, the biggest you have ever seen. Inside of it you see you. You hear a voice: ")
                char_animation(get_openai_response("Provide a prophecy of the player doing great things. Only provide the prophecy do not say anything else."))            

            lib_loc += int(choice)
            if choice == '1':
                person_type -= 1
            else:
                person_type += 2


            char_animation("You continue foraward and see two more paths, each with a huge archway and a single word on the top.")
            char_animation("Do you: ")
            char_animation("1. Go left towards the archway with the word 'Power' on the top")
            char_animation("2. Go right towards the archway with the word 'Knowledge' on the top")
            choice = get_char_animation_in("Enter your choice: ",{'1':['1','left'],'-1':['2','right']})
            lib_loc += int(choice)
            if choice == '1':
                morailty -= 2
            if choice == '2':
                morailty += 1
                person_type += 1

            lib_loc //= 2
            
            if lib_loc == 0:
                choice = char_animation_in("Now what?: ")
                if choice == 'BA':
                    char_animation(f".{PAUSE}.{PAUSE}.{PAUSE}\nYou have broken out of the matrix... Just kidding but you can chose either path: ")
                    char_animation("1. Meet the librarian")
                    char_animation("2. Meet the priest")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','librarian'],'b':['2','priest']})
                    if choice == 'a':
                        lib_loc = 1
                    elif choice == 'b':
                        person_type += 1
                        lib_loc = -1
                    char_animation("Great choice, also heres +100 Gold for being smart :)")
                else:
                    char_animation(":(")
                    lib_loc = randchoice([-1,1])

            if lib_loc < 0:
                char_animation("You continue down the path and you see a cloaked man, he looks at you and you can only see his piercing eyes that seem thousands of years old yet like those of a newborn.")
                char_animation(f"He looks at you mysteriously and says: 'Better {PAUSE}elsewhere {PAUSE}you {PAUSE}will {PAUSE}do!'")
                char_animation("You feel a tug in your gut and you feel your entire body being compressed into a tiny ball.")
                char_animation("You wake up and are now in...") #Arena
                situtation = 4
                been_in_situations.add(3)
                continue
            if lib_loc > 0:
                char_animation("You see a librarian, who looks as old as time itself. She looks at you and says: ")
                char_animation("Its been a long time since I've seen a mortal here... You must be special...")
                char_animation("Good Luck Adventurer!")
            
            been_in_situations.add(3)
        
        char_animation("Where do you chose to go?")
        char_animation("1. Back to the clearing")
        char_animation("2. Go to the town")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)
        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 10

    elif situtation == 4: #Arena entrance
        char_animation("\n\nThe Arena")
        if 4 not in been_in_situations:
            char_animation("You walk down the path and enter a large clearing")
            char_animation("The largest building you have ever seen is in front of you.")
            char_animation("It is a massive colosseum made of chisled white marble.")
            char_animation("Yet on looking closer it seems to be in ruins, with cracks all over and vines appearing to grow over it")
            char_animation("You enter the colosseum and see a large arena, with no one in the stands.")
            
            if gold > 0 and career != GHOST:
                char_animation("As you walk in you see a shopkeeper, he looks at you and says would you like to purchase something: ")
                char_animation("1. Buy a sword (66 gold)")
                char_animation("2. Buy a potion (50 gold)")
                char_animation("3. Buy food (50 gold)")
                char_animation("4. Ignore him and move on")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','sword'],'b':['2','potion'],'c':['3','food'],'d':['4','ignore']})
                if choice == 'a':
                    if gold >= 66:
                        gold -= 66
                        inventory.add("sword")
                        char_animation("You buy a sword")
                        person_type -= 1
                    else:
                        char_animation("You don't have enough gold. The shopkeeper is annoyed and you move forward.")
                elif choice == 'b':
                    if gold >= 50:
                        gold -= 50
                        inventory.add("potion")
                        char_animation("You buy a potion")
                        person_type += 1
                    else:
                        char_animation("You don't have enough gold. The shopkeeper is annoyed and you move forward.")
                elif choice == 'c':
                    if gold >= 50:
                        gold -= 50
                        inventory.add("food")
                        char_animation("You buy food")
                    else:
                        char_animation("You don't have enough gold. The shopkeeper is annoyed and you move forward.")
                elif choice == 'd':
                    char_animation("You ignore the shopkeeper and move forward.")
                
                if 'food' in inventory:
                    char_animation("You continue down the path and you see a beggar who asks you for some alms. Do you:")
                    char_animation("1. Give him all your food")
                    char_animation("2. Give him some food")
                    char_animation("3. Ignore him")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','all'],'b':['2','some'],'c':['3','ignore']})
                    if choice == 'a':
                        inventory.remove('food')
                        char_animation("You give him all your food")
                        morailty += 3
                        previous_choices['beggar_arena'] = 2
                    elif choice == 'b':
                        char_animation("You give him some food")
                        previous_choices['beggar_arena'] = 1
                        morailty += 1
                    elif choice == 'c':
                        char_animation("You ignore him")
                        morailty -= 1
                
                else:
                    char_animation("You continue down the path and you see a beggar who asks you for some alms. Do you:")
                    char_animation("1. Give him all your gold")
                    char_animation(f"2. Give him some gold {min(10,gold//3)}")
                    char_animation("3. Ignore him")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','all'],'b':['2','some'],'c':['3','ignore']})
                    
                    if choice == 'a':
                        gold = 0
                        char_animation("You give him all your gold")
                        previous_choices['beggar_arena'] = 2
                        morailty += 3
                    elif choice == 'b':
                        gold -= min(10,gold//3)
                        char_animation("You give him some gold")
                        previous_choices['beggar_arena'] = 1
                        morailty += 1
                    elif choice == 'c':
                        char_animation("You ignore him")
                        morailty -= 1

                if choice == 'a' or choice == 'b':
                    char_animation("The beggar says: ")
                    char_animation("Remember in life,")
                    char_animation("In chaos you'll find peace,")
                    char_animation("Neither charging forth nor seeking release,")
                    char_animation("With no steps forward nor backward, you'll conquer the storm.")
                    char_animation("and you'll find out you were wrong all along.")

            elif career == GHOST:
                char_animation("An apparation appears and says: ")
                char_animation("Remember in life,")
                char_animation("In chaos you'll find peace,")
                char_animation("Neither charging forth nor seeking release,")
                char_animation("With no steps forward nor backward, you'll conquer the storm.")
                char_animation("and you'll find out you were wrong all along.")
                char_animation("Before you can say anything else it dissapears.")

            else:
                char_animation("You feel a deep sense that you would be better off coming back later...")
                char_animation("Do you: ")
                char_animation("1. Go back to the clearing")
                char_animation("2. Continue forward")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','forward']})
                if choice == 'a':
                    situtation = 1
                    continue
                elif choice == 'b':
                    char_animation("You continue forward")
            
            been_in_situations.add(4)
        
        situtation = 12
    
    elif situtation == 12: #Arena
        if 12 not in been_in_situations:
            char_animation("You walk into the arena and see it in its glory. ")
            char_animation("You can almost see the warriors fighting in the arena, the crowd cheering.")
            char_animation("And then you see a large man, 7ft tall, 300 pounds of pure muscle, barelling at you.")
            char_animation("Do you: ")
            char_animation("1. Stay and fight him")
            char_animation("2. Run away")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','fight'],'b':['2','run'],'c':['stay','still','none','nothing','peace']})
            if choice == 'a':
                char_animation("You stay and fight him...")
                person_type -= 2
                if 'potion' in inventory:
                    char_animation("You accidently throw your potion at him and he dissapears in a poof of smoke...")
                elif 'sword' in inventory and get_karma('beggar_arena') in {1,2}:
                    char_animation("You fight him with your sword and you win.")
                else:
                    char_animation("You fight him but he is too strong and you die. Better luck next time...")
                    char_animation("Game over.... not yet...")
                    char_animation_in("You can go back a step if you would like... Press enter to go back...")
                    input()
                    situtation = 12
                    continue

            elif choice == 'b':
                char_animation("You run away as fast as you can, as strong as he looks you are faster.")
                char_animation("You run and run until you reach the clearing.")
                person_type += 1
                situtation = 1
                continue
            
            elif choice == 'c':
                char_animation("You stay still and do nothing... He continues running forward... You still do nothing, you stay still...")
                char_animation("You remember the beggar's words...")
                char_animation("In chaose you'll find peace... Neither charging forth nor seeking release... With no steps forward nor backward, you'll conquer the storm.")
                char_animation("He is still running at you....")
                char_animation("And he runs right at you and stops... He looks at you and says: ")
                char_animation("You are the first one who hasn't run away or fought me...")
                char_animation("Intriguing...")
                char_animation("Most find my appearance terrifying... I am the guardian of the arena... I am here to test you and all who come for all of enternity.")
                char_animation("You have passed the test...")
                previous_choices['fighter_arena'] = 1

            been_in_situations.add(12)
            
        char_animation_in("Where would you like to go?: ")
        char_animation("1. Back to the clearing")
        char_animation("2. Go to the town")
        if get_karma('fighter_arena') == 1:
            char_animation("3. Go to the warrior's base")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town'],'c':['3','warrior','base']}, allow_save=True)
        else:
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)

        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 10
        elif choice == 'c':
            situtation = 11

    elif situtation == 5: #Dragon's Lair path 1
        person_type -= 1
        char_animation("You go down the dragon lair path, and you see bones scattered along the path. Do you: ")
        char_animation("1. Continue down the path")
        char_animation("2. Go back")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','continue'],'b':['2','back']}, allow_save=True)
        if choice == 'a':
            situtation = 6
        elif choice == 'b':
            situtation = 1
    
    elif situtation == 6: #Dragon's Lair path 2
        person_type -= 1
        char_animation("You continue down the path, and you see a dead body of a knight, possibly just a few days old, Do you: ")
        char_animation("1. Continue down the path")
        char_animation("2. Go back")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','continue'],'b':['2','back']}, allow_save=True)
        if choice == 'a':
            situtation = 7
        elif choice == 'b':
            situtation = 1
    
    elif situtation == 7: #Dragon's Lair
        person_type -= 1
        char_animation("You see a large cavern, nothing but darkness ahead. You hear a deep growling sound. Do you: ")
        char_animation("1. Go back")
        char_animation("2. Continue")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','continue']}, allow_save=True)
        if choice == 'a':
            situtation = 1
        elif choice == 'b':
            situtation = 8
    
    elif situtation == 8: #Dragon's Lair
        if 8 in been_in_situations:
            char_animation("You have already been here before... You are too scared to go back in.")
            situtation = 1
            continue
        been_in_situations.add(8)
        char_animation("\n\nDragon's Lair")
        
        char_animation("In the center of the cavern, you can barely see a shadowy figure. You slowly approach it and it moves with deadly speed. In the blink of an eye the way you came in is blocked by rocks.")
        char_animation("In the most petrifying voice you here it speak... Wait its speaking not to you but in you... You can hear its voice in your head.")
        char_animation("It voice loathes of pure evil and it speaks to you.")
        char_animation("\"You can only leave if you answer my riddle correctly.\"")
        question,answers = randchoice(RIDDLES)
        char_animation("")
        char_animation("    " + question)
        ans = char_animation_in("Answer: ").lower()
        if ans in answers:
            char_animation("The dragon lets out a laugh, yesss you have answer correctly... To bad you still have to die.")
            
        char_animation("The shadowy figure lets out a loud roar and you feel a searing pain in your head.")
        char_animation("You are now... not dead but not alive. You are something worse - a ghost. Not in the mortal plane but not in the afterlife. Neither here nor there")
        career = GHOST
        inventory = InventoryManager({})
        gold = 0
        char_animation("You leave to go back to the clearing...")
        input("")
        situtation = 1

    elif situtation == 10: #Town
        if career == None or career == 'None':
            if morailty > 0 and person_type > 0:
                career = WIZARD
            elif morailty < 0 and person_type < 0:
                career = WARLOCK
            elif morailty > 0 and person_type < 0:
                career = WARRIOR
            elif morailty < 0 and person_type > 0:
                career = VILLIAN
            else:
                career = randchoice([WIZARD, WARLOCK, WARRIOR, VILLIAN])
                previous_choices['career_choice'] = 1

        char_animation("\n\nTown")
    
        if 10 not in been_in_situations:
            char_animation("You walk down the path and enter a large town.")
            char_animation("The town is filled with people, you see shops, and children playing in the gardens.")
            char_animation("You see a sign that says: ")
            char_animation("Welcome to the Township of the Center, where happiness is found.")
            
            char_animation("You walk into the first shop you see, the Warrior's Den.")
            char_animation("You see the shopkeeper and he says: ")
            char_animation("Welcome to the Warrior's Den! I've been expecting you.")
            char_animation("We have everything you could want but I suppose you have some questions?")
            potential_questions = [
                ("Who are you?", "I am the shopkeeper of the Warrior's Den. As for my name... you can call me Tom"),
                ("Why were you expecting me?", "I was expecting you because you are special... why? Don't worry all will become clear..."),
                ("What do you want?", "I want to help you... I want to help you find your way..."),
                ("Where is this place?", "You are in a seperate plane of existence, far beyond your realm, how you got here I do not know. This is Mythopes, the kingdom ruled by Emporer Rahas."),
            ]
            if career == GHOST:
                previous_choices['told_ghost'] = 1
                potential_questions.append(("What happened to me?", "You are a ghost, you are in a different plane of existence... I don't know much about ghosts but you should try finding the priest of the Castle of the Day Before."))
            while True:
                char_animation("\n\n")
                for i,question in enumerate(potential_questions):
                    char_animation(f"{(i+1)}) {question[0]}")
                char_animation("What would you like to ask?")
                while True:
                    choice = char_animation_in("Enter your choice: ")
                    try:
                        choice = int(choice)
                        if choice >= 1 and choice <= len(potential_questions):
                            break
                    except:
                        pass
                    char_animation("Invalid choice.")

                char_animation("You ask: " + potential_questions[choice-1][0])
                char_animation("He replies: " + potential_questions[choice-1][1])
                potential_questions.pop(choice-1)
                if len(potential_questions) == 0:
                    break
            
            char_animation("\n\nGood Luck Adventurer!")
           
            char_animation("You walk through the town and see a few paths: ")

        if career != GHOST:
            char_animation("Where do you want to go?")
            char_animation("0. Shop")
            char_animation("1. Quiz for gold!!")
            char_animation("2. Slot Machine, try your luck out, win upto 1000x your bet")
            char_animation("3. Solve a riddle and win")
            char_animation("4. Wordle, guess the word in 6 tries and win 10 gold")
            char_animation("5. Farm")
            char_animation("6. City")
            char_animation("7. Library")
            char_animation("8. Arena")
            char_animation("9. Temple")
            choice = get_char_animation_in("Enter your choice: ",{'s':['0','shop'],'a':['1','quiz'],'b':['2','slot','machine'],'c':['3','trivia','quiz'],'d':['4','wordle'],'e':['5','farm'],'f':['6','city'],'g':['7','library'],'h':['8','arena'],'i':['9','temple']}, allow_save=True)
            if choice == 's':
                if career == WIZARD or career == VILLIAN:
                    char_animation("Welcome to the Magik shop!")
                    char_animation("1. Buy a spellbook of Stun (unlimited uses) (350 gold)")
                    char_animation("2. Buy a potion of poison (1 use) (30 gold)")
                    char_animation("3. Buy a potion of healing (1 use) (10 gold)")
                    char_animation("4. Buy a potion of invisibility (1 use) (100 gold)")
                    char_animation("5. I'm feeling lucky (25 gold)")
                    char_animation("6. Nothing, just browsing")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','spellbook'],'b':['2','poison'],'c':['3','healing'],'d':['4','invisibility'],'e':['5','lucky'], 'f':['6','nothing','browse']})
                    if choice == 'f':
                        char_animation("Come back later!")
                        continue #Reiterates back to the town nav menu                    
                    if choice == 'e':
                        if gold >= 25:
                            gold -= 25
                            char_animation("You buy a mystery item")
                            choice = randint(1,20)
                            if choice <= 1:
                                choice = 'a'
                                gold += 350 #Provide money for transaction
                            elif choice <= 5:
                                choice = 'd'
                                gold += 100
                            elif choice <= 12:
                                choice = 'b'
                                gold += 30
                            else:
                                choice = 'c'
                                gold += 10
                        else:
                            char_animation("You don't have enough gold")

                    if choice == 'a':
                        if gold >= 350:
                            gold -= 350
                            inventory.add("spellbook_of_stun")
                            char_animation("You buy a spellbook of Stun")
                        else:
                            char_animation("You don't have enough gold")
                    elif choice == 'b':
                        if gold >= 30:
                            gold -= 30
                            inventory.add("potion")
                            char_animation("You buy a potion of poison")
                        else:
                            char_animation("You don't have enough gold")
                    elif choice == 'c':
                        if gold >= 10:
                            gold -= 10
                            inventory.add("potion_of_healing")
                            char_animation("You buy a potion of healing")
                        else:
                            char_animation("You don't have enough gold")
                    elif choice == 'd':
                        if gold >= 100:
                            gold -= 100
                            inventory.add("potion_of_invisibility")
                            char_animation("You buy a potion of invisibility")
                        else:
                            char_animation("You don't have enough gold")
                    
                elif career == WARRIOR or career == WARLOCK:
                    char_animation("Welcome to the Warrior's shop!")
                    char_animation("1. Buy a sword (unlimited uses, can break) (100 gold)")
                    char_animation("2. Buy a strength potion (one time use) (50 gold)")
                    char_animation("3. Buy a potion of healing (one time use) (10 gold)")
                    char_animation("4. Buy armor (always active) (300 gold)")
                    char_animation("5. I'm feeling lucky (25 gold)")
                    char_animation("6. Nothing, just browsing")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','sword'],'b':['2','strength'],'c':['3','healing'],'d':['4','armor'],'e':['5','lucky'], 'f':['6','nothing','browse']})
                    if choice == 'f':
                        char_animation("Come back later!")
                        continue
                    if choice == 'e':
                        if gold >= 25:
                            gold -= 25
                            char_animation("You buy a mystery item")
                            choice = randint(1,20)
                            if choice <= 1:
                                choice = 'd'
                                gold += 300
                            elif choice <= 5:
                                choice = 'a'
                                gold += 100
                            elif choice <= 9:
                                choice = 'b'
                                gold += 50
                            else:
                                choice = 'c'
                                gold += 10
                        else:
                            char_animation("You don't have enough gold")
                    
                    if choice == 'a':
                        if gold >= 100:
                            gold -= 100
                            inventory.add("sword")
                            char_animation("You buy a sword")
                        else:
                            char_animation("You don't have enough gold")
                    
                    elif choice == 'b':
                        if gold >= 50:
                            gold -= 50
                            inventory.add("strength_potion")
                            char_animation("You buy a strength potion")
                        else:
                            char_animation("You don't have enough gold")
                    
                    elif choice == 'c':
                        if gold >= 10:
                            gold -= 10
                            inventory.add("potion_of_healing")
                            char_animation("You buy a potion of healing")
                        else:
                            char_animation("You don't have enough gold")
                    
                    elif choice == 'd':
                        if gold >= 300:
                            gold -= 300
                            inventory.add("armor")
                            char_animation("You buy armor")
                        else:
                            char_animation("You don't have enough gold")
                    

            elif choice == 'a':
                gold += play_quiz()
            elif choice == 'b':
                gold += play_slot_machine()
            elif choice == 'c':
                gold += play_trivia()
            elif choice == 'd':
                gold += play_wordle()
            elif choice == 'e':
                situtation = 13
            elif choice == 'f':
                situtation = 14
            elif choice == 'g':
                situtation = 3
            elif choice == 'h':
                situtation = 12
            elif choice == 'i':
                situtation = 2
        else:
            if previous_choices['told_ghost'] != 1:
                char_animation("You walk into the shop and the shopkeeper looks at you and say, what happened to you! You are a ghost, you are in a different plane of existence... I don't know much about ghosts but you should try finding the priest of the Castle of the Day Before.")

            char_animation("\nYou walk back to the main street and ask around for the Castle of the Day Before... An old man shows you the direction and you start your journey there...")
            situtation = 15
            
    elif situtation == 11: #Warrior's Base
        char_animation("\n\nWarrior's Base")
        char_animation("\n\nThis is all for now! Come back later when chapter 2 is released!")
        char_animation("Would you like to go: ")
        char_animation("1. Back to th Arena")
        char_animation("2. To the town")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','back'],'b':['2','town']}, allow_save=True)
        if choice == 'a':
            situtation = 12
        elif choice == 'b':
            situtation = 10
    
    elif situtation == 13: #Farm Journey
        if 13 not in been_in_situations:
            char_animation("You start walking towards the farm...")
            char_animation(f"and walk {PAUSE} and walk {PAUSE} and {PAUSE} walk... {PAUSE}")
            char_animation("Its been hours, you see a cart coming down the road...")
            char_animation("Do you: ")
            char_animation("1. Ask for a ride")
            char_animation("2. Ignore it")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','ride'],'b':['2','ignore']})
            if choice == 'a':
                char_animation("You ask for a ride and they agree. You get in and they start taking you to the farm.")
                char_animation("There are 3 people in the cart,")
                char_animation("A large man with a handlebar mustache driving the cart")
                char_animation("A thin man with a large hat")
                char_animation("A woman with a large basket")
                char_animation("The thin man looks at you and friendly says: ")
                char_animation("\n  Hello there! Where are you headed?")
                char_animation_in("  You reply: ")
                char_animation("  He says: 'Wow! Doesn't seem like you are from around here... where are you from?'")
                char_animation_in("  You reply: ")
                char_animation(f"  He says: 'Wow! Interesting...{PAUSE}")
                char_animation("  You wouldn't happen to have some gold on you, for our troubles you know?")
                char_animation("\nBefore you can reply he pulls out a knife out of his hat and points it at you.")
                char_animation("The woman pulls out another knife and holds it at your throat.")
                char_animation("The large man silently stops on the side of the road and turns around slowly.")
                char_animation("He starts going through your pockets and finds your gold.")
                char_animation(f"-{gold} Gold")
                char_animation(f"You are thrown onto the road. As they are about to run off, you see a blur run past you.")
                if get_karma("fighter_arena") == 1:
                    char_animation("Its your friend from the arena, he quickly disarms and ties up the three bandits.")
                else:
                    char_animation("Its a mysterious figure, he quickly disarms and ties up the three bandits.")
                    char_animation("He introduces himself as a warrior recently freed from the Arena")
                char_animation("He returns your gold ")
                
            elif choice == 'b':
                char_animation("You continue walking down the road...")
                char_animation("and you walk {PAUSE} and walk {PAUSE} and {PAUSE} walk... {PAUSE}")
                char_animation("Its night time...")
                char_animation("A giant wolf jumps out of the bushes and runs towards you...")
                char_animation_in("Quick, do you: ")
                char_animation("1. Run")
                char_animation("2. Fight")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','run'],'b':['2','fight']})
                if choice == 'a':
                    char_animation("You run as fast as you can towards a tree, the wolf is faster...")
                    char_animation("{PAUSE} you are about the reach the tree when you trip and fall...")
                    char_animation("The wolf is about to pounce on you when you hear a loud roar...")
                    char_animation("The wolf is thrown back and you see a large figure standing in front of you...")
                    if previous_choices['fighter_arena'] == 1:
                        char_animation("Its your friend from the arena, he picks up the wolf and hurls it a few yards away. It runs away")
                    else:
                        char_animation("Its a mysterious figure, he picks up the wolf and hurls it a few yards away. It runs away")
                        char_animation("He introduces himself as a warrior recently freed from the Arena")    

                elif choice == 'b':
                    if 'sword' in inventory:
                        char_animation("You fight the wolf with your sword, but it snaps as soon as it hits the wolf's hide. You realise its metallic.")
                        inventory.remove('sword')
                        inventory.add('broken_sword')
                    elif 'potion' in inventory:
                        char_animation("You throw your potion at the wolf but it is impervious to it.")
                        inventory.remove('potion')
                    else:
                        char_animation("You pick up a stick and try to scare away the wolf but it looks deep into your eyes. You realise you are in trouble")

                    char_animation("As you are about to be pounced on, you hear a loud roar... you see a flash of metal and the wolf is bleeding blue blood. It quickly runs away.")
                    if previous_choices['fighter_arena'] == 1:
                        char_animation("Its your friend from the arena!")
                    else:
                        char_animation("Its a mysterious figure, he introduces himself as a warrior recently freed from the Arena!")

                char_animation("That was a blood wolf, impervious to most things, but not Excalibur here!")
            
            char_animation("Why are you out here?")
            char_animation_in("You reply: ")
            char_animation("He says: 'I see... You should be more careful next time!")
            if get_karma("fighter_arena") == 1:
                previous_choices['fighter_arena'] = 1
                char_animation("Come meet me at the warrior's base at the arena whenever you want.")
                been_in_situations.add(12)
            been_in_situations.add(13)
            char_animation("You continue down the road, and you see the farm in the distance...")
            char_animation("You see a large barn, a few cows, and a farmer working in the fields.")
            char_animation("Ready to go there?")
            char_animation("1. Yes")
            char_animation("2. YESSSSS")
            char_animation("3. Too late to turn back now ;-;")
            choice = get_char_animation_in(">> ", {'y':['yes','1'],'2':['ofc','2'],'3':['too late','3']})

        situtation = 16 # Actual farm
    
    elif situtation == 16: #Farm
        char_animation("\n\nFarm")
        input()

        char_animation("Where would you like to go?: ")
        char_animation("1. Food Shop")
        char_animation("2. Farms to earn credits")
        char_animation("3. City")
        char_animation("4. Town")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','food'],'b':['2','farms'],'c':['3','city'],'d':['4','town']}, allow_save=True)
        if choice == 'a':
            pass
        elif choice == 'b':
            pass
        elif choice == 'c':
            situtation = 14
        elif choice == 'd':
            situtation = 10
    
    elif situtation == 14: #City Journey
        if 14 not in been_in_situations and career != GHOST:
            char_animation("You start walking towards the city...")
            char_animation("Before long you see people walking on the path")
        
            if career in {WARLOCK, WARRIOR}:
                char_animation("\nYou see a perosn in black, dusty robes. Do you approach him?")
                char_animation("1. Yes")
                char_animation("2. No")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
                if choice == 'a':
                    char_animation(f"You approach saying 'Hello there! I am {NAME}.'")
                    char_animation("Hey I'm John, the Blacksmith. I make and fix weapons and armor for the warriors of the town.")
                    char_animation("If you come across any broken weapons or armor, bring them to me in the city and I'll fix them for you.")
                
            else:
                char_animation("You continue down the path and see a old man in dark faded blue robes with a wooden staff. Do you approach him?")
                char_animation("1. Yes")
                char_animation("2. No")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
                if choice == 'a':
                    char_animation("You approach him and say 'Hello there! I am {NAME}.'")
                    char_animation("He looks at you and says 'Hello {NAME}, I am the cleric of the town. I help the people of the town with their magical needs.'")
                    char_animation("If you ever need help with anything, come to me in the city.")
                    char_animation("Want anything else right now?")
                    if char_animation_in("You reply: ").lower() in {'teach', 'learn', 'magic', 'help'}:
                        char_animation("He says: 'I can teach you a thing or two I suppose.'")
                        char_animation("He teaches you how to make the potion of harming. You now have unlimited potions of harming!")
                        inventory.add("potion", amt=9999999) #Technically just under 10 Million
                    char_animation("He says: Bye for now!")

            char_animation("You continue down the path and see a woman dressed in a bright colourflul dress. Do you approach her?")
            char_animation("1. Yes")
            char_animation("2. No")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
            if choice == 'a':
                char_animation("You approach her and say 'Hello there! I am {NAME}.'")
                char_animation("She looks at you and says 'Hello {NAME}, I am the florist of the city.'")
                char_animation("What do you say?")
                char_animation("1. Ask for information about the city")
                char_animation("2. Ask for a flower")
                choice = get_char_animation_in("Enter your choice: ",{'a':['1','info'],'b':['2','flower']})
                if choice == 'a':
                    char_animation("She tells you about the city and its history. You learn a lot about the city.")
                elif choice == 'b':
                    char_animation("Haha sure! She gives you a flower.")
                    char_animation("'How much do I owe you?', you ask.")
                    char_animation("'Oh no, its free! Don't worry about it!'")
                    char_animation("If you ever want a flower, come to me in the city!")
                    inventory.add("flower")
                    char_animation("You thank her and continue down the path.")

            char_animation("You continue down the path and see a street vendor selling stuff. Do you approach him?")
            char_animation("1. Yes")
            char_animation("2. No")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','yes'],'b':['2','no']})
            if choice == 'a':
                if career in {WIZARD, VILLIAN}:
                    char_animation("The vendor shows you the following items for sale: ")
                    char_animation("1. Potion of Harming (one use) (4 gold)")
                    char_animation("2. Potion of Foresight (one use) (3 gold)")
                    char_animation("3. Potion of Stulus (one use) (12 gold)")
                    char_animation("What would you like to buy?")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','harming'],'b':['2','foresight'],'c':['3','stulus']})            
                    if choice == 'a':
                        if gold >= 4:
                            gold -= 4
                            inventory.add("potion_of_harming")
                            char_animation("You buy a potion of harming")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'b':
                        if gold >= 3:
                            gold -= 3
                            inventory.add("potion_of_foresight")
                            char_animation("You buy a potion of foresight. Tip: to activate it type 'foresight'")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'c':
                        if gold >= 12:
                            gold -= 12
                            inventory.add("potion_of_stulus")
                            char_animation("You buy a potion of stulus")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")

                elif career in {WARRIOR, WARLOCK}:
                    char_animation("The vendor shows you the following items: ")
                    char_animation("1. Totem of escape (one use) (50 gold)")
                    char_animation("2. Beads of Fortune (one use) (3 gold)")
                    char_animation("3. Potion of Stulus (one use) (12 gold)")

                    char_animation("What would you like to buy?")
                    choice = get_char_animation_in("Enter your choice: ",{'a':['1','escape'],'b':['2','fortune'],'c':['3','stulus']})
                    if choice == 'a':
                        if gold >= 50:
                            gold -= 50
                            inventory.add("totem_of_escape")
                            char_animation("You buy a totem of escape")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'b':
                        if gold >= 3:
                            gold -= 3
                            inventory.add("beads_of_fortune")
                            char_animation("You buy beads of fortune")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                    elif choice == 'c':
                        if gold >= 12:
                            gold -= 12
                            inventory.add("potion_of_stulus")
                            char_animation("You buy a potion of stulus")
                        else:
                            char_animation("You don't have enough gold. The vendor is annoyed and you move forward.")
                
            been_in_situations.add(14)
            char_animation("You continue down the road and see the city's sky high walls...")
        
        situtation = 17 # Actual city
    
    elif situtation == 17: #City
        char_animation("\n\nCity")
        if 17 not in been_in_situations:
            char_animation("You walk towards the towering gates of the city and see the guards standing there.")
            char_animation("They ask you for your name and purpose of visit.")
            char_animation("You tell them your name and that you are here to explore the city.")
            char_animation("They tell you that you must solve a riddle to enter the city.")
        
            while True:
                question,answers = randchoice(LOGIC_PUZZLES)
                correct = str(answers[0])
                answers = shuffle(answers)

                char_animation("")
                char_animation(question)
                for i,ans in enumerate(answers):
                    char_animation(f"{i+1}. {ans}")

                ans = get_char_animation_in("Enter your choice: ",{0:['1'],1:['2'],2:['3'],3:['4']})
                
                if answers[ans] == correct:
                    char_animation("The guards let you in.")
                    break
                char_animation(f"The guards shake their heads and tell you the answer was {correct}. They tell you to try again.")

            char_animation("You walk into the city and see a large dystopian city. There are flying cars everywhere. There seems to be no difference between tech and magic")
            char_animation("You see a sign that says: Tech + Magic = Life")
            char_animation("You try to buy some food but they only accept credits not gold. You ask around and find out that you can earn credits by doing tasks.")

            been_in_situations.add(17)

        char_animation("Where would you like to go?")
        char_animation("1. Flower Shop")
        char_animation("2. High-tech Blacksmith")
        char_animation("3. Cleric")
        char_animation("4. Town")
        char_animation("5. Earn Credits")
        choice = get_char_animation_in("Enter your choice: ",{'a':['1','flower'],'b':['2','blacksmith'],'c':['3','cleric'],'d':['4','town'],'e':['5','credits']}, allow_save=True)

        if choice == 'a':
            char_animation("Welcome to the Flower Shop!")
            char_animation("1. Buy a flower (1 credit)")
            char_animation("2. Buy 10 flowers (8 credits)")
            char_animation("3. Buy flower bouquet (20 credits)")
            char_animation("4. Buy a mega flower (99 credits)")
            char_animation("5. Nothing, just browsing")
            choice = get_char_animation_in("Enter your choice: ",{'a':['1','flower'],'b':['2','flowers'],'c':['3','bouquet'],'d':['4','mega'],'e':['5','nothing','browse']})
            if choice == 'a':
                if credits >= 1:
                    credits -= 1
                    inventory.add("flower")
                    char_animation("You buy a flower")
                else:
                    char_animation("You don't have enough credits")
            if choice == 'b':
                if credits >= 8:
                    credits -= 8
                    inventory.add("flower", amt=10)
                    char_animation("You buy 10 flowers")
                else:
                    char_animation("You don't have enough credits")
            if choice == 'c':
                if credits >= 20:
                    credits -= 20
                    inventory.add("flower_bouquet")
                    char_animation("You buy a flower bouquet")
                else:
                    char_animation("You don't have enough credits")
            if choice == 'd':
                if credits >= 99:
                    credits -= 99
                    inventory.add("mega_flower")
                    char_animation("You buy a mega flower")
                else:
                    char_animation("You don't have enough credits")

        elif choice == 'b':
            char_animation("Welcome to the Blacksmith!")
            char_animation("1. Fix sword (2 credits)")
            char_animation("2. Fix armor (5 credits)")
            char_animation("3. Buy a CUSTOM sword (30+ credits) (Doesn't break!)")

            choice = get_char_animation_in("Enter your choice: ",{'a':['1','sword'],'b':['2','armor'],'c':['3','custom']})
            if choice == 'a':
                if credits >= 2:
                    if 'broken_sword' in inventory:
                        credits -= 2
                        inventory.remove("broken_sword")
                        inventory.add("sword")
                        char_animation("Your sword is fixed")
                    else:
                        char_animation("You don't have a broken sword")

                else:
                    char_animation("You don't have enough credits")
            
            elif choice == 'b':
                if credits >= 5:
                    if 'broken_armor' in inventory:
                        credits -= 5
                        inventory.remove("broken_armor")
                        inventory.add("armor")
                        char_animation("You armor is fixed")
                    else:
                        char_animation("You don't have broken armor")
                else:
                    char_animation("You don't have enough credits")
            
            elif choice == 'c':
                if credits >= 30:
                    char_animation("Let's build your sword!")
                    current_price = 30
                    stuff = [
                        "Name your sword (10 credits)",
                        "Color your sword (25 credits)",
                        "Make your sword Extra Sharp (50 credits)",
                        "Enchantment your sword (100 credits + Enchantment book required)"
                    ]
                    options = {'a':['1','name'],'b':['2','color'],'c':['3','sharp'],'d':['4','enchantment'], 'e':['5','done','buy'], 'f':['6','cancel']}
                    bought_items = {"name":None, "color":None, "sharp":None, "enchantment":[]}
                    while True:
                        char_animation(f"Your have {credits-current_price} credits left.")
                        char_animation("What would you like to add: ")
                        
                        for i,thing in enumerate(stuff):
                            char_animation(f"{i+1}. {thing}")
                        char_animation("5. Done and buy")
                        char_animation("6. Cancel")

                        choice = get_char_animation_in("Enter your choice: ",options)
                        if choice == 'a':
                            if credits >= current_price + 10:
                                if bought_items["name"] == None:
                                    current_price += 10
                                bought_items["name"] = char_animation_in("Enter the name of your sword: ")
                                char_animation(f"You name your sword {bought_items['name']}")
                            else:
                                char_animation("You don't have enough credits")

                        if choice == 'b':
                            if credits >= current_price + 25:
                                if bought_items["color"] == None:
                                    current_price += 25
                                char_animation("Pick a color: ")
                                char_animation("1. Red")
                                char_animation("2. Blue")
                                char_animation("3. Green")
                                char_animation("4. Yellow")
                                char_animation("5. Purple")
                                char_animation("6. White")
                                bought_items["color"] = get_char_animation_in("Enter the color of your sword: ",{RED:['1','red'],BLUE:['2','blue'],GREEN:['3','green'],YELLOW:['4','yellow'],PURPLE:['5','purple'],WHITE:['6','white']})
                                char_animation(f"{bought_items['color']}You color your sword this color{DEFAULT_COLOR}")
                            else:
                                char_animation("You don't have enough credits")

                        if choice == 'c':
                            if credits >= current_price + 50:
                                if bought_items["sharp"] != None:
                                    char_animation("You already made your sword extra sharp")
                                else:
                                    current_price += 50
                                    bought_items["sharp"] = True
                                    char_animation("You make your sword extra sharp")
                            else:
                                char_animation("You don't have enough credits")

                        if choice == 'd':
                            possible_books = []
                            for item in inventory.inventory:
                                if "enchantmentBook" in item:
                                    possible_books.append((item,ENCHANTMENT_BOOKS[item]))
                            
                            if len(possible_books) == 0:
                                char_animation("You don't have any enchantment books!")
                            elif credits < current_price + 100:
                                char_animation("You don't have enough credits")
                            else:
                                for i,thing in enumerate(possible_books):
                                    item,description = thing
                                    char_animation(f"{i+1} {description}")
                                
                                choice = get_char_animation_in(
                                    "Enter your choice: ",
                                    {i:[str(i+1),item]}
                                )
                                bought_items["enchantment"].append(item)
                                current_price += 100
                                char_animation(f"Enchanting your sword with {ENCHANTMENT_BOOKS[item]}")                             

                        if choice == 'e':
                            if credits >= current_price:
                                credits -= current_price
                                char_animation("You buy the sword!\n\nHere are its details: ")
                                if bought_items["name"] != None:
                                    previous_choices['sword_name'] = bought_items["name"]
                                    char_animation(f"Name: {bought_items['name']}")
                                if bought_items["color"] != None:
                                    previous_choices['sword_color'] = bought_items["color"]
                                    char_animation(f"Color: {bought_items['color']}sword{DEFAULT_COLOR}")
                                if bought_items["sharp"] != None:
                                    previous_choices['sword_sharp'] = 1
                                    char_animation("Sharpness: Extra Sharp")
                                if len(bought_items["enchantment"]) > 0:
                                    for item in bought_items["enchantment"]:
                                        previous_choices[item] = 1
                                    char_animation(f"Enchantment{'s' if len(bought_items) > 1 else ''}: {', '.join([ENCHANTMENT_BOOKS[item][16:] for item in bought_items['enchantment']])}")
                                
                                for item in bought_items["enchantment"]:
                                    inventory.remove(item) #Remove the enchantment books
                                
                                char_animation(f"Price: {current_price} credits")
                                inventory.add("sword", amt = 9999999)
                                break
                            else:
                                char_animation("You don't have enough credits")
                        
                        if choice == 'f':
                            char_animation("You cancel the transaction")
                            break
                        
                        
                        choice = get_char_animation_in("Enter your choice: ",options)

                else:
                    char_animation("You don't have enough credits :(")

        elif choice == 'c':
            char_animation("Welcome to the Cleric's!")
            char_animation("Nothing here for now!")
            char_animation("Come back later!")

        elif choice == 'd':
            situtation = 10

        elif choice == 'e':
            char_animation("\nEarn Credits!")
            amt = play_trivia()
            char_animation(f"+{amt} credits")

    elif situtation == 15: #Castle
        char_animation("\n\nCastle of the Day Before")
        char_animation("Come back later!")
        input()

    elif situtation == -1 and DEBUG_ALLOWED: #Debug
        print("Debug mode")
        print(f"Situtation: {situtation}")
        print(f"Morailty: {morailty}")
        print(f"Person Type: {person_type}")
        print(f"Career: {career}")
        print(f"Previous Choices: {previous_choices}")
        print(f"Gold: {gold}")
        print(f"Inventory: {inventory}")
        print(f"Autosave: {autosave}")
        print(f"Name: {NAME}")
        print(f"Been in Situations: {been_in_situations}")
        
        print("Would you like to edit anything?")
        choice = input("Enter your choice (y/n): ").lower()
        if choice in {'y','yes'}:
            while True:
                command = input(">>> ")
                if command == 'exit':
                    break
                else:
                    exec(command)
        
        situtation = int(input("Enter the new situtation: "))

char_animation("Goodbye!")
